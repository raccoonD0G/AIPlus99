{"bad_code": "UCLASS() class AMyActor:public AActor{\npublic:AMyActor();virtual void BeginPlay()override;void Activate();protected:void ResetState();private:int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Stats\") int32 Health, MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 MaxHealth;"}
{"bad_code": "if(bIsGameOver) EndGame();", "good_code": "if (bIsGameOver)\n{\n    EndGame();\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyCustomClass.h\"\n#include \"Engine/Engine.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Engine.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyCustomClass.h\""}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Actions\") void Jump(){}", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Jump()\n{\n}"}
{"bad_code": "for(int32 i=0;i<10;++i)DoSomething();", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "class AMyCharacter:public ACharacter{\nprotected:void MoveForward(float Value);private:float Speed;};", "good_code": "class AMyCharacter : public ACharacter\n{\nprotected:\n    void MoveForward(float Value);\n\nprivate:\n    float Speed;\n};"}
{"bad_code": "int32 CalculateScore(int32 Points,int32 Bonus){return Points+Bonus;}", "good_code": "int32 CalculateScore(int32 Points, int32 Bonus)\n{\n    return Points + Bonus;\n}"}
{"bad_code": "bool bIsActive;if(bIsActive)DoSomething();", "good_code": "bool bIsActive;\n\nif (bIsActive)\n{\n    DoSomething();\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Movement\") float Speed,Acceleration;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Acceleration;"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n\tAMyActor() { Initialize(); }\nprivate:\n\tbool bIsActive; int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprivate:\n    bool bIsActive;\n    int32 Health;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/Engine.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n};"}
{"bad_code": "USTRUCT() struct FPlayerStats {\nUPROPERTY(EditAnywhere) int32 Health;\nUPROPERTY(EditAnywhere) int32 Armor;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    UPROPERTY(EditAnywhere)\n    int32 Health;\n\n    UPROPERTY(EditAnywhere)\n    int32 Armor;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void DoSomething() { if(bCanJump){ Jump(); } }\nprivate:\n    bool bCanJump;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void DoSomething();\n\nprivate:\n    bool bCanJump;\n};\n\nvoid AMyActor::DoSomething()\n{\n    if (bCanJump)\n    {\n        Jump();\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter();\n    void MoveForward(float Value);\n    virtual void BeginPlay() override;\nprivate:\n    float Speed; bool bIsRunning;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void MoveForward(float Value);\n\nprivate:\n    float Speed;\n    bool bIsRunning;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere) float MaxHealth; UPROPERTY(BlueprintReadWrite) float CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadWrite)\nfloat CurrentHealth;"}
{"bad_code": "class AMyActor : public AActor {\npublic:\n    AMyActor();\n    void Tick(float DeltaTime) override; void BeginPlay() override;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "void AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) { PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward); }", "good_code": "void AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n{\n    PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward);\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void SetActive(bool IsActive) { bIsActive = IsActive; }\nprivate:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void SetActive(bool IsActive);\n\nprivate:\n    bool bIsActive;\n};\n\nvoid AMyActor::SetActive(bool IsActive)\n{\n    bIsActive = IsActive;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere) float Speed; UPROPERTY(BlueprintReadWrite, EditAnywhere) float Acceleration;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nfloat Speed;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere)\nfloat Acceleration;"}
{"bad_code": "UCLASS() class AMyCharacter:public ACharacter{public:AMyCharacter(){MaxHealth=100;}void BeginPlay()override{Super::BeginPlay();}int GetHealthPercentage(){return (Health/MaxHealth)*100;}int32 Health,MaxHealth;};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n    {\n        MaxHealth = 100;\n    }\n\n    virtual void BeginPlay() override\n    {\n        Super::BeginPlay();\n    }\n\n    int GetHealthPercentage()\n    {\n        return (Health / MaxHealth) * 100;\n    }\n\nprivate:\n    int32 Health;\n    int32 MaxHealth;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"#include \"GameFramework/Actor.h\"#include \"MyActor.generated.h\"UCLASS() class AMyActor:public AActor{GENERATED_BODY()public:AMyActor();void Tick(float DeltaTime)override;};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere,BlueprintReadOnly,Category=\"Stats\")int32 Health;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Stats\")\nint32 Health;"}
{"bad_code": "void AMyActor::OnOverlapBegin(UPrimitiveComponent* OverlappedComp,AActor* OtherActor,UPrimitiveComponent* OtherComp,int32 OtherBodyIndex,bool bFromSweep,const FHitResult& SweepResult){\nif(OtherActor&&OtherActor!=this&&OtherComp){Destroy();}}", "good_code": "void AMyActor::OnOverlapBegin(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)\n{\n    if (OtherActor && OtherActor != this && OtherComp)\n    {\n        Destroy();\n    }\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable,Category=\"Action\")void Jump(){/* do something */}", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Action\")\nvoid Jump()\n{\n    // do something\n}"}
{"bad_code": "bool bIsJumping=false;bIsJumping=true;", "good_code": "bool bIsJumping = false;\nbIsJumping = true;"}
{"bad_code": "if(Health<=0)Destroy();", "good_code": "if (Health <= 0)\n{\n    Destroy();\n}"}
{"bad_code": "float Speed,Distance;Speed=600.0f;Distance=1000.0f;", "good_code": "float Speed;\nfloat Distance;\n\nSpeed = 600.0f;\nDistance = 1000.0f;"}
{"bad_code": "private:int32 Health;public:void SetHealth(int32 InHealth){Health=InHealth;}", "good_code": "public:\n    void SetHealth(int32 InHealth)\n    {\n        Health = InHealth;\n    }\n\nprivate:\n    int32 Health;"}
{"bad_code": "if(bIsAlive){Health-=10;if(Health<=0){bIsAlive=false;}}", "good_code": "if (bIsAlive)\n{\n    Health -= 10;\n\n    if (Health <= 0)\n    {\n        bIsAlive = false;\n    }\n}"}
{"bad_code": "UCLASS() class MyActor : public AActor {\npublic:\n    MyActor();\n    virtual void BeginPlay() override;\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "UPROPERTY() int32 Health;\n\nUFUNCTION()\nvoid Jump(){ /* implementation */}", "good_code": "UPROPERTY()\nint32 Health;\n\nUFUNCTION()\nvoid Jump()\n{\n    // Implementation\n}"}
{"bad_code": "int main(){int a=0;int b=1;a=b+2;}", "good_code": "int main()\n{\n    int a = 0;\n    int b = 1;\n    a = b + 2;\n}"}
{"bad_code": "void MoveToTarget() {if(bCanMove){Position+=Speed;}}", "good_code": "void MoveToTarget()\n{\n    if (bCanMove)\n    {\n        Position += Speed;\n    }\n}"}
{"bad_code": "bool bIsVisible=true;\nfloat MaxHealth=100.0f;\n\nif(bIsVisible){\n    SetActorHiddenInGame(false);}", "good_code": "bool bIsVisible = true;\nfloat MaxHealth = 100.0f;\n\nif (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "public:\nvoid Tick(float DeltaTime) override;\nvoid Start() {}", "good_code": "public:\n    void Tick(float DeltaTime) override;\n\n    void Start()\n    {\n        // Implementation\n    }"}
{"bad_code": "UPROPERTY(float Health;)", "good_code": "UPROPERTY()\nfloat Health;"}
{"bad_code": "if(a>0){result=1;}else{result=0;}", "good_code": "if (a > 0)\n{\n    result = 1;\n}\nelse\n{\n    result = 0;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\") int32 MaxHealth; UPROPERTY() bool bIsAlive;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 MaxHealth;\n\nUPROPERTY()\nbool bIsAlive;"}
{"bad_code": "UCLASS()\nclass AExampleActor : public AActor {\npublic:\n    AExampleActor(){};\n    void BeginPlay() override{\n        Super::BeginPlay();\n    }\nprivate:\nint32 Score, Health;\n};", "good_code": "UCLASS()\nclass AExampleActor : public AActor\n{\npublic:\n    AExampleActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Score;\n    int32 Health;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyExampleActor : public AActor {\n    GENERATED_BODY()\n    \n    UFUNCTION(BlueprintCallable, Category=\"Test\")\n    void TestFunction() { int32 X=0; X++; }\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyExampleActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Test\")\n    void TestFunction();\n\nprivate:\n    int32 X;\n};\n\nvoid AMyExampleActor::TestFunction()\n{\n    X = 0;\n    X++;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/Engine.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\npublic: \n    void CustomFunction() { if (true) { int32 A = 5; int32 B = 10; } }\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void CustomFunction();\n\nprivate:\n    int32 A;\n    int32 B;\n};\n\nvoid AMyActor::CustomFunction()\n{\n    if (true)\n    {\n        A = 5;\n        B = 10;\n    }\n}"}
{"bad_code": "USTRUCT()\nstruct FMyStruct {\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere) int32 X, Y;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    int32 X;\n\n    UPROPERTY(EditAnywhere)\n    int32 Y;\n};"}
{"bad_code": "UPROPERTY()\nbool CanJump;", "good_code": "UPROPERTY()\nbool bCanJump;"}
{"bad_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    void DoSomething() { int32 Result=0; Result+=10; }\n};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    void DoSomething();\n\nprivate:\n    int32 Result;\n};\n\nvoid UMyComponent::DoSomething()\n{\n    Result = 0;\n    Result += 10;\n}"}
{"bad_code": "public:\nvoid Function1() {}\nprotected:\nvoid Function2() {}\nprivate:\nvoid Function3() {}", "good_code": "public:\n    void Function1();\n\nprotected:\n    void Function2();\n\nprivate:\n    void Function3();"}
{"bad_code": "void MyFunction() {\n\n}", "good_code": "void MyFunction()\n{\n\n}"}
{"bad_code": "void ProcessData(int32 A,int32 B) {\n    int32 Result=A+B;\n}", "good_code": "void ProcessData(int32 A, int32 B)\n{\n    int32 Result = A + B;\n}"}
{"bad_code": "bool bIsVisible;UPROPERTY(BlueprintReadWrite)\nint32 Health;", "good_code": "UPROPERTY(BlueprintReadWrite)\nbool bIsVisible;\n\nUPROPERTY(BlueprintReadWrite)\nint32 Health;"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor() {}\n    virtual void BeginPlay() override;\nprotected:\n    void ResetState(){}\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyGame/MyGameMode.h\"\n#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyCharacter.h\"", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyCharacter.h\"\n#include \"MyGame/MyGameMode.h\""}
{"bad_code": "UCLASS() class UMyComponent : public UActorComponent {\npublic:\n    UPROPERTY(BlueprintReadOnly, float MaxHealth;)\n    UMyComponent() {}\n\n    void InitializeComponent() override{}\nprivate:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    virtual void InitializeComponent() override;\n\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\")\n    float MaxHealth;\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Status\") bool bIsEnabled;\nint32 Speed, Agility;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Status\")\nbool bIsEnabled;\n\nint32 Speed;\nint32 Agility;"}
{"bad_code": "void AMyCharacter::BeginPlay(){ Super::BeginPlay(); if(bIsAlive){ EnableInput(nullptr); }}", "good_code": "void AMyCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsAlive)\n    {\n        EnableInput(nullptr);\n    }\n}"}
{"bad_code": "class AEnemy : public AActor {\n    public: AEnemy(); void Attack(); private: int32 Damage; void Die();\n};", "good_code": "class AEnemy : public AActor\n{\npublic:\n    AEnemy();\n\n    void Attack();\n\nprivate:\n    int32 Damage;\n\n    void Die();\n};"}
{"bad_code": "if(bIsVisible){SetActorHiddenInGame(false);}else{SetActorHiddenInGame(true);}", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category = \"Movement\") void Jump();\nint32 Health, Stamina;", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Movement\")\nvoid Jump();\n\nint32 Health;\nint32 Stamina;"}
{"bad_code": "AMyClass::AMyClass() : Health(100) {}", "good_code": "AMyClass::AMyClass()\n    : Health(100)\n{\n}"}
{"bad_code": "if(bHasKey) { UnlockDoor(); }\nelse { LockDoor(); }", "good_code": "if (bHasKey)\n{\n    UnlockDoor();\n}\nelse\n{\n    LockDoor();\n}"}
{"bad_code": "UCLASS()\nclass AMyActor: public AActor {\npublic:\n    AMyActor() { \n        Health = 100; \n    }\n    void Activate() { /*...*/ }\nprotected:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprotected:\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n{\n    Health = 100;\n}\n\nvoid AMyActor::Activate()\n{\n    // Implementation\n}"}
{"bad_code": "USTRUCT()\nstruct FMyStruct {\n    int32 Value1, Value2;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 Value1;\n    int32 Value2;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "void AMyActor::BeginPlay(){\n    Super::BeginPlay();\n    Initialize(); }", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    Initialize();\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    UFUNCTION(BlueprintCallable) void Jump();\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    UFUNCTION(BlueprintCallable)\n    void Jump();\n};"}
{"bad_code": "int32 Calculate(int32 A,int32 B){return A+B;}", "good_code": "int32 Calculate(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\n    public: UMyComponent();\n    private: bool bIsActive;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "int32 A=10; int32 B=20; int32 Sum=A+B;", "good_code": "int32 A = 10;\nint32 B = 20;\nint32 Sum = A + B;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void SetHealth(float NewHealth) { Health = NewHealth; }", "good_code": "UFUNCTION(BlueprintCallable)\nvoid SetHealth(float NewHealth)\n{\n    Health = NewHealth;\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite) float Speed;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nfloat Speed;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyHeader.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic: AMyActor() { Init(); }\nprivate: void Init(); int32 Health; };", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyHeader.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprivate:\n    void Init();\n\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly,Category=\"Movement\") float Speed; UPROPERTY() int32 JumpHeight;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY()\nint32 JumpHeight;"}
{"bad_code": "void AMyActor::BeginPlay()\n{ Super::BeginPlay(); if(bIsActive) { Start(); } }", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsActive)\n    {\n        Start();\n    }\n}"}
{"bad_code": "bool bIsVisible=false;\nvoid ToggleVisibility() { if(bIsVisible==false){ bIsVisible=true; SetActorHiddenInGame(false);}else{bIsVisible=false; SetActorHiddenInGame(true);} }", "good_code": "bool bIsVisible = false;\n\nvoid ToggleVisibility()\n{\n    if (bIsVisible == false)\n    {\n        bIsVisible = true;\n        SetActorHiddenInGame(false);\n    }\n    else\n    {\n        bIsVisible = false;\n        SetActorHiddenInGame(true);\n    }\n}"}
{"bad_code": "UENUM() enum class ECharacterState{Idle,Running,Jumping}; ", "good_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "protected: void Reset(){} void Pause(){} \nprivate: int32 Score; ", "good_code": "protected:\n    void Reset()\n    {\n    }\n\n    void Pause()\n    {\n    }\n\nprivate:\n    int32 Score;"}
{"bad_code": "int32 Health = 100, Speed = 10;", "good_code": "int32 Health = 100;\nint32 Speed = 10;"}
{"bad_code": "void SetSpeed( float NewSpeed){Speed=NewSpeed;}", "good_code": "void SetSpeed(float NewSpeed)\n{\n    Speed = NewSpeed;\n}"}
{"bad_code": "for(int32 i=0;i<10;++i){ DoSomething();}", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void MoveTo(float X,float Y){}", "good_code": "UFUNCTION(BlueprintCallable)\nvoid MoveTo(float X, float Y)\n{\n}"}
{"bad_code": "class MyCharacter: public ACharacter{\npublic:\n    bool bIsJumping; int32 Health;\n    void Run(){}\n\n    AMyCharacter() { bIsJumping = false; }\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Run();\n\n    bool bIsJumping;\n\n    int32 Health;\n};\n\nAMyCharacter::AMyCharacter()\n{\n    bIsJumping = false;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\nprotected: void BeginPlay() override;\nprivate: UPROPERTY() int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\nprotected:\n    virtual void BeginPlay() override;\n\nprivate:\n    UPROPERTY()\n    int32 Health;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyHeader.h\"\n#include \"Engine/World.h\"\n#include \"Components/StaticMeshComponent.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n\n#include \"MyProject/MyHeader.h\""}
{"bad_code": "UPROPERTY() float MaxHealth;\nUPROPERTY(BlueprintReadOnly) float CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly)\nfloat CurrentHealth;\n\nUPROPERTY()\nfloat MaxHealth;"}
{"bad_code": "bool IsPlayerAlive(){return Health > 0;}", "good_code": "bool IsPlayerAlive()\n{\n    return Health > 0;\n}"}
{"bad_code": "void UpdateScore(int32 Points){Score+=Points;}", "good_code": "void UpdateScore(int32 Points)\n{\n    Score += Points;\n}"}
{"bad_code": "for(int i=0;i<10;i++){DoSomething();}", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UPROPERTY() bool bIsVisible;\nUPROPERTY() bool bCanMove;", "good_code": "UPROPERTY()\nbool bCanMove;\n\nUPROPERTY()\nbool bIsVisible;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime){\nSuper::Tick(DeltaTime); }", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "USTRUCT() struct FCharacterStats { int32 Attack; int32 Defense; };", "good_code": "USTRUCT()\nstruct FCharacterStats\n{\n    int32 Attack;\n\n    int32 Defense;\n};"}
{"bad_code": "#include \"MyGameInstance.h\"  \n#include \"Engine/Engine.h\"  \n#include \"GameFramework/Actor.h\"  \n#include \"MyCustomClass.h\"  \n#include \"CoreMinimal.h\"  \n\nUCLASS()  \nclass MYGAME_API AMyActor : public AActor  \n{  \npublic:  \n    AMyActor()  \n    {  \n    }  \n    void Tick(float DeltaTime) override {}  \n};  \n  \n-", "good_code": "#include \"CoreMinimal.h\"  \n#include \"Engine/Engine.h\"  \n#include \"GameFramework/Actor.h\"  \n\n#include \"MyCustomClass.h\"  \n#include \"MyGameInstance.h\"  \n\nUCLASS()  \nclass MYGAME_API AMyActor : public AActor  \n{  \npublic:  \n    AMyActor();  \n\n    virtual void Tick(float DeltaTime) override;  \n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere)  \nfloat Health, Armor;  \n\nvoid TakeDamage(int32 Damage){Health -= Damage;}  \n  \n-", "good_code": "UPROPERTY(VisibleAnywhere)  \nfloat Health;  \n\nUPROPERTY(VisibleAnywhere)  \nfloat Armor;  \n\nvoid TakeDamage(int32 Damage)  \n{  \n    Health -= Damage;  \n}"}
{"bad_code": "class AMyCharacter : public ACharacter  \n{  \npublic:  \n    void Attack();  \n    AMyCharacter();  \n\nprivate:  \n    float Stamina;  \n    float Health;  \n};  \n  \n-", "good_code": "class AMyCharacter : public ACharacter  \n{  \npublic:  \n    AMyCharacter();  \n\n    void Attack();  \n\nprivate:  \n    float Health;  \n    float Stamina;  \n};"}
{"bad_code": "UENUM()  \nenum class EWeaponType : uint8  \n{  \n    Sword, Bow, Dagger  \n};  \n  \n-", "good_code": "UENUM()  \nenum class EWeaponType : uint8  \n{  \n    Sword,  \n    Bow,  \n    Dagger  \n};"}
{"bad_code": "if (bIsJumping) SetActorLocation(NewLocation);  \nelse StopJumping();  \n  \n-", "good_code": "if (bIsJumping)  \n{  \n    SetActorLocation(NewLocation);  \n}  \nelse  \n{  \n    StopJumping();  \n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")  \nvoid Run();void Walk();  \n  \n-", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")  \nvoid Run();  \n\nUFUNCTION(BlueprintCallable, Category = \"Actions\")  \nvoid Walk();"}
{"bad_code": "void CalculateScore() {Score = Kills*10;}  \n  \n-", "good_code": "void CalculateScore()  \n{  \n    Score = Kills * 10;  \n}"}
{"bad_code": "bool bIsRunning = true;  \nbool IsSprinting = false;  \n  \n-", "good_code": "bool bIsRunning = true;  \nbool bIsSprinting = false;"}
{"bad_code": "public:  \nvoid Initialize();  \nprotected:  \nvoid Reset();  \nprivate:  \nint32 Points;  \n  \n-", "good_code": "public:  \n    void Initialize();  \n\nprotected:  \n    void Reset();  \n\nprivate:  \n    int32 Points;"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")  \nint32 Health;  \nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")  \nint32 Mana;  \n  \n-", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")  \nint32 Health;  \n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")  \nint32 Mana;"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n\tAMyActor() {};\n\n\tvirtual void BeginPlay() override {};\n\n\tvoid Activate() {\n\t\t// Activation logic\n\t};\nprotected:\n\tvoid ResetState() {};\nprivate:\n\tint32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyProject/MyProject.h\"\n\nvoid MyFunction() { int32 Value = 100; Value += 10; if(Value > 50) { Value = 50; } }", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyProject/MyProject.h\"\n#include \"MyActor.h\"\n\nvoid MyFunction()\n{\n    int32 Value = 100;\n    Value += 10;\n\n    if (Value > 50)\n    {\n        Value = 50;\n    }\n}"}
{"bad_code": "UPROPERTY() int32 Health, Stamina, Mana;\nint32 AddValues(int32 A, int32 B){return A+B;}", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Stamina;\n\nUPROPERTY()\nint32 Mana;\n\nint32 AddValues(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter {\n    UPROPERTY(BlueprintReadOnly) bool bIsDead;\n    UFUNCTION() void Jump() {  }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    UFUNCTION()\n    void Jump();\n\nprivate:\n    UPROPERTY(BlueprintReadOnly)\n    bool bIsDead;\n};"}
{"bad_code": "void CalculateDamage() {\nint32 BaseDamage=10; int32 TotalDamage=BaseDamage*2;}", "good_code": "void CalculateDamage()\n{\n    int32 BaseDamage = 10;\n    int32 TotalDamage = BaseDamage * 2;\n}"}
{"bad_code": "UENUM() enum class EWeaponType { Sword, Bow, Axe }; \nvoid EquipWeapon(EWeaponType WeaponType){}", "good_code": "UENUM()\nenum class EWeaponType\n{\n    Sword,\n    Bow,\n    Axe\n};\n\nvoid EquipWeapon(EWeaponType WeaponType)\n{\n}"}
{"bad_code": "class AGameModeBase : public AGameMode {\npublic: AGameModeBase();\nvoid StartPlay() override{}; private: bool bGameEnded; int32 Score;};", "good_code": "class AGameModeBase : public AGameMode\n{\npublic:\n    AGameModeBase();\n\n    void StartPlay() override;\n\nprivate:\n    bool bGameEnded;\n    int32 Score;\n};"}
{"bad_code": "for(int32 i=0;i<10;i++){int32 Sum=i*2;Sum+=1;}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    int32 Sum = i * 2;\n    Sum += 1;\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats { int32 Health, Stamina, Mana; };", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Health;\n    int32 Stamina;\n    int32 Mana;\n};"}
{"bad_code": "void ProcessData() { if(bIsValid) { Process(); }else{ Error(); } }", "good_code": "void ProcessData()\n{\n    if (bIsValid)\n    {\n        Process();\n    }\n    else\n    {\n        Error();\n    }\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor { public: AMyActor(){}; virtual void BeginPlay()override{}; void Activate(){}; protected: void ResetState(){}; private: int32 Health; };", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(float MaxHealth; UPROPERTY(BlueprintReadOnly, Category = \"Health\") UPROPERTY(BlueprintReadWrite, Category = \"Health\") float CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Health\")\nfloat CurrentHealth;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "#include \"GameFramework/Actor.h\" #include \"CoreMinimal.h\"\nclass MyClass\n{\npublic:\n  MyClass();\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\nclass MyClass\n{\npublic:\n    MyClass();\n};"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "for(int i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter { public: void Jump(); private: bool bIsJumping; };", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void Jump();\n\nprivate:\n    bool bIsJumping;\n};"}
{"bad_code": "int32 Add(int32 A,int32 B){return A+B;}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "void StartGame(){} void EndGame(){}", "good_code": "void StartGame()\n{\n}\n\nvoid EndGame()\n{\n}"}
{"bad_code": "int32 Health=100, Speed=10;", "good_code": "int32 Health = 100;\nint32 Speed = 10;"}
{"bad_code": "UENUM() enum class EGameState : uint8 { Playing,Paused,GameOver, };", "good_code": "UENUM()\nenum class EGameState : uint8\n{\n    Playing,\n    Paused,\n    GameOver,\n};"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic: AMyActor(); void BeginPlay() override;\n\nprotected: void ResetState(); private: int32 Health; }", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyGame.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"MyComponent.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n#include \"MyComponent.h\"\n#include \"MyGame.h\""}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n    { MovementSpeed = 600.0f; }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n    {\n        MovementSpeed = 600.0f;\n    }\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Health, Armor;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Health;\n\nUPROPERTY(EditAnywhere)\nint32 Armor;"}
{"bad_code": "void DoSomething() { if (bIsActive) { Activate(); }}", "good_code": "void DoSomething()\n{\n    if (bIsActive)\n    {\n        Activate();\n    }\n}"}
{"bad_code": "UENUM() enum class EWeaponType { Knife, Gun, Bow };", "good_code": "UENUM()\nenum class EWeaponType\n{\n    Knife,\n    Gun,\n    Bow\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Stats\") float Health;\nUPROPERTY(BlueprintReadWrite, Category=\"Stats\") float Armor;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nfloat Armor;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat Health;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) { Super::Tick(DeltaTime); UpdateMovement(); }", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    UpdateMovement();\n}"}
{"bad_code": "int32 Add(int32 A,int32 B) { return A+B; }", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "bool bIsVisible; float Opacity; bool bCanJump;", "good_code": "bool bIsVisible;\nbool bCanJump;\nfloat Opacity;"}
{"bad_code": "UCLASS() class AMyCharacter : public AActor {\npublic:\n    AMyCharacter() {\n        Health = 100;\n    }\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public AActor\n{\npublic:\n    AMyCharacter()\n    {\n        Health = 100;\n    }\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyProject.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void BeginPlay() override\n    {\n        Super::BeginPlay();\n        int32 x = 0, y = 1;\n        if (x<y) { x++; }\n    }\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyProject.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void BeginPlay() override\n    {\n        Super::BeginPlay();\n\n        int32 x = 0;\n        int32 y = 1;\n\n        if (x < y)\n        {\n            x++;\n        }\n    }\n};"}
{"bad_code": "UPROPERTY(EditAnywhere)\nint32 Score, Level;\n\nvoid CheckWin() { if (Score >= 100) { /* Win Logic */ } }", "good_code": "UPROPERTY(EditAnywhere)\nint32 Score;\n\nUPROPERTY(EditAnywhere)\nint32 Level;\n\nvoid CheckWin()\n{\n    if (Score >= 100)\n    {\n        // Win Logic\n    }\n}"}
{"bad_code": "int32 CalculateSum(int32 A, int32 B){return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats {\n    GENERATED_BODY()\n    UPROPERTY() float Health; UPROPERTY() float Stamina;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY()\n    float Health;\n\n    UPROPERTY()\n    float Stamina;\n};"}
{"bad_code": "bool bIsRunning; float Speed; bool bCanJump;", "good_code": "bool bIsRunning;\nfloat Speed;\nbool bCanJump;"}
{"bad_code": "void DoSomething(); void DoAnotherThing();\nint32 Add(int32 A, int32 B); int32 Subtract(int32 A, int32 B);", "good_code": "void DoSomething();\nvoid DoAnotherThing();\n\nint32 Add(int32 A, int32 B);\nint32 Subtract(int32 A, int32 B);"}
{"bad_code": "if (Condition) DoAction();", "good_code": "if (Condition)\n{\n    DoAction();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Attack() {}", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Attack()\n{\n}"}
{"bad_code": "for (int32 i=0;i<10;i++){ DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    virtual void BeginPlay() override;\n    AMyActor();\n    \n    int32 CurrentHealth;\nvoid Activate() {CurrentHealth = 100;}\n\nprivate:\n    float MaxHealth;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"MyComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 CurrentHealth;\n\n    float MaxHealth;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere) int32 Health;\n    UFUNCTION(BlueprintCallable) void TakeDamage(int32 Damage) {Health -= Damage;}\n\n    void ResetState() {\n        Health = 100;\n    }\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    int32 Health;\n\n    UFUNCTION(BlueprintCallable)\n    void TakeDamage(int32 Damage);\n\n    void ResetState();\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyActor.h\"\n\nAMyActor::AMyActor()\n{\n    PrimaryActorTick.bCanEverTick = true;}\n\nvoid AMyActor::BeginPlay() {Super::BeginPlay();}", "good_code": "#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n\nAMyActor::AMyActor()\n{\n    PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyComponent.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere) bool bIsActive;\n    UFUNCTION(BlueprintCallable) void ToggleActive() {bIsActive = !bIsActive;}\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    bool bIsActive;\n\n    UFUNCTION(BlueprintCallable)\n    void ToggleActive();\n};"}
{"bad_code": "#include \"MyGame.h\"\n#include \"CoreMinimal.h\"\n\nclass FMyClass {\n    public:\n        FMyClass() {};\n        void MyFunction() {int x = 0, y = 1; x = y;}\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"MyGame.h\"\n\nclass FMyClass\n{\npublic:\n    FMyClass();\n\n    void MyFunction();\n\nprivate:\n    int32 x;\n\n    int32 y;\n};"}
{"bad_code": "#include \"MyGame.h\"\n#include \"CoreMinimal.h\"\n\nclass FMyClass {\n    private:\n        int32 Value; bool bIsReady;\n\n    public:\n        FMyClass() {Value = 0; bIsReady = false;}\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"MyGame.h\"\n\nclass FMyClass\n{\npublic:\n    FMyClass();\n\nprivate:\n    int32 Value;\n\n    bool bIsReady;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyComponent.h\"\n\nUSTRUCT(BlueprintType)\nstruct FMyStruct {\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere) float Value;\n    UPROPERTY(EditAnywhere) bool bIsValid;\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"MyComponent.h\"\n\nUSTRUCT(BlueprintType)\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    float Value;\n\n    UPROPERTY(EditAnywhere)\n    bool bIsValid;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyGame.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\n    GENERATED_BODY()\n    public: void MoveTo(int32 X, int32 Y){int32 TargetX = X; int32 TargetY = Y;}\n};", "good_code": "#include \"Engine/World.h\"\n\n#include \"MyGame.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void MoveTo(int32 X, int32 Y);\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\n    GENERATED_BODY()\n    \n    UPROPERTY(VisibleAnywhere) int32 Score;\n    void AddScore(int32 Points) {Score += Points;}\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    GENERATED_BODY()\n\n    UPROPERTY(VisibleAnywhere)\n    int32 Score;\n\n    void AddScore(int32 Points);\n};"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"CoreMinimal.h\"\n\nclass UMyComponent: public UActorComponent {\n    public: UMyComponent() {}\n    void Initialize() {}\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"MyComponent.h\"\n\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    void Initialize();\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor() {};\n    void Activate() { bIsActive = true; }\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprivate:\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Activate()\n{\n    bIsActive = true;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category=\"Health\") float CurrentHealth, MaxHealth;\nif (Health > 50) { DoSomething(); }\nelse { DoSomethingElse(); }", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Health\")\nfloat CurrentHealth;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Health\")\nfloat MaxHealth;\n\nif (Health > 50)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void MoveToLocation(FVector Location) { /* Implementation */ }\nint32 Sum(int32 A,int32 B){return A+B;}", "good_code": "UFUNCTION(BlueprintCallable)\nvoid MoveToLocation(FVector Location)\n{\n    // Implementation\n}\n\nint32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "class UMyComponent : public UActorComponent {\nprivate:\n    UPROPERTY() int32 Health; UPROPERTY() float Speed;\npublic:\n    void Start() { /* Implementation */ } void Stop() { /* Implementation */ }\n};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    void Start();\n\n    void Stop();\n\nprivate:\n    UPROPERTY()\n    int32 Health;\n\n    UPROPERTY()\n    float Speed;\n};\n\nvoid UMyComponent::Start()\n{\n    // Implementation\n}\n\nvoid UMyComponent::Stop()\n{\n    // Implementation\n}"}
{"bad_code": "for (int32 i=0;i<10;++i) { DoTask(i); }\nTArray<FString> Names; Names.Add(\"John\"); Names.Add(\"Doe\");", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoTask(i);\n}\n\nTArray<FString> Names;\nNames.Add(\"John\");\nNames.Add(\"Doe\");"}
{"bad_code": "if(bIsReady) Execute(); else Reset();\nint32 Total=A+B+C;", "good_code": "if (bIsReady)\n{\n    Execute();\n}\nelse\n{\n    Reset();\n}\n\nint32 Total = A + B + C;"}
{"bad_code": "UENUM() enum class EGameState : uint8 { Playing, Paused, GameOver };\nUPROPERTY(BlueprintReadOnly) EGameState GameState;", "good_code": "UENUM()\nenum class EGameState : uint8\n{\n    Playing,\n    Paused,\n    GameOver\n};\n\nUPROPERTY(BlueprintReadOnly)\nEGameState GameState;"}
{"bad_code": "void DoSomething() { if (bCondition) { ActionOne(); } else { ActionTwo(); } }\nbool bIsFinished; bool bIsActive;", "good_code": "void DoSomething()\n{\n    if (bCondition)\n    {\n        ActionOne();\n    }\n    else\n    {\n        ActionTwo();\n    }\n}\n\nbool bIsFinished;\nbool bIsActive;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyGame/MyActor.h\"\n\nUCLASS() class AMyActor : public AActor {\n    AMyActor();\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n};"}
{"bad_code": "UFUNCTION(BlueprintImplementableEvent) void OnAction(); \nTArray<int32> Scores; Scores.Add(100); Scores.Add(200);", "good_code": "UFUNCTION(BlueprintImplementableEvent)\nvoid OnAction();\n\nTArray<int32> Scores;\nScores.Add(100);\nScores.Add(200);"}
{"bad_code": "#include \"Components/ActorComponent.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS() class UMyComponent : public UActorComponent {\npublic: UMyComponent() {}\nvoid Initialize() {}\nprivate: int32 Counter;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"Components/ActorComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    void Initialize();\n\nprivate:\n    int32 Counter;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Config\") int32 MaxSpeed; UPROPERTY(BlueprintReadWrite, Category=\"Config\") bool bIsEnabled;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Config\")\nbool bIsEnabled;\n\nUPROPERTY(EditAnywhere, Category = \"Config\")\nint32 MaxSpeed;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) { Super::Tick(DeltaTime); if (bShouldMove) { Move(); }}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bShouldMove)\n    {\n        Move();\n    }\n}"}
{"bad_code": "public: void Start(); protected:void Pause(); private: void Stop();", "good_code": "public:\n    void Start();\n\nprotected:\n    void Pause();\n\nprivate:\n    void Stop();"}
{"bad_code": "int32 AMyActor::CalculateScore(int32 A,int32 B){return A+B;}", "good_code": "int32 AMyActor::CalculateScore(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "if (bIsActive) DoSomething(); else DoSomethingElse();", "good_code": "if (bIsActive)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "int32 Sum = 0; for (int32 i = 0; i < 10; i++) { Sum += i; }", "good_code": "int32 Sum = 0;\n\nfor (int32 i = 0; i < 10; i++)\n{\n    Sum += i;\n}"}
{"bad_code": "int32 X,Y,Z; X = 10; Y = 20; Z = 30;", "good_code": "int32 X;\nint32 Y;\nint32 Z;\n\nX = 10;\nY = 20;\nZ = 30;"}
{"bad_code": "float Multiply(float A,float B){return A*B;}", "good_code": "float Multiply(float A, float B)\n{\n    return A * B;\n}"}
{"bad_code": "UFUNCTION() void ProcessData(); UFUNCTION() void SaveData();", "good_code": "UFUNCTION()\nvoid ProcessData();\n\nUFUNCTION()\nvoid SaveData();"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyCustomActor.h\"\n#include \"Components/StaticMeshComponent.h\"\nclass MyActor: public AActor {\npublic:\n    MyActor(){}\nprivate:\n    UPROPERTY(EditAnywhere)\n    float Health, MaxHealth;\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyCustomActor.h\"\n\nUCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    float Health;\n\n    UPROPERTY(EditAnywhere)\n    float MaxHealth;\n};"}
{"bad_code": "UCLASS()\nclass MyCharacter : public ACharacter {\n    GENERATED_BODY()\n    public:\n    void Jump() {};\n    void Run(){};\nprotected:\n    void Stop() {}\nprivate:\n    UPROPERTY()\n    bool bIsRunning;\n};", "good_code": "UCLASS()\nclass MyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    void Jump();\n\n    void Run();\n\nprotected:\n    void Stop();\n\nprivate:\n    UPROPERTY()\n    bool bIsRunning;\n};"}
{"bad_code": "UCLASS()\nclass AMyPawn: public APawn{\npublic:\n    void Tick(float DeltaTime) override {}\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override {\n    }\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    void Tick(float DeltaTime) override;\n\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\n    GENERATED_BODY()\n    void DoSomething(){}\n    void DoSomethingElse(){}\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void DoSomething();\n\n    void DoSomethingElse();\n};"}
{"bad_code": "UCLASS()\nclass MyComponent : public UActorComponent {\n    GENERATED_BODY()\n    UPROPERTY(BlueprintReadOnly, EditAnywhere)\n    int32 Health;\n    UPROPERTY(EditAnywhere)\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass MyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadOnly, EditAnywhere)\n    int32 Health;\n\n    UPROPERTY(EditAnywhere)\n    bool bIsActive;\n};"}
{"bad_code": "UCLASS()\nclass MyClass : public UObject {\n    GENERATED_BODY()\n    void BeginPlay() override { int32 A=5; int32 B=10; int32 Result=A+B; }\n    void CustomFunction() { Result++; }\n};", "good_code": "UCLASS()\nclass MyClass : public UObject\n{\n    GENERATED_BODY()\n\npublic:\n    void BeginPlay() override\n    {\n        int32 A = 5;\n        int32 B = 10;\n        int32 Result = A + B;\n    }\n\n    void CustomFunction()\n    {\n        Result++;\n    }\n\nprivate:\n    int32 Result;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.generated.h\"\nUCLASS()\nclass MyActor : public AActor {\n    GENERATED_BODY()\n    UPROPERTY(BlueprintReadWrite)\n    int32 Health;\n    UPROPERTY(BlueprintReadOnly)\n    float Speed;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadWrite)\n    int32 Health;\n\n    UPROPERTY(BlueprintReadOnly)\n    float Speed;\n};"}
{"bad_code": "UCLASS()\nclass MyController : public AController {\n    GENERATED_BODY()\n    bool bIsEnabled;\n    void Enable() { bIsEnabled = true; }\n    void Disable() { bIsEnabled = false; }\n};", "good_code": "UCLASS()\nclass MyController : public AController\n{\n    GENERATED_BODY()\n\npublic:\n    void Enable()\n    {\n        bIsEnabled = true;\n    }\n\n    void Disable()\n    {\n        bIsEnabled = false;\n    }\n\nprivate:\n    bool bIsEnabled;\n};"}
{"bad_code": "UCLASS()\nclass MyHud : public AHUD {\n    GENERATED_BODY()\n    UFUNCTION()\n    void DrawHUD() override {}\n    UPROPERTY()\n    FString PlayerName;\n};", "good_code": "UCLASS()\nclass MyHud : public AHUD\n{\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION()\n    void DrawHUD() override;\n\nprivate:\n    UPROPERTY()\n    FString PlayerName;\n};"}
{"bad_code": "USTRUCT()\nstruct MYGAME_API FMyStruct {\n    GENERATED_BODY()\n    UPROPERTY()\n    int32 Value1, Value2;\n    void Reset() { Value1 = 0; Value2 = 0; }\n};", "good_code": "USTRUCT()\nstruct MYGAME_API FMyStruct\n{\n    GENERATED_BODY()\n\npublic:\n    void Reset()\n    {\n        Value1 = 0;\n        Value2 = 0;\n    }\n\nprivate:\n    UPROPERTY()\n    int32 Value1;\n\n    UPROPERTY()\n    int32 Value2;\n};"}
{"bad_code": "if(bIsVisible){ SetActorHiddenInGame(false); }\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "#include \"MyProject.h\"\n#include \"Engine/World.h\"\n#include \"Components/ActorComponent.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/ActorComponent.h\"\n#include \"MyProject.h\""}
{"bad_code": "UPROPERTY(Category = \"Health\", BlueprintReadOnly) float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "class UMyComponent : public UActorComponent {\nprivate:\nint32 Health, MaxHealth;\npublic:\nUMyComponent();\nvoid InitializeComponent() override;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    void InitializeComponent() override;\n\nprivate:\n    int32 Health;\n    int32 MaxHealth;\n};"}
{"bad_code": "void UMyComponent::InitializeComponent()\n{\n    Health=100;MaxHealth=200;\n}", "good_code": "void UMyComponent::InitializeComponent()\n{\n    Health = 100;\n    MaxHealth = 200;\n}"}
{"bad_code": "for(int i=0;i<10;i++){ DoSomething(); }", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic:\nAMyActor() {}\nvoid BeginPlay() override\n{\nSuper::BeginPlay();\n}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "UPROPERTY() int32 AmmoCount;UPROPERTY() int32 MaxAmmo;", "good_code": "UPROPERTY()\nint32 AmmoCount;\n\nUPROPERTY()\nint32 MaxAmmo;"}
{"bad_code": "void SomeFunction(){int32 a=0,b=1;c=a+b;}", "good_code": "void SomeFunction()\n{\n    int32 a = 0;\n    int32 b = 1;\n    int32 c = a + b;\n}"}
{"bad_code": "bool bIsVisible = false;bool bIsEnabled = true;", "good_code": "bool bIsVisible = false;\nbool bIsEnabled = true;"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {\n        Health = 100;\n    }\n    virtual void BeginPlay() override;\n    void Activate() { bIsActive = true; }\nprivate:\n    int32 Health;\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 Health;\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n    Health = 100;\n}\n\nvoid AMyActor::Activate()\n{\n    bIsActive = true;\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Stats\") float Health, Stamina;", "good_code": "UPROPERTY(EditAnywhere, Category = \"Stats\")\nfloat Health;\n\nUPROPERTY(EditAnywhere, Category = \"Stats\")\nfloat Stamina;"}
{"bad_code": "int32 CalculateDamage(int32 BaseDamage,int32 DamageMultiplier){return BaseDamage*DamageMultiplier;}", "good_code": "int32 CalculateDamage(int32 BaseDamage, int32 DamageMultiplier)\n{\n    return BaseDamage * DamageMultiplier;\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerData{\n    GENERATED_BODY()\n    UPROPERTY() int32 Score;\n    UPROPERTY() bool IsAlive;\n};", "good_code": "USTRUCT()\nstruct FPlayerData\n{\n    GENERATED_BODY()\n\n    UPROPERTY()\n    int32 Score;\n\n    UPROPERTY()\n    bool IsAlive;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\" #include \"MyGameCharacter.h\" #include \"Engine/World.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameCharacter.h\""}
{"bad_code": "if (bIsVisible) SetActorHiddenInGame(false);\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "void AMyCharacter::MoveForward(float Value){\n if (Controller && Value != 0.0f){AddMovementInput(GetActorForwardVector(), Value);}\n}", "good_code": "void AMyCharacter::MoveForward(float Value)\n{\n    if (Controller && Value != 0.0f)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n}"}
{"bad_code": "for (int32 i=0;i<10;i++) Sum+=i;", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    Sum += i;\n}"}
{"bad_code": "void AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n    PrintWelcomeMessage();ResetGameState();\n}", "good_code": "void AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n\n    PrintWelcomeMessage();\n    ResetGameState();\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category=\"Character\") float m_Speed;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Character\")\nfloat m_Speed;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyActor.h\"\n\nAMyActor::AMyActor() : Health(100), Speed(600.f) {}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n    if (bIsActive) SetActorHiddenInGame(false);\n}", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nAMyActor::AMyActor()\n    : Health(100)\n    , Speed(600.f)\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsActive)\n    {\n        SetActorHiddenInGame(false);\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\n    GENERATED_BODY()\n    public:\n    AMyActor();\n    void Tick(float DeltaTime) override;\n    private:\n    int Health, Speed;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    int Health;\n    int Speed;\n};"}
{"bad_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats {\n    GENERATED_BODY()\n    UPROPERTY() int32 Score;\n    UPROPERTY() int32 Lives;\n};", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY()\n    int32 Score;\n\n    UPROPERTY()\n    int32 Lives;\n};"}
{"bad_code": "void Function() { int x=0; int y=1; x=x+y; }", "good_code": "void Function()\n{\n    int x = 0;\n    int y = 1;\n    x = x + y;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category=\"Health\") float Health;\nUPROPERTY(BlueprintReadOnly, Category=\"Health\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Health\")\nfloat Health;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Control\") void Jump();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Control\")\nvoid Jump();"}
{"bad_code": "if (bIsActive) { DoSomething(); } else DoNothing();", "good_code": "if (bIsActive)\n{\n    DoSomething();\n}\nelse\n{\n    DoNothing();\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\n    GENERATED_BODY() public: UMyComponent();\n    protected: void BeginPlay() override;\n    private: void DoSomething();\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\nprotected:\n    void BeginPlay() override;\n\nprivate:\n    void DoSomething();\n};"}
{"bad_code": "int32 Main()\n{\n    int32 A=5, B=10; int32 Result=A+B; return Result;\n}", "good_code": "int32 Main()\n{\n    int32 A = 5;\n    int32 B = 10;\n    int32 Result = A + B;\n\n    return Result;\n}"}
{"bad_code": "void UpdatePosition(float X, float Y) { PositionX=X; PositionY=Y; }", "good_code": "void UpdatePosition(float X, float Y)\n{\n    PositionX = X;\n    PositionY = Y;\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats\n{ int32 Health; int32 Stamina; };\n\nint32 CalculateDamage(int32 BaseDamage, int32 Modifier){return BaseDamage*Modifier;}\n\nif(bIsPlayerAlive) SetActorHiddenInGame(false);", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Health;\n    int32 Stamina;\n};\n\nint32 CalculateDamage(int32 BaseDamage, int32 Modifier)\n{\n    return BaseDamage * Modifier;\n}\n\nif (bIsPlayerAlive)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n\nAMyGameMode::AMyGameMode(){ DefaultPawnClass = AMyPawn::StaticClass(); }\n\nvoid AMyGameMode::StartPlay(){ Super::StartPlay(); BeginGame(); }", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGameMode.h\"\n\nAMyGameMode::AMyGameMode()\n{\n    DefaultPawnClass = AMyPawn::StaticClass();\n}\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n    BeginGame();\n}"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter\n{ public: AMyCharacter(); void Jump(); protected: float Stamina; private: void RecoverStamina(); };", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Jump();\n\nprotected:\n    float Stamina;\n\nprivate:\n    void RecoverStamina();\n};"}
{"bad_code": "bool bIsRunning; bool bIsJumping; float Speed, Acceleration; Speed = 0; Acceleration = 10;", "good_code": "bool bIsRunning;\nbool bIsJumping;\nfloat Speed;\nfloat Acceleration;\n\nSpeed = 0;\nAcceleration = 10;"}
{"bad_code": "UPROPERTY() int32 Health; UPROPERTY() float Damage; UPROPERTY() bool bIsDead;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nfloat Damage;\n\nUPROPERTY()\nbool bIsDead;"}
{"bad_code": "#define MAX_PLAYERS 4\n#define GAME_VERSION \"1.0.0\"\n\nclass UMyComponent\n{\npublic: UMyComponent(); void Initialize(); private: int32 PlayerCount; FString Version; };", "good_code": "#define MAX_PLAYERS 4\n#define GAME_VERSION \"1.0.0\"\n\nclass UMyComponent\n{\npublic:\n    UMyComponent();\n\n    void Initialize();\n\nprivate:\n    int32 PlayerCount;\n    FString Version;\n};"}
{"bad_code": "UENUM() enum class EGameState : uint8 { Playing, Paused, GameOver };\n\nvoid HandleInput(bool IsPressed){ if(IsPressed) DoAction(); }", "good_code": "UENUM()\nenum class EGameState : uint8\n{\n    Playing,\n    Paused,\n    GameOver\n};\n\nvoid HandleInput(bool IsPressed)\n{\n    if (IsPressed)\n    {\n        DoAction();\n    }\n}"}
{"bad_code": "void MoveForward(float Value){ if(Controller && Value != 0.0f) AddMovementInput(GetActorForwardVector(), Value); }", "good_code": "void MoveForward(float Value)\n{\n    if (Controller && Value != 0.0f)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite) float MaxHealth; UPROPERTY(BlueprintReadOnly) float CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadWrite)\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadOnly)\nfloat CurrentHealth;"}
{"bad_code": "public: void Fire() { /* Implementation */ } private: void Reload() { /* Implementation */ }", "good_code": "public:\n    void Fire()\n    {\n        // Implementation\n    }\n\nprivate:\n    void Reload()\n    {\n        // Implementation\n    }"}
{"bad_code": "#include \"PlayerStats.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/Character.h\"\n#include \"MyProject/MyCustomClass.h\"\n\nUCLASS() class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter() { Health = 100; }\n\n    void BeginPlay() override { Super::BeginPlay(); if (bIsInitialized) Initialize(); }\n\nprivate:\n    bool bIsInitialized;\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/Character.h\"\n\n#include \"MyProject/MyCustomClass.h\"\n#include \"PlayerStats.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n    {\n        Health = 100;\n    }\n\n    virtual void BeginPlay() override\n    {\n        Super::BeginPlay();\n\n        if (bIsInitialized)\n        {\n            Initialize();\n        }\n    }\n\nprivate:\n    bool bIsInitialized;\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(Category = \"Movement\", BlueprintReadOnly)\nfloat Speed, MaxSpeed;\n\nvoid AMyActor::Move() {\n    Speed = 10.0f; MaxSpeed = 20.0f;\n    if(Speed > MaxSpeed) Speed = MaxSpeed;\n}", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat MaxSpeed;\n\nvoid AMyActor::Move()\n{\n    Speed = 10.0f;\n    MaxSpeed = 20.0f;\n\n    if (Speed > MaxSpeed)\n    {\n        Speed = MaxSpeed;\n    }\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump();\nvoid AMyCharacter::Jump() { /* Jump logic */ }", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();\n\nvoid AMyCharacter::Jump()\n{\n    // Jump logic\n}"}
{"bad_code": "class AMyClass: public AActor{\npublic: AMyClass();\nprotected:\nint32 CalculateDamage(int32 BaseDamage, int32 Armor);\nprivate: int32 Health;\n};", "good_code": "class AMyClass : public AActor\n{\npublic:\n    AMyClass();\n\nprotected:\n    int32 CalculateDamage(int32 BaseDamage, int32 Armor);\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "bool bHasWeapon=false; int32 AmmoCount = 30; void UseAmmo() { if(AmmoCount > 0){ AmmoCount--; } }", "good_code": "bool bHasWeapon = false;\nint32 AmmoCount = 30;\n\nvoid UseAmmo()\n{\n    if (AmmoCount > 0)\n    {\n        AmmoCount--;\n    }\n}"}
{"bad_code": "public:\n    void SetHealth(int32 NewHealth) { Health = NewHealth; }\nprotected:\n    int32 Health;", "good_code": "public:\n    void SetHealth(int32 NewHealth)\n    {\n        Health = NewHealth;\n    }\n\nprotected:\n    int32 Health;"}
{"bad_code": "UPROPERTY()\nbool bIsVisible;UPROPERTY()\nint32 Health;\n\nvoid ToggleVisibility() {bIsVisible = !bIsVisible;}", "good_code": "UPROPERTY()\nbool bIsVisible;\n\nUPROPERTY()\nint32 Health;\n\nvoid ToggleVisibility()\n{\n    bIsVisible = !bIsVisible;\n}"}
{"bad_code": "void DealDamage(int32 Damage){ Health -= Damage; if(Health < 0) Health = 0; }", "good_code": "void DealDamage(int32 Damage)\n{\n    Health -= Damage;\n\n    if (Health < 0)\n    {\n        Health = 0;\n    }\n}"}
{"bad_code": "UENUM(BlueprintType) enum class EWeaponType:uint8 {Pistol, Rifle, Shotgun};", "good_code": "UENUM(BlueprintType)\nenum class EWeaponType : uint8\n{\n    Pistol,\n    Rifle,\n    Shotgun\n};"}
{"bad_code": "int32 CalculateHealth(){return MaxHealth-HealthLost;}", "good_code": "int32 CalculateHealth()\n{\n    return MaxHealth - HealthLost;\n}"}
{"bad_code": "class AMyActor : public AActor {\npublic:\n    AMyActor(){}\n\n    void DoSomething() { int32 Value = 0; Value++; }\n};", "good_code": "class AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void DoSomething();\n\nprivate:\n    int32 Value;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::DoSomething()\n{\n    int32 Value = 0;\n    Value++;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Initialize(); void Reset();\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Initialize();\n\n    void Reset();\n};"}
{"bad_code": "class AMyActor : public AActor\n{\nprivate:\n    int32 Health, Speed;\n};", "good_code": "class AMyActor : public AActor\n{\nprivate:\n    int32 Health;\n\n    int32 Speed;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Run(); void Walk();\nprivate:\n    int32 Stamina;\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Run();\n\n    void Walk();\n\nprivate:\n    int32 Stamina;\n\n    float Speed;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere)\nfloat MaxHealth;\nUPROPERTY(BlueprintReadOnly)\nfloat CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere)\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadOnly)\nfloat CurrentHealth;"}
{"bad_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n    virtual void BeginPlay() override;\nprotected:\n    void DoSomething(); int32 CalculateValue();\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void DoSomething();\n\n    int32 CalculateValue();\n};"}
{"bad_code": "UPROPERTY()\nfloat Speed;\nUPROPERTY()\nbool bIsRunning;", "good_code": "UPROPERTY()\nbool bIsRunning;\n\nUPROPERTY()\nfloat Speed;"}
{"bad_code": "class AMyActor : public AActor\n{\npublic:\n    void Jump() { /* Implementation */ }\n};", "good_code": "class AMyActor : public AActor\n{\npublic:\n    void Jump();\n};\n\nvoid AMyActor::Jump()\n{\n    // Implementation\n}"}
{"bad_code": "class AMyComponent : public UActorComponent\n{\npublic:\n    void Activate(); bool IsActive();\nprivate:\n    int32 m_Speed;\n};", "good_code": "class AMyComponent : public UActorComponent\n{\npublic:\n    void Activate();\n\n    bool IsActive();\n\nprivate:\n    int32 m_Speed;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS() class AMyActor : public AActor {\n    GENERATED_BODY()\npublic: AMyActor() {}\n\n    void BeginPlay() override;\n    void CustomFunction() {}\n\nprivate: int32 Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void CustomFunction();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS() class UMyComponent : public UActorComponent {\n    GENERATED_BODY()\npublic: void InitializeComponent() override {}\nprotected: void CustomFunction() {}\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    virtual void InitializeComponent() override;\n\nprotected:\n    void CustomFunction();\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) bool bIsVisible; int32 Value1, Value2;", "good_code": "UPROPERTY(EditAnywhere)\nbool bIsVisible;\n\nint32 Value1;\nint32 Value2;"}
{"bad_code": "void AMyCharacter::Jump() { if(bIsGrounded) { Super::Jump(); } }", "good_code": "void AMyCharacter::Jump()\n{\n    if (bIsGrounded)\n    {\n        Super::Jump();\n    }\n}"}
{"bad_code": "bool bIsActive = true; bool bHasStarted = false;\nint32 Score = 0; int32 Lives = 3;", "good_code": "bool bIsActive = true;\nbool bHasStarted = false;\n\nint32 Score = 0;\nint32 Lives = 3;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) { Super::Tick(DeltaTime); UpdatePosition(); }", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    UpdatePosition();\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category=\"Settings\") float Speed; \nUPROPERTY() int32 Score;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Settings\")\nfloat Speed;\n\nUPROPERTY()\nint32 Score;"}
{"bad_code": "int32 Add(int32 A,int32 B){return A+B;}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats { GENERATED_BODY() int32 Health; int32 Armor; };", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "#include \"MyGame/MyCharacter.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n\nUCLASS() class AMyCharacter : public ACharacter {\n    GENERATED_BODY()\npublic: AMyCharacter() {}\n\n    void BeginPlay() override;\n    void MoveForward(float Value) {}\n\nprotected: void CustomFunction() {}\n\nprivate: int32 Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n\n#include \"MyGame/MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void MoveForward(float Value);\n\nprotected:\n    void CustomFunction();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\n    public:\n    virtual void BeginPlay() override {\n        if (bIsActive) SetActive(true);\n        else SetActive(false);\n    }\n    private:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    virtual void BeginPlay() override\n    {\n        if (bIsActive)\n        {\n            SetActive(true);\n        }\n        else\n        {\n            SetActive(false);\n        }\n    }\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyActor();\n\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    UStaticMeshComponent* Mesh;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyActor();\n\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    UStaticMeshComponent* Mesh;\n};"}
{"bad_code": "UCLASS(config=Game)\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\npublic:\n    UFUNCTION(BlueprintCallable, Category=\"Character\")\n    void Jump(); void Crouch();\n\n    private:\n    float Health; float Stamina;\n};", "good_code": "UCLASS(config = Game)\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Character\")\n    void Jump();\n\n    UFUNCTION(BlueprintCallable, Category = \"Character\")\n    void Crouch();\n\nprivate:\n    float Health;\n    float Stamina;\n};"}
{"bad_code": "USTRUCT(BlueprintType)\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite, Category=\"Stats\")\n    int32 Strength, Agility, Intelligence;\n};", "good_code": "USTRUCT(BlueprintType)\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    int32 Strength;\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    int32 Agility;\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    int32 Intelligence;\n};"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\n    public:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    float MaxSpeed; float MinSpeed;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    float MaxSpeed;\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    float MinSpeed;\n};"}
{"bad_code": "UCLASS()\nclass AMyAIController : public AAIController\n{\n    GENERATED_BODY()\n\n    public:\n    bool IsEnemyVisible() { return bEnemyVisible; }\n    private:\n    bool bEnemyVisible;\n};", "good_code": "UCLASS()\nclass AMyAIController : public AAIController\n{\n    GENERATED_BODY()\n\npublic:\n    bool IsEnemyVisible()\n    {\n        return bEnemyVisible;\n    }\n\nprivate:\n    bool bEnemyVisible;\n};"}
{"bad_code": "UPROPERTY(EditDefaultsOnly, Category=\"Setup\") float MaxHealth;\nUPROPERTY(EditDefaultsOnly, Category=\"Setup\") float CurrentHealth;\nUPROPERTY(EditDefaultsOnly, Category=\"Setup\") bool bIsAlive;", "good_code": "UPROPERTY(EditDefaultsOnly, Category = \"Setup\")\nfloat MaxHealth;\n\nUPROPERTY(EditDefaultsOnly, Category = \"Setup\")\nfloat CurrentHealth;\n\nUPROPERTY(EditDefaultsOnly, Category = \"Setup\")\nbool bIsAlive;"}
{"bad_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\npublic:\n    AMyGameMode() : Super() { Initialize(); }\n    void Initialize() { /* Initialization logic */ }\n};", "good_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\npublic:\n    AMyGameMode()\n        : Super()\n    {\n        Initialize();\n    }\n\n    void Initialize()\n    {\n        /* Initialization logic */\n    }\n};"}
{"bad_code": "UCLASS()\nclass UMyWidget : public UUserWidget\n{\n    GENERATED_BODY()\n\n    public:\n    virtual void NativeConstruct() override { Super::NativeConstruct(); SetupUI(); }\n    private:\n    void SetupUI() { /* UI setup logic */ }\n};", "good_code": "UCLASS()\nclass UMyWidget : public UUserWidget\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void NativeConstruct() override\n    {\n        Super::NativeConstruct();\n        SetupUI();\n    }\n\nprivate:\n    void SetupUI()\n    {\n        /* UI setup logic */\n    }\n};"}
{"bad_code": "UCLASS()\nclass AMyVehicle : public APawn\n{\n    GENERATED_BODY()\n\n    public:\n    void Accelerate(); void Brake();\n    private:\n    float Speed; float Acceleration;\n};", "good_code": "UCLASS()\nclass AMyVehicle : public APawn\n{\n    GENERATED_BODY()\n\npublic:\n    void Accelerate();\n\n    void Brake();\n\nprivate:\n    float Speed;\n\n    float Acceleration;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyGameMode.h\"\n\nclass MyActor : public AActor {\npublic:\n    MyActor() {\n        bIsVisible = true; if (bIsVisible) { SetActorHiddenInGame(false); }\n    }\nprivate:\n    bool bIsVisible;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyGameMode.h\"\n\nclass MyActor : public AActor\n{\npublic:\n    MyActor()\n    {\n        bIsVisible = true;\n        if (bIsVisible)\n        {\n            SetActorHiddenInGame(false);\n        }\n    }\n\nprivate:\n    bool bIsVisible;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter {\npublic:\n    void BeginPlay() override;\n\n    void Jump();\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    virtual void BeginPlay() override;\n\n    void Jump();\n};"}
{"bad_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats {\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite)\n    int32 Health, Stamina;\n};", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite)\n    int32 Health;\n\n    UPROPERTY(BlueprintReadWrite)\n    int32 Stamina;\n};"}
{"bad_code": "UCLASS()\nclass AEnemyAI: public AAIController {\npublic:\n    void OnPossess(APawn* InPawn)override {\n        Super::OnPossess(InPawn);\n    }\n};", "good_code": "UCLASS()\nclass AEnemyAI : public AAIController\n{\npublic:\n    virtual void OnPossess(APawn* InPawn) override\n    {\n        Super::OnPossess(InPawn);\n    }\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nint32 AmmoCount, MaxAmmo;", "good_code": "UPROPERTY(VisibleAnywhere)\nint32 AmmoCount;\n\nUPROPERTY(VisibleAnywhere)\nint32 MaxAmmo;"}
{"bad_code": "if(bGameOver) EndGame();\nelse RestartLevel();", "good_code": "if (bGameOver)\n{\n    EndGame();\n}\nelse\n{\n    RestartLevel();\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){ DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "void AMyActor::Tick(float DeltaTime){ Super::Tick(DeltaTime); if(bIsActive) UpdateActor(); }", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bIsActive)\n    {\n        UpdateActor();\n    }\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    void InitializeComponent() override;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    virtual void InitializeComponent() override;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) float Speed; float Acceleration;", "good_code": "UPROPERTY(EditAnywhere)\nfloat Speed;\n\nUPROPERTY(EditAnywhere)\nfloat Acceleration;"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic: AMyActor() { Initialize(); }\nprivate: int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprivate:\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n{\n    Initialize();\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n#include \"Engine/World.h\"\nclass AMyActor : public AActor {\npublic: AMyActor() {}\n\nvoid BeginPlay() override { Super::BeginPlay(); }\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter {\npublic: void MoveToLocation(const FVector& Location) { if(bCanMove) { CurrentLocation = Location; }}\nprivate: FVector CurrentLocation; bool bCanMove;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void MoveToLocation(const FVector& Location);\n\nprivate:\n    FVector CurrentLocation;\n    bool bCanMove;\n};\n\nvoid AMyCharacter::MoveToLocation(const FVector& Location)\n{\n    if (bCanMove)\n    {\n        CurrentLocation = Location;\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) float Health; UPROPERTY() float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat Health;\n\nUPROPERTY(Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "UCLASS() class AMyGameMode : public AGameModeBase {\npublic: AMyGameMode() { StartMatch(); }\nprivate: void StartMatch() { }\n};", "good_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode();\n\nprivate:\n    void StartMatch();\n};\n\nAMyGameMode::AMyGameMode()\n{\n    StartMatch();\n}\n\nvoid AMyGameMode::StartMatch()\n{\n}"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) { Super::Tick(DeltaTime); if(bIsRunning) { Run(); }}\nvoid AMyActor::Run() {}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bIsRunning)\n    {\n        Run();\n    }\n}\n\nvoid AMyActor::Run()\n{\n}"}
{"bad_code": "UCLASS() class AMyComponent : public UActorComponent {\npublic: void Initialize(); bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\npublic:\n    void Initialize();\n\n    bool bIsActive;\n};"}
{"bad_code": "USTRUCT() struct FPlayerData {\nint32 Health, Stamina;\n};", "good_code": "USTRUCT()\nstruct FPlayerData\n{\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "void AMyActor::Shoot() { if(Ammo > 0) Fire(); Reload(); }", "good_code": "void AMyActor::Shoot()\n{\n    if (Ammo > 0)\n    {\n        Fire();\n    }\n\n    Reload();\n}"}
{"bad_code": "UCLASS() class AMyPawn : public APawn {\npublic: AMyPawn() { SetupPlayerInputComponent(); }\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\nprivate:\n    void SetupPlayerInputComponent();\n};\n\nAMyPawn::AMyPawn()\n{\n    SetupPlayerInputComponent();\n}\n\nvoid AMyPawn::SetupPlayerInputComponent()\n{\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyHeader.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor(){}\n    void BeginPlay() override;\n    void Activate(); protected:void ResetState();\nprivate: int32 Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyHeader.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "USTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n    UPROPERTY(BlueprintReadWrite, Category=\"Stats\") float Health, Mana; int32 Level;\n};", "good_code": "USTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    float Health;\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    float Mana;\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    int32 Level;\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nbool IsVisible; float Speed;", "good_code": "UPROPERTY(VisibleAnywhere)\nbool bIsVisible;\n\nUPROPERTY(VisibleAnywhere)\nfloat Speed;"}
{"bad_code": "void AMyCharacter::MoveToTarget()\n{\n    if(Target) SetActorLocation(Target->GetActorLocation())\n}", "good_code": "void AMyCharacter::MoveToTarget()\n{\n    if (Target)\n    {\n        SetActorLocation(Target->GetActorLocation());\n    }\n}"}
{"bad_code": "int32 A = 10, B=20; int32 Result=A+B;", "good_code": "int32 A = 10;\nint32 B = 20;\nint32 Result = A + B;"}
{"bad_code": "class UMyComponent : public UActorComponent\n{\n    public:\n    UMyComponent(){}\n    void InitializeComponent() override;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    virtual void InitializeComponent() override;\n};"}
{"bad_code": "void Calculate() \n{\n    int32 x=5,y=10;int32 result=x+y;\n}", "good_code": "void Calculate()\n{\n    int32 x = 5;\n    int32 y = 10;\n    int32 result = x + y;\n}"}
{"bad_code": "bool CheckCondition() \n{ if(bConditionMet)return true;else return false;}", "good_code": "bool CheckCondition()\n{\n    if (bConditionMet)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"}
{"bad_code": "void MyFunction(){for(int32 i=0;i<10;++i){DoSomething();}}", "good_code": "void MyFunction()\n{\n    for (int32 i = 0; i < 10; ++i)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "void ProcessData(){int32 Data=0;Data++;Process(Data);}", "good_code": "void ProcessData()\n{\n    int32 Data = 0;\n    Data++;\n    Process(Data);\n}"}
{"bad_code": "#include \"Engine.h\"\n#include \"MyProject/MyCharacter.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() {}\n\n    void BeginPlay() override {}\n\n    void DoSomething() {}\n\nprotected:\n    void HelperFunction() {}\n\nprivate:\n    int Health;\n    bool bIsDead;\n};", "good_code": "#include \"Engine.h\"\n#include \"Components/StaticMeshComponent.h\"\n\n#include \"MyProject/MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void DoSomething();\n\nprotected:\n    void HelperFunction();\n\nprivate:\n    int32 Health;\n    bool bIsDead;\n};"}
{"bad_code": "USTRUCT() struct FPlayerStats {\n    int32 Level, Health, Armor;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Level;\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Score;\nUPROPERTY() float TimeElapsed;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Score;\n\nUPROPERTY()\nfloat TimeElapsed;"}
{"bad_code": "void CheckCondition() { if(bIsReady){ Execute(); }}", "good_code": "void CheckCondition()\n{\n    if (bIsReady)\n    {\n        Execute();\n    }\n}"}
{"bad_code": "bool bIsActive=true; float Speed=0.0f;", "good_code": "bool bIsActive = true;\n\nfloat Speed = 0.0f;"}
{"bad_code": "class UMyComponent : public UActorComponent\n{\n    UFUNCTION(BlueprintCallable) void MyFunction(){}\n};", "good_code": "class UMyComponent : public UActorComponent\n{\n    UFUNCTION(BlueprintCallable)\n    void MyFunction();\n};"}
{"bad_code": "int32 CalculateSum(int32 A,int32 B){return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS(Blueprintable) class AMyActor:public AActor {\n    public:\n    UPROPERTY(EditAnywhere,BlueprintReadWrite) int32 Health;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS(Blueprintable)\nclass AMyActor : public AActor\n{\npublic:\n    UPROPERTY(BlueprintReadWrite, EditAnywhere)\n    int32 Health;\n};"}
{"bad_code": "while(IterationCount<MaxIterations){ Process(); IterationCount++; }", "good_code": "while (IterationCount < MaxIterations)\n{\n    Process();\n    IterationCount++;\n}"}
{"bad_code": "bool bIsEnabled;int32 Count;", "good_code": "bool bIsEnabled;\n\nint32 Count;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    public:\n    AMyActor()\n    { \n        Health = 100; \n        bIsActive = true; \n    }\nprivate:\n    int32 Health; bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGame/MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n        Health = 100;\n        bIsActive = true;\n    }\n\nprivate:\n    int32 Health;\n    bool bIsActive;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    public:\n    void ToggleVisibility() { if (bIsVisible){ SetActorHiddenInGame(false); } }\nprivate:\n    bool bIsVisible;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void ToggleVisibility()\n    {\n        if (bIsVisible)\n        {\n            SetActorHiddenInGame(false);\n        }\n    }\n\nprivate:\n    bool bIsVisible;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth, CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat CurrentHealth;"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    public:\n    virtual void BeginPlay() override;\n    AMyCharacter();\n\nprotected:\n    void Jump();\n    void Run();\n\n    private:\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void Jump();\n    void Run();\n\nprivate:\n    float Speed;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    public:\n    void MoveActor(); void RotateActor();\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void MoveActor();\n\n    void RotateActor();\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    public:\n    void InitializeActor() { int32 InitValue=0; InitValue++; }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void InitializeActor()\n    {\n        int32 InitValue = 0;\n        InitValue++;\n    }\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    public:\n    void SetActive(bool IsActive) { bIsActive = IsActive; }\nprivate:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void SetActive(bool IsActive)\n    {\n        bIsActive = IsActive;\n    }\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    public:\n    void UpdateHealth(int32 NewHealth) { Health = NewHealth; }\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void UpdateHealth(int32 NewHealth)\n    {\n        Health = NewHealth;\n    }\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    public:\n    void CalculateScore(int32 Points) { Score += Points; }\nprivate:\n    int32 Score;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void CalculateScore(int32 Points)\n    {\n        Score += Points;\n    }\n\nprivate:\n    int32 Score;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    public:\n    void SetName(FString Name) { ActorName = Name; }\nprivate:\n    FString ActorName;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void SetName(FString Name)\n    {\n        ActorName = Name;\n    }\n\nprivate:\n    FString ActorName;\n};"}
{"bad_code": "UCLASS()\nclass AEnemy : public ACharacter {\npublic:\n    void Attack() {\n        if(Distance < 100) AttackTarget();\n    }\n    void AttackTarget() {}\nprotected:\nint32 Health, Armor;\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    void Attack()\n    {\n        if (Distance < 100)\n        {\n            AttackTarget();\n        }\n    }\n\n    void AttackTarget()\n    {\n    }\n\nprotected:\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "#include \"MyGame.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor();\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n};"}
{"bad_code": "UPROPERTY(Category=\"Health\", BlueprintReadOnly)\nfloat MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "int32 Health=100;\nint32 Damage=10;\nint32 Result=Health-Damage;", "good_code": "int32 Health = 100;\nint32 Damage = 10;\nint32 Result = Health - Damage;"}
{"bad_code": "UCLASS()\nclass AMyPawn : public APawn {\nprivate:\nbool bIsVisible;\nvoid SetVisibility(bool bVisible) { bIsVisible = bVisible; }\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\nprivate:\n    bool bIsVisible;\n\n    void SetVisibility(bool bVisible)\n    {\n        bIsVisible = bVisible;\n    }\n};"}
{"bad_code": "void MoveForward(float Value) {\n    if(Value != 0.f) AddMovementInput(GetActorForwardVector(), Value);\n}", "good_code": "void MoveForward(float Value)\n{\n    if (Value != 0.f)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\nAMyCharacter();\nvirtual void BeginPlay() override;\nvoid Jump();\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Jump();\n};"}
{"bad_code": "UPROPERTY()\nint32 Speed, Strength;", "good_code": "UPROPERTY()\nint32 Speed;\n\nUPROPERTY()\nint32 Strength;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) {\n    Super::Tick(DeltaTime); PerformAction();\n}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    PerformAction();\n}"}
{"bad_code": "UENUM(BlueprintType)\nenum class EWeaponType : uint8 { Sword, Bow, Staff };", "good_code": "UENUM(BlueprintType)\nenum class EWeaponType : uint8\n{\n    Sword,\n    Bow,\n    Staff\n};"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    virtual void BeginPlay() override {}\n\n    void Activate() {}\n\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY()\n    int32 MaxHealth; int32 CurrentHealth;", "good_code": "UPROPERTY()\nint32 MaxHealth;\n\nUPROPERTY()\nint32 CurrentHealth;"}
{"bad_code": "if (bIsRunning) SetSpeed(600.0f);\nelse SetSpeed(300.0f);", "good_code": "if (bIsRunning)\n{\n    SetSpeed(600.0f);\n}\nelse\n{\n    SetSpeed(300.0f);\n}"}
{"bad_code": "#include \"Engine/Engine.h\"\n#include \"MyProjectCharacter.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProjectCharacter.h\""}
{"bad_code": "UPROPERTY()\nbool bIsActive; UPROPERTY() float Health;", "good_code": "UPROPERTY()\nbool bIsActive;\n\nUPROPERTY()\nfloat Health;"}
{"bad_code": "for (int32 i = 0; i < 10; i++) { DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "void CalculateValues(int32 A,int32 B){int32 Result=A+B;}", "good_code": "void CalculateValues(int32 A, int32 B)\n{\n    int32 Result = A + B;\n}"}
{"bad_code": "int32 Speed,Acceleration;\nSpeed = 600;Acceleration = 10;", "good_code": "int32 Speed;\nint32 Acceleration;\n\nSpeed = 600;\nAcceleration = 10;"}
{"bad_code": "UENUM()enum class EMovementType { Walk, Run, Jump };", "good_code": "UENUM()\nenum class EMovementType\n{\n    Walk,\n    Run,\n    Jump\n};"}
{"bad_code": "void UpdateHealth() { if (Health < 0) Health = 0; }", "good_code": "void UpdateHealth()\n{\n    if (Health < 0)\n    {\n        Health = 0;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic: AMyActor() { Init(); }; virtual void BeginPlay() override { Super::BeginPlay(); };\n\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\") float MaxHealth;\n\nprivate: void Init() { MaxHealth = 100.0f; };\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    void Init();\n\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\")\n    float MaxHealth;\n};\n\nAMyActor::AMyActor()\n{\n    Init();\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyActor::Init()\n{\n    MaxHealth = 100.0f;\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\nAMyActor();\n\nvoid Activate(){if (bIsActive) ResetState();};\n\nprivate: \nbool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprivate:\n    void ResetState();\n\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Activate()\n{\n    if (bIsActive)\n    {\n        ResetState();\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = Gameplay) int32 Score, Lives;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = Gameplay)\nint32 Score;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = Gameplay)\nint32 Lives;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) {\n    Super::Tick(DeltaTime); \n    Move();};", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    Move();\n}"}
{"bad_code": "USTRUCT() struct FMyStruct {\n    GENERATED_BODY() int32 Data1; float Data2;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    int32 Data1;\n\n    float Data2;\n};"}
{"bad_code": "UENUM(BlueprintType) enum class EMyEnum : uint8 { Option1, Option2, Option3 };", "good_code": "UENUM(BlueprintType)\nenum class EMyEnum : uint8\n{\n    Option1,\n    Option2,\n    Option3\n};"}
{"bad_code": "void Calc(int a, int b) {int sum=a+b; int diff=a-b; int prod=a*b;}", "good_code": "void Calc(int a, int b)\n{\n    int sum = a + b;\n\n    int diff = a - b;\n\n    int prod = a * b;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, VisibleAnywhere, Category = \"Status\") bool bIsAlive; float Health; ", "good_code": "UPROPERTY(BlueprintReadWrite, VisibleAnywhere, Category = \"Status\")\nbool bIsAlive;\n\nUPROPERTY(BlueprintReadWrite, VisibleAnywhere, Category = \"Status\")\nfloat Health;"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter { public: AMyCharacter(); void Jump();\nprotected: void Land();\nprivate: float JumpHeight; };", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Jump();\n\nprotected:\n    void Land();\n\nprivate:\n    float JumpHeight;\n};"}
{"bad_code": "bool CheckCondition(int value){return (value > 10) && (value < 20);}", "good_code": "bool CheckCondition(int value)\n{\n    return (value > 10) && (value < 20);\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter();\n    void MoveToLocation(FVector NewLocation);\n\nprivate:\n    float Health;\n    int32 Score;\n}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void MoveToLocation(FVector NewLocation);\n\nprivate:\n    float Health;\n    int32 Score;\n};"}
{"bad_code": "UCLASS()\nclass ASimpleActor : public AActor {\npublic:\n    ASimpleActor() {}\n\n    void SetActive(bool Active) {\n        bIsActive = Active; if(bIsActive) { Activate(); } else { Deactivate(); }\n    }\n\nprivate:\n    bool bIsActive;\n}", "good_code": "UCLASS()\nclass ASimpleActor : public AActor\n{\npublic:\n    ASimpleActor() \n    {\n    }\n\n    void SetActive(bool Active)\n    {\n        bIsActive = Active;\n        if (bIsActive)\n        {\n            Activate();\n        }\n        else\n        {\n            Deactivate();\n        }\n    }\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats {\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\")\n    float Health; float Stamina;\n}", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")\n    float Health;\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")\n    float Stamina;\n};"}
{"bad_code": "UCLASS()\nclass AEnemy : public AActor {\nprivate:\n    void Attack(); void Retreat();\n\nprotected:\n    int32 Damage; int32 Speed;\n}", "good_code": "UCLASS()\nclass AEnemy : public AActor\n{\nprotected:\n    int32 Damage;\n    int32 Speed;\n\nprivate:\n    void Attack();\n\n    void Retreat();\n};"}
{"bad_code": "UCLASS()\nclass AMovingPlatform : public AActor {\npublic:\n    virtual void BeginPlay() override; void Tick(float DeltaTime) override;\n}", "good_code": "UCLASS()\nclass AMovingPlatform : public AActor\n{\npublic:\n    virtual void BeginPlay() override;\n\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    bool IsActive() { return bIsEnabled; }\n\nprivate:\n    bool bIsEnabled;\n}", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    bool IsActive()\n    {\n        return bIsEnabled;\n    }\n\nprivate:\n    bool bIsEnabled;\n};"}
{"bad_code": "UCLASS()\nclass ACollectible : public AActor {\npublic:\n    void Collect() { Score += 10; }\n\nprivate:\n    int32 Score;\n}", "good_code": "UCLASS()\nclass ACollectible : public AActor\n{\npublic:\n    void Collect()\n    {\n        Score += 10;\n    }\n\nprivate:\n    int32 Score;\n};"}
{"bad_code": "UCLASS()\nclass AMyHUD : public AHUD {\npublic:\n    void DrawHUD() override {\n        Super::DrawHUD(); DrawText(\"Hello\", FLinearColor::White, 50, 50);\n    }\n}", "good_code": "UCLASS()\nclass AMyHUD : public AHUD\n{\npublic:\n    void DrawHUD() override\n    {\n        Super::DrawHUD();\n        DrawText(\"Hello\", FLinearColor::White, 50, 50);\n    }\n};"}
{"bad_code": "UCLASS()\nclass AGameModeBase : public AGameMode {\npublic:\n    AGameModeBase() {}\n\nprotected:\n    void StartPlay() override { Super::StartPlay(); }\n}", "good_code": "UCLASS()\nclass AGameModeBase : public AGameMode\n{\npublic:\n    AGameModeBase()\n    {\n    }\n\nprotected:\n    void StartPlay() override\n    {\n        Super::StartPlay();\n    }\n};"}
{"bad_code": "UCLASS()\nclass APlayerCharacter : public ACharacter {\npublic:\n    APlayerCharacter() : Health(100), Stamina(100) {}\n\nprivate:\n    float Health, Stamina;\n}", "good_code": "UCLASS()\nclass APlayerCharacter : public ACharacter\n{\npublic:\n    APlayerCharacter()\n        : Health(100)\n        , Stamina(100)\n    {\n    }\n\nprivate:\n    float Health;\n    float Stamina;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyGame.h\"\n#include \"Kismet/GameplayStatics.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{public:\n    AMyActor()\n{ }\n    void BeginPlay() override; void Activate(); private: int32 Health;\n    bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Kismet/GameplayStatics.h\"\n\n#include \"MyActor.h\"\n#include \"MyGame.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 Health;\n    bool bIsActive;\n};"}
{"bad_code": "void SomeFunction() {if (SomeCondition) {DoSomething();} else {DoSomethingElse();}}", "good_code": "void SomeFunction()\n{\n    if (SomeCondition)\n    {\n        DoSomething();\n    }\n    else\n    {\n        DoSomethingElse();\n    }\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Score, Lives;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Score;\n\nUPROPERTY(EditAnywhere)\nint32 Lives;"}
{"bad_code": "if(bIsValid){DoAction();}else{UndoAction();}", "good_code": "if (bIsValid)\n{\n    DoAction();\n}\nelse\n{\n    UndoAction();\n}"}
{"bad_code": "AMyActor::AMyActor() {}\nvoid AMyActor::BeginPlay() {}\nint32 Add(int32 A,int32 B){return A+B;}", "good_code": "AMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n}\n\nint32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable)\nvoid Jump() { JumpHeight = 300; }", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump()\n{\n    JumpHeight = 300;\n}"}
{"bad_code": "bool bIsRunning = true; int32 Speed = 500;", "good_code": "bool bIsRunning = true;\n\nint32 Speed = 500;"}
{"bad_code": "UENUM()enum class EMyEnum{Option1, Option2};", "good_code": "UENUM()\nenum class EMyEnum\n{\n    Option1,\n    Option2\n};"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere, BlueprintReadOnly) float MaxHealth = 100.0f;", "good_code": "UPROPERTY(BlueprintReadOnly, VisibleAnywhere)\nfloat MaxHealth = 100.0f;"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/Engine.h\"\n#include \"MyProject/MyComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    AMyActor() {}\n\n    void BeginPlay() override\n    {\n        Super::BeginPlay();\n    }\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/Engine.h\"\n\n#include \"MyProject/MyComponent.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "UCLASS()\nclass ACharacter\n{\n    UPROPERTY(BlueprintReadWrite) int32 Health, Armor;\n};", "good_code": "UCLASS()\nclass ACharacter\n{\npublic:\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    int32 Health;\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    int32 Armor;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    void Tick(float DeltaTime)\n    {\n        if (bCanMove) Move();\n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    void Move();\n\n    bool bCanMove;\n};\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    if (bCanMove)\n    {\n        Move();\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    void DoSomething() \n    { \n        int32 x=5,y=10,z;\n        z=x+y;\n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void DoSomething();\n\nprivate:\n    int32 m_X;\n    int32 m_Y;\n    int32 m_Z;\n};\n\nvoid AMyActor::DoSomething()\n{\n    int32 x = 5;\n    int32 y = 10;\n    int32 z;\n    z = x + y;\n}"}
{"bad_code": "class AMyClass\n{\n    UFUNCTION(BlueprintCallable)\n    void DoAction() {}\n};", "good_code": "UCLASS()\nclass AMyClass\n{\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Action\")\n    void DoAction();\n};\n\nvoid AMyClass::DoAction()\n{\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    void BeginPlay()\n    {\n        Super::BeginPlay();\n\n        Initialize();\n    }\n\n    void Initialize() {}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    virtual void BeginPlay() override;\n\nprivate:\n    void Initialize();\n};\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    Initialize();\n}\n\nvoid AMyActor::Initialize()\n{\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    public: AMyCharacter() : bIsAlive(true) {}\n    void Die() { bIsAlive = false; }\n    bool bIsAlive;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Die();\n\nprivate:\n    bool bIsAlive;\n};\n\nAMyCharacter::AMyCharacter()\n    : bIsAlive(true)\n{\n}\n\nvoid AMyCharacter::Die()\n{\n    bIsAlive = false;\n}"}
{"bad_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    void StartPlay()\n    {\n        Super::StartPlay(); if (bIsGameOver) EndGame();\n    }\n};", "good_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    virtual void StartPlay() override;\n\nprivate:\n    void EndGame();\n\n    bool bIsGameOver;\n};\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n\n    if (bIsGameOver)\n    {\n        EndGame();\n    }\n}\n\nvoid AMyGameMode::EndGame()\n{\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    void HandleEvent() { int32 a=1; int32 b=2; int32 c = a+b; }\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void HandleEvent();\n\nprivate:\n    int32 m_A;\n    int32 m_B;\n    int32 m_C;\n};\n\nvoid UMyComponent::HandleEvent()\n{\n    int32 a = 1;\n    int32 b = 2;\n    int32 c = a + b;\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    AMyActor() : Health(100) {}\n    void TakeDamage(int32 Damage)\n    {\n        Health -= Damage;\n    }\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void TakeDamage(int32 Damage);\n\nprivate:\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n    : Health(100)\n{\n}\n\nvoid AMyActor::TakeDamage(int32 Damage)\n{\n    Health -= Damage;\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic:\n\tAMyActor() {}\n\n\tvoid Activate() { }\n\nprotected:\n\tvoid ResetState() {}\n\t\nprivate:\n\tint32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY()\nint32 Value1, Value2;", "good_code": "UPROPERTY()\nint32 Value1;\n\nUPROPERTY()\nint32 Value2;"}
{"bad_code": "int32 Calculate(int32 a,int32 b){return a+b;}", "good_code": "int32 Calculate(int32 a, int32 b)\n{\n    return a + b;\n}"}
{"bad_code": "#include \"MyProject.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject.h\""}
{"bad_code": "if (bIsActive) SetActive(true);", "good_code": "if (bIsActive)\n{\n    SetActive(true);\n}"}
{"bad_code": "int32 Num=10;int32 Total=20;", "good_code": "int32 Num = 10;\nint32 Total = 20;"}
{"bad_code": "UENUM(BlueprintType)\nenum class EPlayerState:uint8 {Idle,Running,Jumping};", "good_code": "UENUM(BlueprintType)\nenum class EPlayerState : uint8\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "void Compute()\n{\n    int32 Result=0;Result=5*3;\n}", "good_code": "void Compute()\n{\n    int32 Result = 0;\n\n    Result = 5 * 3;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable)\nvoid Reset();void Pause();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Reset();\n\nUFUNCTION(BlueprintCallable)\nvoid Pause();"}
{"bad_code": "bool IsVisible() { return bVisible; }", "good_code": "bool IsVisible()\n{\n    return bVisible;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n#include \"MyProject/MyComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor{\npublic:\n    AMyActor() {}\n\n    void Activate(){}\n\n    protected:\n    void ResetState(){}\n\n    private:\n    int Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n#include \"MyProject/MyComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter\n{\npublic:\n    AMyCharacter(){}\n    virtual void BeginPlay() override{}\n    void Jump(); void Crouch();\nprotected:\n    void Reset();\nprivate:\n    bool bIsDead; int Health;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Jump();\n\n    void Crouch();\n\nprotected:\n    void Reset();\n\nprivate:\n    bool bIsDead;\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Attributes\") float Health;\nUPROPERTY(EditAnywhere, Category=\"Attributes\") int32 MaxHealth;\nUFUNCTION(BlueprintCallable, Category=\"Actions\") void Heal();", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Attributes\")\nfloat Health;\n\nUPROPERTY(EditAnywhere, Category = \"Attributes\")\nint32 MaxHealth;\n\nUFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Heal();"}
{"bad_code": "UCLASS()\nclass AMyVehicle: public APawn\n{\npublic:\n    AMyVehicle(){}\n    void Drive(){}\n    void Stop(){}\n    void Refuel(){}\nprivate:\n    float FuelLevel;\n};", "good_code": "UCLASS()\nclass AMyVehicle : public APawn\n{\npublic:\n    AMyVehicle();\n\n    void Drive();\n\n    void Stop();\n\n    void Refuel();\n\nprivate:\n    float FuelLevel;\n};"}
{"bad_code": "bool bCanRun; bool bIsRunning;\nint32 Speed, MaxSpeed;\nvoid Start(){ if(bCanRun) bIsRunning = true; }", "good_code": "bool bCanRun;\nbool bIsRunning;\n\nint32 Speed;\nint32 MaxSpeed;\n\nvoid Start()\n{\n    if (bCanRun)\n    {\n        bIsRunning = true;\n    }\n}"}
{"bad_code": "void CalculateDamage(int32 DamageAmount, int32& OutHealth){ OutHealth -= DamageAmount; }\nbool IsAlive(){return Health > 0;}\nint Health;", "good_code": "void CalculateDamage(int32 DamageAmount, int32& OutHealth)\n{\n    OutHealth -= DamageAmount;\n}\n\nbool IsAlive()\n{\n    return Health > 0;\n}\n\nint32 Health;"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyProject/MyActor.h\"\n\nbool bIsVisible;\nif(bIsVisible){ SetActorHiddenInGame(false); }", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"MyProject/MyActor.h\"\n\nbool bIsVisible;\n\nif (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats{\n    GENERATED_BODY()\n    int32 Health;\n    int32 Stamina;\n    void Reset(){ Health = 100; Stamina = 100; }\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Health;\n    int32 Stamina;\n\n    void Reset()\n    {\n        Health = 100;\n        Stamina = 100;\n    }\n};"}
{"bad_code": "class UMyComponent: public UActorComponent\n{\n    GENERATED_BODY()\n    void Initialize(){}\n    UPROPERTY(EditAnywhere) int32 ComponentID;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    void Initialize();\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    int32 ComponentID;\n};"}
{"bad_code": "int32 Add(int32 A,int32 B){return A+B;}\nint32 Multiply(int32 A,int32 B){return A*B;}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}\n\nint32 Multiply(int32 A, int32 B)\n{\n    return A * B;\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    virtual void BeginPlay() override {};\n\n    void Activate() {}\n\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY() int32 Health, Stamina;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Stamina;"}
{"bad_code": "if (bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats {\n    GENERATED_BODY() int32 Health; int32 Stamina;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Health;\n\n    int32 Stamina;\n};"}
{"bad_code": "#include \"MyProject.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyCustomComponent.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCustomComponent.h\"\n#include \"MyProject.h\""}
{"bad_code": "void Move(int32 x, int32 y) { x += 10; y += 10; }", "good_code": "void Move(int32 x, int32 y)\n{\n    x += 10;\n    y += 10;\n}"}
{"bad_code": "UPROPERTY()\nbool bIsActive; int32 Health;", "good_code": "UPROPERTY()\nbool bIsActive;\n\nUPROPERTY()\nint32 Health;"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "void CalculateResult(){int32 Result=A+B;}", "good_code": "void CalculateResult()\n{\n    int32 Result = A + B;\n}"}
{"bad_code": "UPROPERTY()\nfloat Speed;UPROPERTY() float Acceleration;", "good_code": "UPROPERTY()\nfloat Speed;\n\nUPROPERTY()\nfloat Acceleration;"}
{"bad_code": "#include \"Engine.h\"\n#include \"MyProjectCharacter.h\"\n#include \"GameFramework/Actor.h\"\n\nclass AMyActor: public AActor\n{\npublic:\n    AMyActor(){}\n    void BeginPlay() override;\n\n    void DoSomething(){int x=0; x++;}\n\nprivate:\n    int32 Health;\n};", "good_code": "#include \"Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProjectCharacter.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void DoSomething();\n\nprivate:\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n}\n\nvoid AMyActor::DoSomething()\n{\n    int x = 0;\n    x++;\n}"}
{"bad_code": "UCLASS()\nclass AAnotherActor : public AActor\n{\npublic:\n    void Tick(float DeltaTime) override{}\n    AAnotherActor(): Speed(600.f){}\nprivate:\n    float Speed, RotationSpeed;\n};", "good_code": "UCLASS()\nclass AAnotherActor : public AActor\n{\npublic:\n    AAnotherActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    float Speed;\n    float RotationSpeed;\n};\n\nAAnotherActor::AAnotherActor()\n    : Speed(600.f)\n{\n}\n\nvoid AAnotherActor::Tick(float DeltaTime)\n{\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Stats\") int32 Health, Armor;\n\nvoid DealDamage(int32 Damage){Health -= Damage;}", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Stats\")\nint32 Armor;\n\nvoid DealDamage(int32 Damage)\n{\n    Health -= Damage;\n}"}
{"bad_code": "UCLASS()\nclass AExampleActor : public AActor\n{\nprotected:\n    void Calculate(float A,float B){float Result=A+B;}\n};", "good_code": "UCLASS()\nclass AExampleActor : public AActor\n{\nprotected:\n    void Calculate(float A, float B)\n    {\n        float Result = A + B;\n    }\n};"}
{"bad_code": "bool bIsVisible; bool bIsActive;\n\nif(bIsVisible){SetActorHiddenInGame(false);}\nelse{SetActorHiddenInGame(true);}", "good_code": "bool bIsVisible;\nbool bIsActive;\n\nif (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "UPROPERTY()\nint32 MaxHealth, CurrentHealth;\n\nvoid Heal(int32 Amount){if(CurrentHealth<MaxHealth){CurrentHealth+=Amount;}}", "good_code": "UPROPERTY()\nint32 MaxHealth;\n\nUPROPERTY()\nint32 CurrentHealth;\n\nvoid Heal(int32 Amount)\n{\n    if (CurrentHealth < MaxHealth)\n    {\n        CurrentHealth += Amount;\n    }\n}"}
{"bad_code": "#include \"MyProjectCharacter.h\"\n#include \"Engine.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void Jump() override{}\n    AMyCharacter(): JumpHeight(200.f){}\nprivate:\n    float JumpHeight;\n};", "good_code": "#include \"Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProjectCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void Jump() override;\n\nprivate:\n    float JumpHeight;\n};\n\nAMyCharacter::AMyCharacter()\n    : JumpHeight(200.f)\n{\n}\n\nvoid AMyCharacter::Jump()\n{\n}"}
{"bad_code": "UPROPERTY()\nint32 Score, Lives;\n\nvoid LoseLife(){if(Lives>0)Lives--;}", "good_code": "UPROPERTY()\nint32 Score;\n\nUPROPERTY()\nint32 Lives;\n\nvoid LoseLife()\n{\n    if (Lives > 0)\n    {\n        Lives--;\n    }\n}"}
{"bad_code": "UCLASS()\nclass ASimpleActor : public AActor\n{\npublic:\n    void PerformAction(){int32 Value=10; Value*=2;}\n\nprivate:\n    int32 Data;\n};", "good_code": "UCLASS()\nclass ASimpleActor : public AActor\n{\npublic:\n    void PerformAction();\n\nprivate:\n    int32 Data;\n};\n\nvoid ASimpleActor::PerformAction()\n{\n    int32 Value = 10;\n    Value *= 2;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\") void Run();\nUFUNCTION(BlueprintPure, Category = \"Status\") bool IsRunning();\n\nbool bIsRunning;", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Run();\n\nUFUNCTION(BlueprintPure, Category = \"Status\")\nbool IsRunning();\n\nbool bIsRunning;"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() { }\n    void BeginPlay() override;\n    void Tick(float DeltaTime) override {}\nprivate:\n    void Reset() { }\n    int32 Health, Armor;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    void Reset();\n\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "USTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere)\n    int32 Strength; int32 Agility;\n};", "good_code": "USTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    int32 Strength;\n\n    UPROPERTY(EditAnywhere)\n    int32 Agility;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Speed;\nbool bIsRunning;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Speed;\n\nbool bIsRunning;"}
{"bad_code": "if (bIsRunning) DoSomething();\nelse DoSomethingElse();", "good_code": "if (bIsRunning)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "for (int32 i = 0; i < 10; ++i) { DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "void DoSomething() { int32 Result = 5*10; return; }", "good_code": "void DoSomething()\n{\n    int32 Result = 5 * 10;\n    return;\n}"}
{"bad_code": "UCLASS() class UMyComponent : public UActorComponent { public: UMyComponent(); void Activate(); };", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    void Activate();\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\") float MovementSpeed;\nUPROPERTY(BlueprintReadOnly, Category = \"Movement\") float JumpHeight;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat MovementSpeed;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat JumpHeight;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void StartGame(); void EndGame();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid StartGame();\n\nvoid EndGame();"}
{"bad_code": "void DoSomethingComplex() {\n    int32 x=10;\n    if(x>5) { x += 20; } else { x -= 5; }\n}", "good_code": "void DoSomethingComplex()\n{\n    int32 x = 10;\n\n    if (x > 5)\n    {\n        x += 20;\n    }\n    else\n    {\n        x -= 5;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() { Init(); }\n\n    void MoveToTarget() { /* Implementation */ }\n\n    virtual void BeginPlay() override;\n\nprivate:\n    float MovementSpeed; \n    int Health; \n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void MoveToTarget();\n\nprivate:\n    float MovementSpeed;\n    int Health;\n\n    void Init();\n};"}
{"bad_code": "UCLASS()\nclass AEnemy : public ACharacter {\npublic:\n    bool bIsAggressive; void SetAggressive(bool Aggressive) { bIsAggressive = Aggressive; }\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    bool bIsAggressive;\n\n    void SetAggressive(bool bAggressive)\n    {\n        bIsAggressive = bAggressive;\n    }\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"CoreMinimal.h\"\n#include \"MyGameMode.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyGameMode.h\""}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent { GENERATED_BODY() public: UMyComponent(); };", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n};"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats { GENERATED_BODY() int Health; int Mana; };", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int Health;\n    int Mana;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Stats\") int32 Health, Mana;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Stats\")\nint32 Mana;"}
{"bad_code": "void AMyActor::BeginPlay(){ Super::BeginPlay(); if (bIsVisible) SetActorHiddenInGame(false); }", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsVisible)\n    {\n        SetActorHiddenInGame(false);\n    }\n}"}
{"bad_code": "UCLASS()\nclass ANPC : public ACharacter {\npublic:\n    void Speak(); void Walk(); \nprotected: void Think();\n};", "good_code": "UCLASS()\nclass ANPC : public ACharacter\n{\npublic:\n    void Speak();\n\n    void Walk();\n\nprotected:\n    void Think();\n};"}
{"bad_code": "bool AMyActor::IsPlayerAlive() { return Health > 0; }", "good_code": "bool AMyActor::IsPlayerAlive()\n{\n    return Health > 0;\n}"}
{"bad_code": "UENUM()\nenum class EDifficulty { Easy, Medium, Hard };", "good_code": "UENUM()\nenum class EDifficulty\n{\n    Easy,\n    Medium,\n    Hard\n};"}
{"bad_code": "UCLASS() class AExampleActor : public AActor {\n    GENERATED_BODY()\npublic: AExampleActor() {}\n\n    virtual void Tick(float DeltaTime) override;\nprivate: int32 Health; int32 Stamina;\n};", "good_code": "UCLASS()\nclass AExampleActor : public AActor\n{\npublic:\n    AExampleActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMultiIncludeActor : public AActor\n{\npublic:\n    AMultiIncludeActor() {}\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMultiIncludeActor : public AActor\n{\npublic:\n    AMultiIncludeActor();\n};"}
{"bad_code": "UCLASS()\nclass ACharacterExample : public ACharacter {\npublic:\n    bool bIsRunning; float Stamina;\n\n    void Run() { if(bIsRunning){ Stamina -= 1.0f; } }\n};", "good_code": "UCLASS()\nclass ACharacterExample : public ACharacter\n{\npublic:\n    bool bIsRunning;\n    float Stamina;\n\n    void Run()\n    {\n        if (bIsRunning)\n        {\n            Stamina -= 1.0f;\n        }\n    }\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\") int32 Health, Stamina;\n\nvoid TakeDamage(int32 Damage) { Health -= Damage; }", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 Stamina;\n\nvoid TakeDamage(int32 Damage)\n{\n    Health -= Damage;\n}"}
{"bad_code": "UCLASS()\nclass AGameModeExample : public AGameModeBase {\n    GENERATED_BODY()\n\n    void StartPlay() override {}\n    void EndPlay(const EEndPlayReason::Type EndPlayReason) override {}\n};", "good_code": "UCLASS()\nclass AGameModeExample : public AGameModeBase\n{\n    GENERATED_BODY()\n\n    void StartPlay() override;\n\n    void EndPlay(const EEndPlayReason::Type EndPlayReason) override;\n};"}
{"bad_code": "UPROPERTY() int32 Score;\nUPROPERTY() bool bIsActive;\n\nvoid Reset() { Score = 0; bIsActive = false; }", "good_code": "UPROPERTY()\nint32 Score;\n\nUPROPERTY()\nbool bIsActive;\n\nvoid Reset()\n{\n    Score = 0;\n    bIsActive = false;\n}"}
{"bad_code": "USTRUCT(BlueprintType) struct FPlayerStats {\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere) int32 Health; UPROPERTY(EditAnywhere) int32 Stamina;\n};", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    int32 Health;\n\n    UPROPERTY(EditAnywhere)\n    int32 Stamina;\n};"}
{"bad_code": "UFUNCTION(BlueprintCallable) void StartGame() { /* Start game logic */ }\nUFUNCTION(BlueprintCallable) void EndGame() { /* End game logic */ }", "good_code": "UFUNCTION(BlueprintCallable)\nvoid StartGame()\n{\n    // Start game logic\n}\n\nUFUNCTION(BlueprintCallable)\nvoid EndGame()\n{\n    // End game logic\n}"}
{"bad_code": "class MyClass {\n    public: int32 Add(int32 A, int32 B){return A+B;}\n};", "good_code": "class MyClass\n{\npublic:\n    int32 Add(int32 A, int32 B)\n    {\n        return A + B;\n    }\n};"}
{"bad_code": "class AExample\n{\npublic:\n    bool IsValid(){return true;}\n};", "good_code": "class AExample\n{\npublic:\n    bool IsValid()\n    {\n        return true;\n    }\n};"}
{"bad_code": "UCLASS() class UMyComponent: public UActorComponent{\npublic:\n    UMyComponent() {bIsActive = true;}\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent()\n    {\n        bIsActive = true;\n    }\n\n    bool bIsActive;\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere, BlueprintReadOnly) float Health, Stamina;", "good_code": "UPROPERTY(BlueprintReadOnly, VisibleAnywhere)\nfloat Health;\n\nUPROPERTY(BlueprintReadOnly, VisibleAnywhere)\nfloat Stamina;"}
{"bad_code": "int32 CalculateSum(int32 A,int32 B) {return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Stats\") int32 Strength;\nUPROPERTY(Category=\"Stats\", BlueprintReadOnly) int32 Agility;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 Strength;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 Agility;"}
{"bad_code": "UFUNCTION() void DoSomething() { /* Implementation */ }", "good_code": "UFUNCTION()\nvoid DoSomething()\n{\n    // Implementation\n}"}
{"bad_code": "if(bIsReady) Start(); else Stop();", "good_code": "if (bIsReady)\n{\n    Start();\n}\nelse\n{\n    Stop();\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoWork();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoWork();\n}"}
{"bad_code": "bool bCanFly;\nint32 Speed;\nvoid Fly();", "good_code": "bool bCanFly;\n\nint32 Speed;\n\nvoid Fly();"}
{"bad_code": "#include \"CoreMinimal.h\"#include \"MyActor.h\"#include \"GameFramework/Actor.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "AMyActor::AMyActor() : Health(100), Stamina(100){}", "good_code": "AMyActor::AMyActor()\n    : Health(100)\n    , Stamina(100)\n{\n}"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyGame/MyActor.h\"\n#include \"GameFramework/Actor.h\"\n\nclass AMyActor : public AActor\n{public:\n    AMyActor() { Initialize(); }\n    void Activate() { }\n    void Initialize() {  }\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyGame/MyActor.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprivate:\n    void Initialize();\n};\n\nAMyActor::AMyActor()\n{\n    Initialize();\n}\n\nvoid AMyActor::Activate()\n{\n}\n\nvoid AMyActor::Initialize()\n{\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{UPROPERTY(BlueprintReadWrite) float Health; protected: virtual void BeginPlay() override; };", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprotected:\n    virtual void BeginPlay() override;\n\nprivate:\n    UPROPERTY(BlueprintReadWrite)\n    float Health;\n};"}
{"bad_code": "UCLASS() class ASimpleActor : public AActor\n{public: void Tick(float DeltaSeconds); };", "good_code": "UCLASS()\nclass ASimpleActor : public AActor\n{\npublic:\n    void Tick(float DeltaSeconds);\n};"}
{"bad_code": "USTRUCT() struct FPlayerInfo { UPROPERTY() int32 ID; int32 Score; };", "good_code": "USTRUCT()\nstruct FPlayerInfo\n{\n    UPROPERTY()\n    int32 ID;\n\n    int32 Score;\n};"}
{"bad_code": "UCLASS() class UMyComponent : public UActorComponent { public: void DoAction() { int32 LocalValue=10; }; };", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void DoAction();\n\nprivate:\n    int32 LocalValue;\n};\n\nvoid UMyComponent::DoAction()\n{\n    LocalValue = 10;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyGame/MyComponent.h\"\n#include \"Components/ActorComponent.h\"\n\nUCLASS() class UMyComponent : public UActorComponent { };", "good_code": "#include \"Components/ActorComponent.h\"\n#include \"CoreMinimal.h\"\n\n#include \"MyGame/MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n};"}
{"bad_code": "UCLASS() class AMyPawn : public APawn { public: AMyPawn(); FVector GetDirection(); private: FVector Direction; };", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\n    FVector GetDirection();\n\nprivate:\n    FVector Direction;\n};"}
{"bad_code": "class AMyVehicle : public AVehicle\n{private: int32 Speed;public: AMyVehicle(); void Drive(); };", "good_code": "class AMyVehicle : public AVehicle\n{\npublic:\n    AMyVehicle();\n\n    void Drive();\n\nprivate:\n    int32 Speed;\n};"}
{"bad_code": "UCLASS() class AMyWeapon : public AWeapon { public: void Fire(); private: bool bIsLoaded; };", "good_code": "UCLASS()\nclass AMyWeapon : public AWeapon\n{\npublic:\n    void Fire();\n\nprivate:\n    bool bIsLoaded;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGame/Enemy.h\"\n\nUCLASS() class AEnemy : public AActor { public: void Attack(); };", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"CoreMinimal.h\"\n\n#include \"MyGame/Enemy.h\"\n\nUCLASS()\nclass AEnemy : public AActor\n{\npublic:\n    void Attack();\n};"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\""}
{"bad_code": "UCLASS()\nclass AMyActor: public AActor{\npublic:\n    AMyActor();\n    \n    virtual void BeginPlay() override;\n    void Activate();\n    \nprotected:\n    void ResetState();\n    \nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    UPROPERTY(BlueprintReadWrite)\n    float Speed, JumpHeight;\n\n    AMyCharacter() {}\n\n    void Sprint()\n    {\n        Speed *= 2;\n    }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    UPROPERTY(BlueprintReadWrite)\n    float Speed;\n\n    UPROPERTY(BlueprintReadWrite)\n    float JumpHeight;\n\n    void Sprint();\n};\n\nAMyCharacter::AMyCharacter()\n{\n}\n\nvoid AMyCharacter::Sprint()\n{\n    Speed *= 2;\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\nprivate:\n    bool bIsActive; bool bIsRunning;\n    \npublic:\n    void ToggleActive() { bIsActive = !bIsActive; }\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void ToggleActive();\n\nprivate:\n    bool bIsActive;\n    bool bIsRunning;\n};\n\nvoid UMyComponent::ToggleActive()\n{\n    bIsActive = !bIsActive;\n}"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) \n{\n    Super::Tick(DeltaTime);\n    if(bIsVisible) SetActorHiddenInGame(false);\n    else SetActorHiddenInGame(true);\n}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bIsVisible)\n    {\n        SetActorHiddenInGame(false);\n    }\n    else\n    {\n        SetActorHiddenInGame(true);\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyPawn: public APawn\n{\npublic:\n    void SetupPlayerInput();\n    void MoveForward(float Value) { /* Implementation */ }\nprotected:\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    void SetupPlayerInput();\n\n    void MoveForward(float Value);\n\nprotected:\n    float Speed;\n};\n\nvoid AMyPawn::MoveForward(float Value)\n{\n    // Implementation\n}"}
{"bad_code": "UENUM()\nenum class ECharacterState\n{\n    Idle, Walking, Running\n};", "good_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Walking,\n    Running\n};"}
{"bad_code": "UPROPERTY()\nint32 Health, Armor;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Armor;"}
{"bad_code": "UCLASS()\nclass ANPC : public AActor\n{\npublic:\n    void SetAggressive(bool IsAggressive);\n    \nprivate:\n    bool Aggressive;\n};\n\nvoid ANPC::SetAggressive(bool IsAggressive) { Aggressive = IsAggressive; }", "good_code": "UCLASS()\nclass ANPC : public AActor\n{\npublic:\n    void SetAggressive(bool bIsAggressive);\n\nprivate:\n    bool bAggressive;\n};\n\nvoid ANPC::SetAggressive(bool bIsAggressive)\n{\n    bAggressive = bIsAggressive;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat MaxHealth;\n\nUFUNCTION(BlueprintCallable)\nvoid Heal(float Amount);", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat MaxHealth;\n\nUFUNCTION(BlueprintCallable)\nvoid Heal(float Amount);"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS() class MyActor : public AActor {\npublic:\n    MyActor() {\n        // Constructor implementation\n    }\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor()\n    {\n        // Constructor implementation\n    }\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\") float MaxHealth;\nUPROPERTY() int32 CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY()\nint32 CurrentHealth;"}
{"bad_code": "bool IsMoving() { return bMoving; }\nvoid SetMoving(bool moving){ bMoving = moving; }", "good_code": "bool IsMoving()\n{\n    return bMoving;\n}\n\nvoid SetMoving(bool bMoving)\n{\n    this->bMoving = bMoving;\n}"}
{"bad_code": "if (Health>0) { TakeDamage(); }", "good_code": "if (Health > 0)\n{\n    TakeDamage();\n}"}
{"bad_code": "for (int i=0; i<10; i++) DoSomething(i);", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething(i);\n}"}
{"bad_code": "#define MAX_HEALTH 100\n#define MIN_HEALTH 0", "good_code": "#define MAX_HEALTH 100\n\n#define MIN_HEALTH 0"}
{"bad_code": "protected: int32 Health;\npublic: void Heal(int32 amount) { Health += amount; }", "good_code": "public:\n    void Heal(int32 Amount)\n    {\n        Health += Amount;\n    }\n\nprotected:\n    int32 Health;"}
{"bad_code": "void MoveTo(int x, int y) { PositionX = x; PositionY = y; }", "good_code": "void MoveTo(int32 X, int32 Y)\n{\n    PositionX = X;\n    PositionY = Y;\n}"}
{"bad_code": "void CalculateScore(){ Score = Kills*10; }", "good_code": "void CalculateScore()\n{\n    Score = Kills * 10;\n}"}
{"bad_code": "void Jump(){ if(CanJump) { /* Jump logic */ } }", "good_code": "void Jump()\n{\n    if (bCanJump)\n    {\n        // Jump logic\n    }\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor();\n    void StartGame(); void EndGame();\nprivate:\n    int32 Health; bool bIsActive; \n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void StartGame();\n    void EndGame();\n\nprivate:\n    int32 Health;\n    bool bIsActive;\n};"}
{"bad_code": "#include \"MyCharacter.h\"\n\nvoid AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n{\n    PlayerInputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyCharacter::Jump); PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward);\n}\n\nvoid AMyCharacter::MoveForward(float Value){\n    if (Controller && Value != 0.0f) AddMovementInput(GetActorForwardVector(), Value);\n}", "good_code": "#include \"MyCharacter.h\"\n\nvoid AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n{\n    PlayerInputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyCharacter::Jump);\n    PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward);\n}\n\nvoid AMyCharacter::MoveForward(float Value)\n{\n    if (Controller && Value != 0.0f)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, Category = \"Character\") float Health, Speed;\n\nvoid AMyCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n    if (Health > 0) { bIsAlive = true; }\n}", "good_code": "UPROPERTY(EditAnywhere, Category = \"Character\")\nfloat Health;\n\nUPROPERTY(EditAnywhere, Category = \"Character\")\nfloat Speed;\n\nvoid AMyCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (Health > 0)\n    {\n        bIsAlive = true;\n    }\n}"}
{"bad_code": "#include \"MyComponent.h\"\n\nvoid UMyComponent::Start() { if (!bIsActive) { bIsActive = true; } }\n\nvoid UMyComponent::Stop() { bIsActive = false; }", "good_code": "#include \"MyComponent.h\"\n\nvoid UMyComponent::Start()\n{\n    if (!bIsActive)\n    {\n        bIsActive = true;\n    }\n}\n\nvoid UMyComponent::Stop()\n{\n    bIsActive = false;\n}"}
{"bad_code": "USTRUCT() struct FMyStruct { GENERATED_BODY() int32 ID; FString Name; };\n\nvoid AMyActor::Initialize()\n{\n    FMyStruct MyStruct; MyStruct.ID = 1; MyStruct.Name = \"Actor\";\n}", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    int32 ID;\n    FString Name;\n};\n\nvoid AMyActor::Initialize()\n{\n    FMyStruct MyStruct;\n    MyStruct.ID = 1;\n    MyStruct.Name = \"Actor\";\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category = \"Combat\") void Attack();\n\nvoid AMyCharacter::Attack() { if (CanAttack) { PerformAttack(); } }", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Combat\")\nvoid Attack();\n\nvoid AMyCharacter::Attack()\n{\n    if (CanAttack)\n    {\n        PerformAttack();\n    }\n}"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyGameMode.h\"\n#include \"GameFramework/PlayerController.h\"\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay(); GetWorld()->SpawnActor<AActor>(ActorToSpawn, SpawnLocation, SpawnRotation);\n}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGameMode.h\"\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n\n    GetWorld()->SpawnActor<AActor>(ActorToSpawn, SpawnLocation, SpawnRotation);\n}"}
{"bad_code": "#include \"MyHUD.h\"\n\nvoid AMyHUD::DrawHUD() { Super::DrawHUD(); DrawText(\"Score\", FColor::White, 50, 50); }", "good_code": "#include \"MyHUD.h\"\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n\n    DrawText(\"Score\", FColor::White, 50, 50);\n}"}
{"bad_code": "UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = \"Properties\") int32 Score;\n\nUFUNCTION(BlueprintPure, Category = \"Properties\") int32 GetScore() const { return Score; }", "good_code": "UPROPERTY(BlueprintReadWrite, EditDefaultsOnly, Category = \"Properties\")\nint32 Score;\n\nUFUNCTION(BlueprintPure, Category = \"Properties\")\nint32 GetScore() const\n{\n    return Score;\n}"}
{"bad_code": "UENUM() enum class ECharacterState { Idle, Running, Jumping };\n\nvoid AMyCharacter::UpdateState() { if (bIsRunning) { CurrentState = ECharacterState::Running; } }", "good_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Running,\n    Jumping\n};\n\nvoid AMyCharacter::UpdateState()\n{\n    if (bIsRunning)\n    {\n        CurrentState = ECharacterState::Running;\n    }\n}"}
{"bad_code": "#include \"MyGame.h\"\n#include \"MyActor.h\"\n#include \"Engine/World.h\"\n\nUCLASS() class AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n        Health=100;\n    }\n};", "good_code": "#include \"Engine/World.h\"\n\n#include \"MyGame.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n        Health = 100;\n    }\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere) int32 AmmoCount;\nUPROPERTY(BlueprintReadWrite, Category=\"Stats\") float Health;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nfloat Health;\n\nUPROPERTY(VisibleAnywhere)\nint32 AmmoCount;"}
{"bad_code": "void DoSomething(){ int32 A=5; int32 B=10; int32 Result=A+B; }", "good_code": "void DoSomething()\n{\n    int32 A = 5;\n    int32 B = 10;\n    int32 Result = A + B;\n}"}
{"bad_code": "bool bIsVisible = false; bool bIsAlive = true;", "good_code": "bool bIsVisible = false;\nbool bIsAlive = true;"}
{"bad_code": "UFUNCTION() void Start();\nvoid Stop() { }", "good_code": "UFUNCTION()\nvoid Start();\n\nvoid Stop()\n{\n}"}
{"bad_code": "if(bIsReady) { PerformAction(); }", "good_code": "if (bIsReady)\n{\n    PerformAction();\n}"}
{"bad_code": "UENUM() enum class EMyEnum\n{\n    OptionOne, OptionTwo, OptionThree\n};", "good_code": "UENUM()\nenum class EMyEnum\n{\n    OptionOne,\n    OptionTwo,\n    OptionThree\n};"}
{"bad_code": "int32 GetScore(){return Score;}", "good_code": "int32 GetScore()\n{\n    return Score;\n}"}
{"bad_code": "float CalculateSpeed() { return Distance/Time; }", "good_code": "float CalculateSpeed()\n{\n    return Distance / Time;\n}"}
{"bad_code": "int32 A=5,B=10;", "good_code": "int32 A = 5;\nint32 B = 10;"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{public:\n    AMyActor()\n    {\n    }\n\n    virtual void Tick(float DeltaTime) override; protected:\n    void Reset();\n\nprivate:\nint32 Health, MaxHealth;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprotected:\n    void Reset();\n\nprivate:\n    int32 Health;\n    int32 MaxHealth;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category=\"Movement\") float MaxSpeed;\n\n    AMyCharacter();\nprivate:\n    UFUNCTION() void MoveForward(float Value);\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Movement\")\n    float MaxSpeed;\n\nprivate:\n    UFUNCTION()\n    void MoveForward(float Value);\n};"}
{"bad_code": "void AMyActor::BeginPlay(){\n    Super::BeginPlay();\n    if(bIsActive) SetActive(true);\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsActive)\n    {\n        SetActive(true);\n    }\n}"}
{"bad_code": "bool AMyActor::IsVisible() const{return bVisible;}", "good_code": "bool AMyActor::IsVisible() const\n{\n    return bVisible;\n}"}
{"bad_code": "UPROPERTY(EditDefaultsOnly) int32 AmmoCount; UPROPERTY(EditDefaultsOnly) int32 MaxAmmo;", "good_code": "UPROPERTY(EditDefaultsOnly)\nint32 AmmoCount;\n\nUPROPERTY(EditDefaultsOnly)\nint32 MaxAmmo;"}
{"bad_code": "void AMyActor::SetHealth(int32 NewHealth)\n{Health = NewHealth;}", "good_code": "void AMyActor::SetHealth(int32 NewHealth)\n{\n    Health = NewHealth;\n}"}
{"bad_code": "AMyActor::AMyActor() : Health(100), bIsVisible(true)\n{\n}", "good_code": "AMyActor::AMyActor()\n    : Health(100)\n    , bIsVisible(true)\n{\n}"}
{"bad_code": "void AMyActor::ToggleVisibility(){bIsVisible = !bIsVisible;}", "good_code": "void AMyActor::ToggleVisibility()\n{\n    bIsVisible = !bIsVisible;\n}"}
{"bad_code": "for(int32 i=0;i<10;++i){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) bool bIsReady;UPROPERTY(EditAnywhere) bool bIsEnabled;", "good_code": "UPROPERTY(EditAnywhere)\nbool bIsReady;\n\nUPROPERTY(EditAnywhere)\nbool bIsEnabled;"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\npublic:\n\tAMyActor();\n\tvirtual void BeginPlay() override;\n\tvoid CustomFunction() {\n\t\tint32 VariableOne, VariableTwo;\n\t\tVariableOne=10;VariableTwo=20;VariableOne += VariableTwo;\n\t}\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void CustomFunction();\n\nprivate:\n    int32 VariableOne;\n    int32 VariableTwo;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"Components/ActorComponent.h\"\n#include \"MyComponent.generated.h\"\n\nUCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n\tGENERATED_BODY()\n\t\npublic:\t\n\tUMyComponent();\n\tvoid Initialize() { int32 X=0; if(X==0){ X=1; } }\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.generated.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    void Initialize();\n\nprivate:\n    int32 X;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n#include \"MyCharacter.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n\tGENERATED_BODY()\n\npublic:\n\tUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Camera)\n\tfloat Health;\n\tvoid Jump() { if(bCanJump) Super::Jump(); }\nprotected:\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Movement)\n\tbool bCanJump;\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Character.h\"\n\n#include \"MyCharacter.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter();\n\n    virtual void Jump() override;\n\n    UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = \"Camera\")\n    float Health;\n\nprotected:\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Movement\")\n    bool bCanJump;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\npublic:\n\tAMyActor();\n\tvoid DoSomething(); protected: void Reset(); private: int32 Counter;\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void DoSomething();\n\nprotected:\n    void Reset();\n\nprivate:\n    int32 Counter;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"Components/ActorComponent.h\"\n#include \"MyComponent.generated.h\"\n\nUCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n\tGENERATED_BODY()\n\npublic:\t\n\tUMyComponent();\n\tUPROPERTY(EditAnywhere, Category=Settings) int32 MaxCount; void UpdateCount() { MaxCount++; }\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.generated.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    UPROPERTY(EditAnywhere, Category = \"Settings\")\n    int32 MaxCount;\n\n    void UpdateCount();\n\nprivate:\n    void IncrementCount();\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n#include \"MyCharacter.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n\tGENERATED_BODY()\n\npublic:\n\tvoid MoveForward() { int32 Speed=10; if(Speed>0){ Speed++; } }\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Character.h\"\n\n#include \"MyCharacter.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    void MoveForward();\n\nprivate:\n    int32 Speed;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\npublic: AMyActor(){} void Tick(float DeltaTime) override; private: int32 Ticks;\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    int32 Ticks;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"Components/ActorComponent.h\"\n#include \"MyComponent.generated.h\"\n\nUCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n\tGENERATED_BODY()\n\npublic:\t\n\tUMyComponent();\n\tvoid Activate() { if(bIsActive) return; bIsActive=true; }\nprivate:\n\tbool bIsActive;\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.generated.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    void Activate();\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\npublic:\n\tvoid BeginPlay() override; void EndPlay() override; private: float DeltaTime;\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    virtual void BeginPlay() override;\n\n    virtual void EndPlay() override;\n\nprivate:\n    float DeltaTime;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n#include \"MyCharacter.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n\tGENERATED_BODY()\n\npublic:\n\tUPROPERTY(EditAnywhere, Category=Stats) float Health, Stamina;\n\tvoid Regenerate() { Health+=10; Stamina+=5; }\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Character.h\"\n\n#include \"MyCharacter.generated.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(EditAnywhere, Category = \"Stats\")\n    float Health;\n\n    UPROPERTY(EditAnywhere, Category = \"Stats\")\n    float Stamina;\n\n    void Regenerate();\n};"}
{"bad_code": "#include \"MyProject/MyActor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyProject/OtherDependency.h\"\n\nUCLASS() class AMyActor : public AActor\n{\npublic:\n    AMyActor() {}\n\n    virtual void BeginPlay() override { Super::BeginPlay(); }\n\n    void Tick(float DeltaTime) override\n    {\n        Super::Tick(DeltaTime);\n    }\n\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    float Health = 100.0f;\n    UFUNCTION()\n    void ResetHealth() { Health = 100.0f; }\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n#include \"MyProject/OtherDependency.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    float Health;\n\n    UFUNCTION()\n    void ResetHealth();\n};\n\nAMyActor::AMyActor()\n    : Health(100.0f)\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}\n\nvoid AMyActor::ResetHealth()\n{\n    Health = 100.0f;\n}"}
{"bad_code": "UCLASS() class AAnotherActor : public AActor {\npublic:\n    AAnotherActor();\n\n    void DoSomething()\n    { int32 x = 0; int32 y = 1; x = x + y; }\n};", "good_code": "UCLASS()\nclass AAnotherActor : public AActor\n{\npublic:\n    AAnotherActor();\n\n    void DoSomething();\n};\n\nAAnotherActor::AAnotherActor()\n{\n}\n\nvoid AAnotherActor::DoSomething()\n{\n    int32 x = 0;\n    int32 y = 1;\n    x = x + y;\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    UPROPERTY(EditAnywhere) float Stamina; UPROPERTY(EditAnywhere) int32 Energy;\n\n    void Jump() { /* implementation */ }\n    void Run() { /* implementation */ }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void Jump();\n    void Run();\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    float Stamina;\n\n    UPROPERTY(EditAnywhere)\n    int32 Energy;\n};\n\nvoid AMyCharacter::Jump()\n{\n    // implementation\n}\n\nvoid AMyCharacter::Run()\n{\n    // implementation\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=\"Stats\") int32 Health; UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=\"Stats\") int32 Armor;", "good_code": "UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = \"Stats\")\nint32 Armor;"}
{"bad_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/PlayerController.h\"\n#include \"MyProject/MyPlayerController.h\"\n\nUCLASS() class AMyPlayerController : public APlayerController\n{\n    virtual void SetupInputComponent() override\n    { Super::SetupInputComponent(); }\n};", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyProject/MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\npublic:\n    virtual void SetupInputComponent() override;\n};\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n}"}
{"bad_code": "UENUM() enum class ECharacterState : uint8 { Idle = 0, Running, Jumping };\n\nUSTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite) float Health;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite) float Stamina;\n};", "good_code": "UENUM()\nenum class ECharacterState : uint8\n{\n    Idle = 0,\n    Running,\n    Jumping\n};\n\nUSTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere)\n    float Health;\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere)\n    float Stamina;\n};"}
{"bad_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\n    void Start()\n    {\n        if (bIsActive) { return; }\n        ActivateComponent();\n    }\n\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\npublic:\n    void Start();\n\nprivate:\n    bool bIsActive;\n};\n\nvoid AMyComponent::Start()\n{\n    if (bIsActive)\n    {\n        return;\n    }\n\n    ActivateComponent();\n}"}
{"bad_code": "void ComputeValues()\n{\n    int32 A = 5, B = 10;\n    int32 Result = A+B;\n    if (Result>10) { Result = 0; }\n}", "good_code": "void ComputeValues()\n{\n    int32 A = 5;\n    int32 B = 10;\n    int32 Result = A + B;\n\n    if (Result > 10)\n    {\n        Result = 0;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyPawn : public APawn\n{\n    AMyPawn() : Speed(600.0f), bCanMove(true) {}\n\n    bool bCanMove;\n\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\nprivate:\n    bool bCanMove;\n\n    float Speed;\n};\n\nAMyPawn::AMyPawn()\n    : Speed(600.0f), bCanMove(true)\n{\n}"}
{"bad_code": "void ProcessInput(int32 Input)\n{\n    switch(Input) { case 0: DoSomething(); break; case 1: DoSomethingElse(); break; }\n}", "good_code": "void ProcessInput(int32 Input)\n{\n    switch (Input)\n    {\n        case 0:\n            DoSomething();\n            break;\n\n        case 1:\n            DoSomethingElse();\n            break;\n    }\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n    virtual void Tick(float DeltaTime) override;\n    void SetActive(bool bNewActive);\n\nprivate:\n    bool bIsActive;\n    void PrivateFunction()\n    {\n        // Implementation\n    }\n    int32 Health;\n    void AnotherPrivateFunction();\n};\nvoid AMyActor::Tick(float DeltaTime)\n{\n    // Implementation\n}", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\n    void SetActive(bool bNewActive);\n\nprivate:\n    void PrivateFunction();\n\n    void AnotherPrivateFunction();\n\n    bool bIsActive;\n\n    int32 Health;\n};\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    // Implementation\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n    int32 Health, Stamina, Armor;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Health;\n\n    int32 Stamina;\n\n    int32 Armor;\n};"}
{"bad_code": "UCLASS()\nclass UHealthComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Health\") float MaxHealth;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Health\") float CurrentHealth;\n};", "good_code": "UCLASS()\nclass UHealthComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadWrite, Category = \"Health\", EditAnywhere)\n    float MaxHealth;\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Health\", EditAnywhere)\n    float CurrentHealth;\n};"}
{"bad_code": "void AEnemy::Attack() \n{ if (bCanAttack) { DealDamage(); } else { ResetCooldown(); } }", "good_code": "void AEnemy::Attack()\n{\n    if (bCanAttack)\n    {\n        DealDamage();\n    }\n    else\n    {\n        ResetCooldown();\n    }\n}"}
{"bad_code": "bool bIsPlayerAlive=false; int32 PlayerScore=0;", "good_code": "bool bIsPlayerAlive = false;\n\nint32 PlayerScore = 0;"}
{"bad_code": "UENUM()\nenum class EWeaponType : uint8 { Melee, Ranged };", "good_code": "UENUM()\nenum class EWeaponType : uint8\n{\n    Melee,\n    Ranged\n};"}
{"bad_code": "void ACharacter::MoveToLocation(FVector Location) { SetActorLocation(Location); }", "good_code": "void ACharacter::MoveToLocation(FVector Location)\n{\n    SetActorLocation(Location);\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Movement\") float RunSpeed, WalkSpeed;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\", EditAnywhere)\nfloat RunSpeed;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Movement\", EditAnywhere)\nfloat WalkSpeed;"}
{"bad_code": "void UPlayerStats::ResetStats() { Health=100; Stamina=100; }", "good_code": "void UPlayerStats::ResetStats()\n{\n    Health = 100;\n\n    Stamina = 100;\n}"}
{"bad_code": "for (int i=0; i<10; ++i) DoSomething();", "good_code": "for (int i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyComponent.h\"\n\nUCLASS() class AMyActor : public AActor\n{\npublic:\n    AMyActor() {}\n\n    void BeginPlay() override;\n\n    void Activate() {}\n\nprivate:\n    float Health; int32 Damage;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyComponent.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    float Health;\n    int32 Damage;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere) float WalkSpeed;\nUPROPERTY(BlueprintReadOnly, EditAnywhere) float RunSpeed;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere)\nfloat WalkSpeed;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere)\nfloat RunSpeed;"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{ \n    public: \n    AMyCharacter(); void Tick(float DeltaTime) override;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "if (PlayerHealth>0) { PlayerHealth -= Damage; }", "good_code": "if (PlayerHealth > 0)\n{\n    PlayerHealth -= Damage;\n}"}
{"bad_code": "bool bIsMoving=true;\nbool bIsJumping=false;", "good_code": "bool bIsMoving = true;\nbool bIsJumping = false;"}
{"bad_code": "void AMyComponent::Reset() { Health = MaxHealth; }", "good_code": "void AMyComponent::Reset()\n{\n    Health = MaxHealth;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite) int32 Score;\nUPROPERTY() int32 Lives;", "good_code": "UPROPERTY(BlueprintReadWrite)\nint32 Score;\n\nUPROPERTY()\nint32 Lives;"}
{"bad_code": "if (bCanShoot==true)\n{ FireWeapon(); } else { ReloadWeapon(); }", "good_code": "if (bCanShoot == true)\n{\n    FireWeapon();\n}\nelse\n{\n    ReloadWeapon();\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere) int32 AmmoCount; UPROPERTY(BlueprintReadWrite, EditAnywhere) int32 MaxAmmo;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 AmmoCount;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 MaxAmmo;"}
{"bad_code": "UENUM() enum class EWeaponType : uint8 { Pistol, Rifle, Shotgun };", "good_code": "UENUM()\nenum class EWeaponType : uint8\n{\n    Pistol,\n    Rifle,\n    Shotgun\n};"}
{"bad_code": "UCLASS()\nclass MyActor : public AActor {\npublic:\n    MyActor() { }\n\n    void DoSomething() {\n        if(true) { DoAction(); }\n        else { DoAnotherAction(); }\n    }\nprivate:\n    int32 health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void DoSomething();\n\nprivate:\n    int32 Health;\n};\n\nvoid AMyActor::DoSomething()\n{\n    if (true)\n    {\n        DoAction();\n    }\n    else\n    {\n        DoAnotherAction();\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere)\nint32 maxHealth, currentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere)\nint32 MaxHealth;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere)\nint32 CurrentHealth;"}
{"bad_code": "#include \"MyGame.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\nprivate:\n    void DoSomething();\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprivate:\n    void DoSomething();\n};"}
{"bad_code": "UCLASS()\nclass MyActor : public AActor\n{\npublic:\n    void Tick(float DeltaTime) override;\n};\nvoid MyActor::Tick(float DeltaTime) {\n    Super::Tick(DeltaTime);\n}", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    virtual void Tick(float DeltaTime) override;\n};\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "UCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n    \n    void Activate() { isActive = true; }\nprotected:\n    bool isActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprotected:\n    bool bIsActive;\n};\n\nvoid AMyActor::Activate()\n{\n    bIsActive = true;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable)\nvoid Jump(); void Crouch();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();\n\nUFUNCTION(BlueprintCallable)\nvoid Crouch();"}
{"bad_code": "void Calculate(int a,int b) { int result=a+b; }", "good_code": "void Calculate(int A, int B)\n{\n    int Result = A + B;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Setup\")\nFVector startPosition, endPosition;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Setup\")\nFVector StartPosition;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Setup\")\nFVector EndPosition;"}
{"bad_code": "class MyComponent : public UActorComponent\n{\npublic:\n    void Initialize() { /*...*/ }\n    \nprotected:\n    void Reset();\nprivate:\n    int32 counter;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    void Initialize();\n\nprotected:\n    void Reset();\n\nprivate:\n    int32 Counter;\n};\n\nvoid UMyComponent::Initialize()\n{\n    // Implementation\n}"}
{"bad_code": "USTRUCT()\nstruct FMyStruct {\n    GENERATED_BODY()\n    int32 value;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    int32 Value;\n};"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor();\n    virtual void BeginPlay() override;\n    void Activate(); protected: void ResetState(); private: int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY() float MaxHealth;UPROPERTY()float CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY(VisibleAnywhere, Category = \"Health\")\nfloat CurrentHealth;"}
{"bad_code": "#include \"MyActor.h\"#include \"Engine/World.h\"#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "void SetPosition(float X, float Y, float Z){Position.X=X;Position.Y=Y;Position.Z=Z;}", "good_code": "void SetPosition(float X, float Y, float Z)\n{\n    Position.X = X;\n    Position.Y = Y;\n    Position.Z = Z;\n}"}
{"bad_code": "int32 AddNumbers(int32 A, int32 B){return A+B;}", "good_code": "int32 AddNumbers(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "bool IsVisible(){if(Visibility==true)return true;else return false;}", "good_code": "bool IsVisible()\n{\n    if (Visibility == true)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"}
{"bad_code": "bool bIsActive; float Health;int32 Score;", "good_code": "bool bIsActive;\n\nfloat Health;\n\nint32 Score;"}
{"bad_code": "void ToggleVisibility(){if(bIsVisible)Hide();else Show();}", "good_code": "void ToggleVisibility()\n{\n    if (bIsVisible)\n    {\n        Hide();\n    }\n    else\n    {\n        Show();\n    }\n}"}
{"bad_code": "UFUNCTION() void Jump();UFUNCTION()void Run();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Movement\")\nvoid Jump();\n\nUFUNCTION(BlueprintCallable, Category = \"Movement\")\nvoid Run();"}
{"bad_code": "public: AMyCharacter();void MoveToTarget();private:float MovementSpeed;", "good_code": "public:\n    AMyCharacter();\n\n    void MoveToTarget();\n\nprivate:\n    float MovementSpeed;"}
{"bad_code": "class MyActor : public AActor {\npublic:\n    MyActor() { }\n\n    void BeginPlay() override {\n        // Implementation\n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n};"}
{"bad_code": "void DoSomething(){int32 x=0;for(int32 i=0;i<10;i++){x+=i;}}", "good_code": "void DoSomething()\n{\n    int32 x = 0;\n\n    for (int32 i = 0; i < 10; i++)\n    {\n        x += i;\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly,EditAnywhere,Category=\"Movement\")float Speed,Acceleration;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Movement\")\nfloat Acceleration;"}
{"bad_code": "#include \"MyActor.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyComponent.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n#include \"MyProject/MyComponent.h\""}
{"bad_code": "void SomeFunction(){\n    if(bShouldExecute)DoTask();}", "good_code": "void SomeFunction()\n{\n    if (bShouldExecute)\n    {\n        DoTask();\n    }\n}"}
{"bad_code": "class AMyCharacter : public ACharacter {\npublic:\n    virtual void Jump() override {}\n\n    AMyCharacter();\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void Jump() override;\n};"}
{"bad_code": "int32 Multiply(int32 a,int32 b){return a*b;}", "good_code": "int32 Multiply(int32 a, int32 b)\n{\n    return a * b;\n}"}
{"bad_code": "bool bIsVisible=false;if(bIsVisible){DoSomething();}", "good_code": "bool bIsVisible = false;\n\nif (bIsVisible)\n{\n    DoSomething();\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\nprivate:int32 Health; \nprotected:int32 Armor;\npublic:int32 GetHealth() {return Health;}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    int32 GetHealth();\n\nprotected:\n    int32 Armor;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere,BlueprintReadWrite,Category=\"Stats\")int32 Health; \nUPROPERTY(EditAnywhere,BlueprintReadWrite,Category=\"Stats\")int32 Armor;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 Armor;"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n\nAMyActor::AMyActor()\n{\n    PrimaryActorTick.bCanEverTick = true;}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();}\n\nvoid AMyActor::Tick(float DeltaTime) { Super::Tick(DeltaTime); }", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nAMyActor::AMyActor()\n{\n    PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override; void MoveForward(float Value);\n\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void MoveForward(float Value);\n\n    float Speed;\n};"}
{"bad_code": "void AMyActor::SetVisible(bool bVisible) {if (bVisible) SetActorHiddenInGame(false); else SetActorHiddenInGame(true);}", "good_code": "void AMyActor::SetVisible(bool bVisible)\n{\n    if (bVisible)\n    {\n        SetActorHiddenInGame(false);\n    }\n    else\n    {\n        SetActorHiddenInGame(true);\n    }\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere, Category= \"Components\") USceneComponent* Root;\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly,Category=\"Components\") UCameraComponent* Camera;", "good_code": "UPROPERTY(VisibleAnywhere, Category = \"Components\")\nUSceneComponent* Root;\n\nUPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = \"Components\")\nUCameraComponent* Camera;"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"Engine/World.h\"\n\n#include \"MyCharacter.h\""}
{"bad_code": "UENUM()\nenum class ECharacterState\n{\n    Idle, Walking, Running\n};", "good_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Walking,\n    Running\n};"}
{"bad_code": "UCLASS()\nclass MyClass : public UObject\n{\n    int32 X, Y, Z;\n};", "good_code": "UCLASS()\nclass MyClass : public UObject\n{\n    int32 X;\n    int32 Y;\n    int32 Z;\n};"}
{"bad_code": "if(Health>0) {Health -= 10;}", "good_code": "if (Health > 0)\n{\n    Health -= 10;\n}"}
{"bad_code": "class AMyActor : public AActor\n{\n    public:\n    AMyActor(); int32 Health;\n};", "good_code": "class AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    int32 Health;\n};"}
{"bad_code": "UFUNCTION(BlueprintCallable)\nvoid Jump() {}\n\nUFUNCTION(BlueprintCallable)\nvoid Crouch() {}", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump()\n{\n}\n\nUFUNCTION(BlueprintCallable)\nvoid Crouch()\n{\n}"}
{"bad_code": "class AMyCharacter : public AActor {\npublic:\n    AMyCharacter()\n    {\n        int32 Health, Stamina;\n        Health = 100; Stamina = 50;\n    }\n};", "good_code": "class AMyCharacter : public AActor\n{\npublic:\n    AMyCharacter()\n    {\n        int32 Health;\n        int32 Stamina;\n        \n        Health = 100;\n        Stamina = 50;\n    }\n};"}
{"bad_code": "UCLASS() class AMyActor : public AActor\n{\npublic:\n    void BeginPlay() override {}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    virtual void BeginPlay() override\n    {\n    }\n};"}
{"bad_code": "USTRUCT() struct FPlayerData\n{\n    UPROPERTY(BlueprintReadWrite) int32 Health; UPROPERTY(BlueprintReadWrite) int32 Stamina;\n};", "good_code": "USTRUCT()\nstruct FPlayerData\n{\n    UPROPERTY(BlueprintReadWrite)\n    int32 Health;\n\n    UPROPERTY(BlueprintReadWrite)\n    int32 Stamina;\n};"}
{"bad_code": "if (bIsRunning) { Speed = MaxSpeed; }\nelse { Speed = MinSpeed; }", "good_code": "if (bIsRunning)\n{\n    Speed = MaxSpeed;\n}\nelse\n{\n    Speed = MinSpeed;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyComponent.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyComponent.h\""}
{"bad_code": "void DoSomething(){int32 Result=A+B;}", "good_code": "void DoSomething()\n{\n    int32 Result = A + B;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor { public: void BeginPlay() override; private: int32 Health; };", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) bool bIsEnabled;UPROPERTY(EditAnywhere) float Speed;", "good_code": "UPROPERTY(EditAnywhere)\nbool bIsEnabled;\n\nUPROPERTY(EditAnywhere)\nfloat Speed;"}
{"bad_code": "for (int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "void SetHealth(int32 Value){Health=Value;}", "good_code": "void SetHealth(int32 Value)\n{\n    Health = Value;\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\nAMyGameMode::AMyGameMode() { PrimaryActorTick.bCanEverTick = true; }\n\nvoid AMyGameMode::BeginPlay()\n{\n    Super::BeginPlay();\n    StartMatch();\n}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGameMode.h\"\n\nAMyGameMode::AMyGameMode()\n{\n    PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyGameMode::BeginPlay()\n{\n    Super::BeginPlay();\n\n    StartMatch();\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n    \n    UFUNCTION(BlueprintCallable, Category = \"Actions\")\n    void PerformAction(){};\n\n    UPROPERTY(EditAnywhere, Category = \"Stats\") \n    float Speed, Power;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n    \npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Actions\")\n    void PerformAction();\n\n    UPROPERTY(EditAnywhere, Category = \"Stats\")\n    float Speed;\n\n    UPROPERTY(EditAnywhere, Category = \"Stats\")\n    float Power;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\") float MaxSpeed;\nUPROPERTY(VisibleAnywhere, Category = \"Movement\") bool bIsMoving;\n\nvoid ACharacter::MoveForward(float Value)\n{\n    if(Value != 0.0f) AddMovementInput(GetActorForwardVector(), Value);\n}", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nfloat MaxSpeed;\n\nUPROPERTY(VisibleAnywhere, Category = \"Movement\")\nbool bIsMoving;\n\nvoid ACharacter::MoveForward(float Value)\n{\n    if (Value != 0.0f)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n}"}
{"bad_code": "UENUM()\nenum class ECharacterState\n{\n    Idle, Running, Jumping\n};\n\npublic:\n    void SetState(ECharacterState NewState) { CharacterState = NewState; }\n    ECharacterState GetState() { return CharacterState; }\n\nprivate:\n    ECharacterState CharacterState;", "good_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Running,\n    Jumping\n};\n\npublic:\n    void SetState(ECharacterState NewState)\n    {\n        CharacterState = NewState;\n    }\n\n    ECharacterState GetState()\n    {\n        return CharacterState;\n    }\n\nprivate:\n    ECharacterState CharacterState;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    if (bShouldMove) MoveToTarget();\n}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bShouldMove)\n    {\n        MoveToTarget();\n    }\n}"}
{"bad_code": "for (int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "int32 A = 5,B = 10,Result = A+B;", "good_code": "int32 A = 5;\nint32 B = 10;\nint32 Result = A + B;"}
{"bad_code": "UCLASS()\nclass AMyPawn : public APawn { GENERATED_BODY() public: AMyPawn(); void BeginPlay() override; private: void Initialize(); };", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\n    GENERATED_BODY()\n\npublic:\n    AMyPawn();\n\n    void BeginPlay() override;\n\nprivate:\n    void Initialize();\n};"}
{"bad_code": "void UMyComponent::Execute()\n{\n    if (ConditionA) { DoTaskA(); } else { DoTaskB(); }\n}", "good_code": "void UMyComponent::Execute()\n{\n    if (ConditionA)\n    {\n        DoTaskA();\n    }\n    else\n    {\n        DoTaskB();\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override { PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward); }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override\n    {\n        PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward);\n    }\n};"}
{"bad_code": "UCLASS() class AMyActor : public AActor\n{\npublic:\n    AMyActor();\n    virtual void BeginPlay() override;\n    void Activate();\nprotected:\n    void ResetState();\nprivate:\n    int32 Health; \n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Health\") float MaxHealth;\nUPROPERTY(EditAnywhere) int32 AmmoCount;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY(EditAnywhere)\nint32 AmmoCount;"}
{"bad_code": "#include \"MyProject/MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\""}
{"bad_code": "void AMyClass::DoSomething(){int32 Result=A+B;SetActorLocation(NewLocation);}", "good_code": "void AMyClass::DoSomething()\n{\n    int32 Result = A + B;\n    SetActorLocation(NewLocation);\n}"}
{"bad_code": "int a,b,c;\na=b+c;", "good_code": "int A;\nint B;\nint C;\n\nA = B + C;"}
{"bad_code": "for(int i=0;i<10;++i) DoSomething();", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "UFUNCTION() void MyFunction(); void AnotherFunction();", "good_code": "UFUNCTION()\nvoid MyFunction();\n\nvoid AnotherFunction();"}
{"bad_code": "if(bIsAlive) {Health=100;}\nelse {Health=0;}", "good_code": "if (bIsAlive)\n{\n    Health = 100;\n}\nelse\n{\n    Health = 0;\n}"}
{"bad_code": "UPROPERTY() bool IsVisible;\nbool bIsRunning;", "good_code": "UPROPERTY()\nbool bIsVisible;\n\nbool bIsRunning;"}
{"bad_code": "void MyFunction()\n{\n    if(bCondition) Execute();\n}", "good_code": "void MyFunction()\n{\n    if (bCondition)\n    {\n        Execute();\n    }\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Kismet/GameplayStatics.h\"\n#include \"GameFramework/Actor.h\"\n\nvoid AMyGameMode::StartPlay() {\n    Super::StartPlay();\n    UGameplayStatics::PlaySound2D(this, StartSound); }", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Kismet/GameplayStatics.h\"\n\n#include \"MyGameMode.h\"\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n\n    UGameplayStatics::PlaySound2D(this, StartSound);\n}"}
{"bad_code": "UCLASS()\nclass MyActor : public AActor\n{\nprivate:\n    UPROPERTY(EditAnywhere)\n    int32 Health, Score;\n\npublic:\n    MyActor();\n    void BeginPlay() override {}\n};", "good_code": "UCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    int32 Health;\n\n    UPROPERTY(EditAnywhere)\n    int32 Score;\n};"}
{"bad_code": "USTRUCT()\nstruct FPlayerData\n{\n    GENERATED_BODY()\n    UPROPERTY(BlueprintReadWrite)\n    int32 Level;\n    UPROPERTY(BlueprintReadWrite)\n    bool bIsAlive;\n};", "good_code": "USTRUCT()\nstruct FPlayerData\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite)\n    int32 Level;\n\n    UPROPERTY(BlueprintReadWrite)\n    bool bIsAlive;\n};"}
{"bad_code": "void DoSomething(int32 A, int32 B){\n    if(A>B) { int32 Result=A+B; }\n    else { int32 Result=A-B; }\n}", "good_code": "void DoSomething(int32 A, int32 B)\n{\n    if (A > B)\n    {\n        int32 Result = A + B;\n    }\n    else\n    {\n        int32 Result = A - B;\n    }\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere, BlueprintReadWrite)\nint32 MaxSpeed, MinSpeed;", "good_code": "UPROPERTY(BlueprintReadWrite, VisibleAnywhere)\nint32 MaxSpeed;\n\nUPROPERTY(BlueprintReadWrite, VisibleAnywhere)\nint32 MinSpeed;"}
{"bad_code": "UCLASS()\nclass APlayerCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\n    APlayerCharacter();\n    void ProcessInput();\n};", "good_code": "UCLASS()\nclass APlayerCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    APlayerCharacter();\n\n    void ProcessInput();\n};"}
{"bad_code": "if(Condition) DoSomething();\nelse DoSomethingElse();", "good_code": "if (Condition)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "UCLASS()\nclass MyComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    MyComponent() { PrimaryComponentTick.bCanEverTick = true; }\n};", "good_code": "UCLASS()\nclass MyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    MyComponent()\n    {\n        PrimaryComponentTick.bCanEverTick = true;\n    }\n};"}
{"bad_code": "for(int32 i=0;i<10;i++){ DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UPROPERTY()\nint32 Health, Armor;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Armor;"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\nAMyActor() { Health = 100; }\n\nvoid Tick(float DeltaTime) override;\n\nprivate:\n    int Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY()\nint32 Score, Lives;\n\nif (Score > 100) SetLifeSpan(5.0f);", "good_code": "UPROPERTY()\nint32 Score;\n\nUPROPERTY()\nint32 Lives;\n\nif (Score > 100)\n{\n    SetLifeSpan(5.0f);\n}"}
{"bad_code": "for (int i=0;i<10;i++) DoSomething();", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats {\n    float Health;\n    float Armor;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    float Health;\n    float Armor;\n};"}
{"bad_code": "public:\nvoid Initialize(){}\n\nprivate:\nbool bIsActive;\nint32 Value;", "good_code": "public:\n    void Initialize();\n\nprivate:\n    bool bIsActive;\n    int32 Value;"}
{"bad_code": "UPROPERTY(Category = \"Movement\", BlueprintReadOnly)\nfloat Speed;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Speed;"}
{"bad_code": "void AMyActor::BeginPlay()\n{\n\n}\nvoid AMyActor::Tick(float DeltaTime) {\n\n}", "good_code": "void AMyActor::BeginPlay()\n{\n}\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n}"}
{"bad_code": "bool bIsRunning=false;\n\nif (bIsRunning){\nToggleRunning(false);}", "good_code": "bool bIsRunning = false;\n\nif (bIsRunning)\n{\n    ToggleRunning(false);\n}"}
{"bad_code": "UENUM()\nenum class EMovementType { Walk, Run, Sprint };", "good_code": "UENUM()\nenum class EMovementType\n{\n    Walk,\n    Run,\n    Sprint\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\nAMyCharacter();\n\nprotected:\nvoid Jump(); void Crouch();\n\nprivate:\nbool bIsJumping; bool bIsCrouching;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprotected:\n    void Jump();\n    void Crouch();\n\nprivate:\n    bool bIsJumping;\n    bool bIsCrouching;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    void StartRunning() {\n        bIsRunning = true; }\n    void StopRunning() { bIsRunning = false; }\n\nprivate:\n    bool bIsRunning;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void StartRunning()\n    {\n        bIsRunning = true;\n    }\n\n    void StopRunning()\n    {\n        bIsRunning = false;\n    }\n\nprivate:\n    bool bIsRunning;\n};"}
{"bad_code": "#include \"Kismet/GameplayStatics.h\"\n#include \"MyGameMode.h\"\n#include \"Engine/Engine.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase{\npublic: AMyGameMode();\n};", "good_code": "#include \"Engine/Engine.h\"\n#include \"Kismet/GameplayStatics.h\"\n\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode();\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite)\nint32 Score, Lives;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 Score;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 Lives;"}
{"bad_code": "if (Health>0){\nHeal();}\nelse{Die();}", "good_code": "if (Health > 0)\n{\n    Heal();\n}\nelse\n{\n    Die();\n}"}
{"bad_code": "void UpdatePosition() {\nfloat DeltaTime = GetWorld()->GetDeltaSeconds();MoveForward(DeltaTime);}", "good_code": "void UpdatePosition()\n{\n    float DeltaTime = GetWorld()->GetDeltaSeconds();\n\n    MoveForward(DeltaTime);\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats {\n    GENERATED_BODY() int32 Health; int32 Stamina; float Speed;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Health;\n    int32 Stamina;\n    float Speed;\n};"}
{"bad_code": "void AEnemy::Attack(){if(bIsAggressive){DealDamage();}}", "good_code": "void AEnemy::Attack()\n{\n    if (bIsAggressive)\n    {\n        DealDamage();\n    }\n}"}
{"bad_code": "UFUNCTION() void Jump(); virtual void Land() override;", "good_code": "UFUNCTION()\nvoid Jump();\n\nvirtual void Land() override;"}
{"bad_code": "public: void SetSpeed(float NewSpeed){Speed=NewSpeed;}", "good_code": "public:\n    void SetSpeed(float NewSpeed)\n    {\n        Speed = NewSpeed;\n    }"}
{"bad_code": "bool bGameOver; \nint32 Score;\nfloat PlayerSpeed;", "good_code": "bool bGameOver;\n\nint32 Score;\n\nfloat PlayerSpeed;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyCustomComponent.h\"\n#include \"CoreMinimal.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor(){}\n\n    void Activate(){bIsActive = true;ResetHealth();}\n\nprotected:\n    void ResetHealth(){Health = MaxHealth;}\n\nprivate:\n    bool bIsActive;\n    float Health, MaxHealth;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCustomComponent.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprotected:\n    void ResetHealth();\n\nprivate:\n    bool bIsActive;\n    float Health;\n    float MaxHealth;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Activate()\n{\n    bIsActive = true;\n    ResetHealth();\n}\n\nvoid AMyActor::ResetHealth()\n{\n    Health = MaxHealth;\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\npublic:\n    void Jump();virtual void BeginPlay() override;\n\nprivate:\n    float JumpHeight;\n    bool bCanJump;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\npublic:\n    virtual void BeginPlay() override;\n\n    void Jump();\n\nprivate:\n    float JumpHeight;\n    bool bCanJump;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite)\nint32 PlayerScore, PlayerLives;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 PlayerScore;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 PlayerLives;"}
{"bad_code": "if(bIsValid) DoSomething();\nelse DoSomethingElse();", "good_code": "if (bIsValid)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void FireWeapon();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid FireWeapon();"}
{"bad_code": "private:\nint32 Health; int32 MaxHealth;", "good_code": "private:\nint32 Health;\nint32 MaxHealth;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime)\n{UpdatePosition();UpdateRotation();}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    UpdatePosition();\n    UpdateRotation();\n}"}
{"bad_code": "AMyActor::AMyActor(): Health(100), MaxHealth(100){}", "good_code": "AMyActor::AMyActor()\n    : Health(100)\n    , MaxHealth(100)\n{\n}"}
{"bad_code": "UPROPERTY(EditDefaultsOnly, BlueprintReadOnly)\nfloat MovementSpeed;\nbool bIsRunning;", "good_code": "UPROPERTY(BlueprintReadOnly, EditDefaultsOnly)\nfloat MovementSpeed;\n\nbool bIsRunning;"}
{"bad_code": "void CalculateDamage(){int32 Damage = AttackPower * 2;}", "good_code": "void CalculateDamage()\n{\n    int32 Damage = AttackPower * 2;\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"MyProject/MyComponent.h\"\n#include \"GameFramework/Actor.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor() { InitializeVariables(); }\n\n    void Activate() { bIsActive = true; }\n\nprivate:\n    bool bIsActive;\n    void InitializeVariables();\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyComponent.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprivate:\n    void InitializeVariables();\n\n    bool bIsActive;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\") float Speed;\nUPROPERTY(EditAnywhere) int MaxJumpHeight;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(EditAnywhere, Category = \"Movement\")\nint MaxJumpHeight;"}
{"bad_code": "public:\n    AMyClass()\n      : m_Health(100), m_Speed(10) {}", "good_code": "public:\n    AMyClass()\n        : m_Health(100)\n        , m_Speed(10)\n    {\n    }"}
{"bad_code": "if (bIsRunning) DoSomething();", "good_code": "if (bIsRunning)\n{\n    DoSomething();\n}"}
{"bad_code": "int a, b, sum;\na = 5; b = 10;\nsum = a + b;", "good_code": "int a;\nint b;\nint sum;\n\na = 5;\nb = 10;\nsum = a + b;"}
{"bad_code": "public:\n    void SetHealth(int32 NewHealth) { Health = NewHealth; }\n\nprivate:\n    int32 Health;", "good_code": "public:\n    void SetHealth(int32 NewHealth);\n\nprivate:\n    int32 Health;"}
{"bad_code": "if (Value>0) { return true; }\nelse { return false; }", "good_code": "if (Value > 0)\n{\n    return true;\n}\nelse\n{\n    return false;\n}"}
{"bad_code": "for(int i=0;i<10;++i){ Process(i); }", "good_code": "for (int i = 0; i < 10; ++i)\n{\n    Process(i);\n}"}
{"bad_code": "while(bIsActive) { Update(); }", "good_code": "while (bIsActive)\n{\n    Update();\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) bool bIsVisible;\nUPROPERTY(EditAnywhere) bool bIsPlayable;", "good_code": "UPROPERTY(EditAnywhere)\nbool bIsVisible;\n\nUPROPERTY(EditAnywhere)\nbool bIsPlayable;"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() {}\n    void BeginPlay() override {};\n    void MoveToTarget() {}\nprivate:\n    float Health; int32 Speed;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void MoveToTarget();\n\nprivate:\n    float Health;\n    int32 Speed;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject.h\"\n#include \"MyCustomActor.h\"\n\nUCLASS()\nclass AMyCustomActor : public AActor\n{\npublic:\n    AMyCustomActor();\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyCustomActor.h\"\n#include \"MyProject.h\"\n\nUCLASS()\nclass AMyCustomActor : public AActor\n{\npublic:\n    AMyCustomActor();\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\") float Speed;\nUPROPERTY() int32 Health;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY()\nint32 Health;"}
{"bad_code": "void SetHealth(int32 NewHealth) { Health = NewHealth; };\n\nint32 GetHealth() { return Health; };", "good_code": "void SetHealth(int32 NewHealth)\n{\n    Health = NewHealth;\n}\n\nint32 GetHealth()\n{\n    return Health;\n}"}
{"bad_code": "if (bIsVisible) SetActorHiddenInGame(false);\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "int32 CalculateSum(int32 A,int32 B){return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "void ToggleVisibility(){if(bIsVisible){bIsVisible = false;}else{bIsVisible = true;}}", "good_code": "void ToggleVisibility()\n{\n    if (bIsVisible)\n    {\n        bIsVisible = false;\n    }\n    else\n    {\n        bIsVisible = true;\n    }\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump();\nUFUNCTION() void Run();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();\n\nUFUNCTION()\nvoid Run();"}
{"bad_code": "bool bIsRunning; int32 Score; float Stamina;", "good_code": "bool bIsRunning;\nint32 Score;\nfloat Stamina;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyComponent.h\"\n#include \"Engine/Engine.h\"\n#include \"MyProject/MyActor.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic:\n\tAMyActor() {}\nprotected:\n\tint Health;\n};", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n#include \"MyProject/MyComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprotected:\n    int32 Health;\n};"}
{"bad_code": "USTRUCT() struct FPlayerStats\n{\n    UPROPERTY() int32 Health, Stamina;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    UPROPERTY()\n    int32 Health;\n\n    UPROPERTY()\n    int32 Stamina;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic: \n    void Jump(){ /* logic */ }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void Jump()\n    {\n        // logic\n    }\n};"}
{"bad_code": "void DoSomething(){if(bIsActive){Activate();}else{Deactivate();}}", "good_code": "void DoSomething()\n{\n    if (bIsActive)\n    {\n        Activate();\n    }\n    else\n    {\n        Deactivate();\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite) float Speed; UPROPERTY() bool bIsRunning;", "good_code": "UPROPERTY(BlueprintReadWrite)\nfloat Speed;\n\nUPROPERTY()\nbool bIsRunning;"}
{"bad_code": "bool IsReady() {return bReady;}", "good_code": "bool IsReady()\n{\n    return bReady;\n}"}
{"bad_code": "int32 CalculateSum(int32 A,int32 B){return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "void Execute() { int32 Result=5*3; }", "good_code": "void Execute()\n{\n    int32 Result = 5 * 3;\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor(){}\n    virtual void BeginPlay() override {}\nprivate:\n    int32 Health;\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n    float Speed;\n};"}
{"bad_code": "for(int32 i=0;i<10;i++){ DoWork(); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoWork();\n}"}
{"bad_code": "class MyActor : public AActor {\npublic:\n    MyActor() {}\n    void Activate() { /* Implementation */ }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"EngineMinimal.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"EngineMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor() { Health = 100; }\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "void AMyActor::BeginPlay(){ Super::BeginPlay(); }", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) float Health, Speed;", "good_code": "UPROPERTY(EditAnywhere)\nfloat Health;\n\nUPROPERTY(EditAnywhere)\nfloat Speed;"}
{"bad_code": "UENUM() enum class EWeaponType { Sword, Bow, Staff };", "good_code": "UENUM()\nenum class EWeaponType\n{\n    Sword,\n    Bow,\n    Staff\n};"}
{"bad_code": "if(bIsVisible) { SetActorHiddenInGame(false); }", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "int32 Result=A+B;", "good_code": "int32 Result = A + B;"}
{"bad_code": "UPROPERTY() int32 Health;\nUPROPERTY() bool bIsDead;", "good_code": "UPROPERTY()\nbool bIsDead;\n\nUPROPERTY()\nint32 Health;"}
{"bad_code": "class AMyActor : public AActor {\nprotected:\n    void ResetState() { /* Implementation */ }\npublic:\n    AMyActor();\n    void Activate() { /* Implementation */ }\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyPlayer.h\"\n\nAMyGameMode::AMyGameMode() { DefaultPawnClass = AMyPlayer::StaticClass(); }\n\nvoid AMyGameMode::BeginPlay() {\n    Super::BeginPlay();\n    StartMatch();\n}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameMode.h\"\n#include \"MyPlayer.h\"\n\nAMyGameMode::AMyGameMode()\n{\n    DefaultPawnClass = AMyPlayer::StaticClass();\n}\n\nvoid AMyGameMode::BeginPlay()\n{\n    Super::BeginPlay();\n\n    StartMatch();\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void Jump() { if (CanJump()) { DoJump(); } }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void Jump()\n    {\n        if (CanJump())\n        {\n            DoJump();\n        }\n    }\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nint32 Health, Speed;", "good_code": "UPROPERTY(VisibleAnywhere)\nint32 Health;\n\nUPROPERTY(VisibleAnywhere)\nint32 Speed;"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Activate(); void Deactivate();\n\nprivate:\n    void Reset();\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Activate();\n\n    void Deactivate();\n\nprivate:\n    void Reset();\n}"}
{"bad_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\nprotected:\n    virtual void BeginPlay() override; void EndPlay(); \n};", "good_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\nprotected:\n    virtual void BeginPlay() override;\n\n    void EndPlay();\n};"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable)\nvoid SetHealth(int32 NewHealth) { Health = NewHealth; }", "good_code": "UFUNCTION(BlueprintCallable)\nvoid SetHealth(int32 NewHealth)\n{\n    Health = NewHealth;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Stats\")\nbool bIsAlive; int32 Health;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nbool bIsAlive;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 Health;"}
{"bad_code": "for(int i=0;i<10;i++) { ProcessItem(i); }", "good_code": "for (int i = 0; i < 10; i++)\n{\n    ProcessItem(i);\n}"}
{"bad_code": "public: AMyCharacter(); private: int32 Speed;", "good_code": "public:\n    AMyCharacter();\n\nprivate:\n    int32 Speed;"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/Engine.h\"\n\nUCLASS()\nclass AMyCharacter : public AActor {\npublic:\n    AMyCharacter() {}\n\n    virtual void BeginPlay() override {}\n\n    void Jump() {}\n\nprivate:\n    int32 Health, Stamina;\n    bool bIsJumping;\n};", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public AActor\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Jump();\n\nprivate:\n    int32 Health;\n    int32 Stamina;\n    bool bIsJumping;\n};"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Components/ActorComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent {\n    GENERATED_BODY()\npublic:\n    UMyComponent() {PrimaryComponentTick.bCanEverTick = true;}\n\n    void InitializeComponent() {Super::InitializeComponent();}\n    void PerformAction() { /* Do something */ }\n};", "good_code": "#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    void InitializeComponent() override;\n\n    void PerformAction();\n\nprivate:\n    void PerformAction()\n    {\n        // Do something\n    }\n};"}
{"bad_code": "#include \"MyHUD.h\"\n#include \"GameFramework/HUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD {\n    GENERATED_BODY()\npublic:\n    virtual void DrawHUD() override {Super::DrawHUD(); RenderCrosshair();}\n    void RenderCrosshair() { /* Draw crosshair */ }\n};", "good_code": "#include \"GameFramework/HUD.h\"\n\n#include \"MyHUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void DrawHUD() override;\n\nprivate:\n    void RenderCrosshair();\n\n    void RenderCrosshair()\n    {\n        // Draw crosshair\n    }\n};"}
{"bad_code": "#include \"PlayerStats.h\"\n#include \"CoreMinimal.h\"\n\nUSTRUCT(BlueprintType)\nstruct FPlayerStats {\n    GENERATED_BODY()\npublic:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")\n    int32 Health, Armor;\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"PlayerStats.h\"\n\nUSTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\n    int32 Health;\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\n    int32 Armor;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MySpawner.h\"\n\nUCLASS()\nclass AMySpawner : public AActor {\n    GENERATED_BODY()\npublic:\n    void SpawnActor() {\n        if (GetWorld()) {\n            GetWorld()->SpawnActor<AActor>(ActorClassToSpawn);\n        }\n    }\nprivate:\n    UPROPERTY(EditAnywhere)\n    TSubclassOf<AActor> ActorClassToSpawn;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MySpawner.h\"\n\nUCLASS()\nclass AMySpawner : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void SpawnActor();\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    TSubclassOf<AActor> ActorClassToSpawn;\n};\n\nvoid AMySpawner::SpawnActor()\n{\n    if (GetWorld())\n    {\n        GetWorld()->SpawnActor<AActor>(ActorClassToSpawn);\n    }\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n#include \"GameFramework/PlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController {\n    GENERATED_BODY()\npublic:\n    virtual void SetupInputComponent() override {Super::SetupInputComponent(); BindInputs();}\n    void BindInputs() { /* Bind inputs */ }\n};", "good_code": "#include \"GameFramework/PlayerController.h\"\n\n#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void SetupInputComponent() override;\n\nprivate:\n    void BindInputs();\n\n    void BindInputs()\n    {\n        // Bind inputs\n    }\n};\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n    BindInputs();\n}"}
{"bad_code": "#include \"GameFramework/Character.h\"\n#include \"MyEnemyCharacter.h\"\n\nUCLASS()\nclass AMyEnemyCharacter : public ACharacter {\n    GENERATED_BODY()\npublic:\n    AMyEnemyCharacter() {bIsAggressive = false;}\n    void Attack() { /* Attack logic */ }\nprivate:\n    bool bIsAggressive;\n};", "good_code": "#include \"GameFramework/Character.h\"\n\n#include \"MyEnemyCharacter.h\"\n\nUCLASS()\nclass AMyEnemyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    AMyEnemyCharacter();\n\n    void Attack();\n\nprivate:\n    bool bIsAggressive;\n};\n\nAMyEnemyCharacter::AMyEnemyCharacter()\n{\n    bIsAggressive = false;\n}\n\nvoid AMyEnemyCharacter::Attack()\n{\n    // Attack logic\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"Engine/StaticMeshActor.h\"\n#include \"MyStaticMeshActor.h\"\n\nUCLASS()\nclass AMyStaticMeshActor : public AStaticMeshActor {\n    GENERATED_BODY()\npublic:\n    void ChangeColor() { /* Change color logic */ }\n};", "good_code": "#include \"Engine/StaticMeshActor.h\"\n\n#include \"MyStaticMeshActor.h\"\n\nUCLASS()\nclass AMyStaticMeshActor : public AStaticMeshActor\n{\n    GENERATED_BODY()\n\npublic:\n    void ChangeColor();\n\nprivate:\n    void ChangeColor()\n    {\n        // Change color logic\n    }\n};"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/GameModeBase.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase {\n    GENERATED_BODY()\npublic:\n    virtual void StartPlay() override {Super::StartPlay(); InitializeGame();}\n    void InitializeGame() { /* Initialize game logic */ }\n};", "good_code": "#include \"GameFramework/GameModeBase.h\"\n\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void StartPlay() override;\n\nprivate:\n    void InitializeGame();\n\n    void InitializeGame()\n    {\n        // Initialize game logic\n    }\n};\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n    InitializeGame();\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyWeapon.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyWeapon : public AActor {\n    GENERATED_BODY()\npublic:\n    void Fire() { /* Fire logic */ }\nprivate:\n    int32 Ammo;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyWeapon.h\"\n\nUCLASS()\nclass AMyWeapon : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void Fire();\n\nprivate:\n    int32 Ammo;\n};\n\nvoid AMyWeapon::Fire()\n{\n    // Fire logic\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyHelper.h\"\n\nUCLASS() class AMyCharacter : public AActor {\n    public: AMyCharacter() {}\n\n    void Tick(float DeltaTime) override { Super::Tick(DeltaTime); }\n    virtual void BeginPlay() override { Super::BeginPlay(); }\n    bool bIsRunning;\n    void Run() { bIsRunning = true; }\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyProject/MyHelper.h\"\n\nUCLASS()\nclass AMyCharacter : public AActor\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n    void Tick(float DeltaTime) override;\n\n    void Run();\n\nprivate:\n    bool bIsRunning;\n};"}
{"bad_code": "#include \"PlayerStats.h\"\n\nUCLASS() class APlayerStats : public AActor {\n    public: APlayerStats() { Score = 0; Health = 100; }\n    int Score, Health;\n};", "good_code": "#include \"PlayerStats.h\"\n\nUCLASS()\nclass APlayerStats : public AActor\n{\npublic:\n    APlayerStats();\n\nprivate:\n    int Score;\n    int Health;\n};"}
{"bad_code": "UPROPERTY() float MovementSpeed;\nUPROPERTY(BlueprintReadOnly) bool bIsJumping;", "good_code": "UPROPERTY(BlueprintReadOnly)\nbool bIsJumping;\n\nUPROPERTY()\nfloat MovementSpeed;"}
{"bad_code": "if (bIsVisible) SetActorHiddenInGame(false);\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "for(int i=0;i<10;i++){ DoSomething(); }\n\nint A,B=5,C;", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}\n\nint A;\nint B = 5;\nint C;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void ActivateAbility(){}", "good_code": "UFUNCTION(BlueprintCallable)\nvoid ActivateAbility()\n{\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\nAMyPlayerController::AMyPlayerController() {}\nvoid AMyPlayerController::SetupInputComponent() { Super::SetupInputComponent(); }", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyPlayerController.h\"\n\nAMyPlayerController::AMyPlayerController()\n{\n}\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n}"}
{"bad_code": "protected: int32 Health;\npublic: void SetHealth(int32 NewHealth) { Health = NewHealth; }", "good_code": "public:\n    void SetHealth(int32 NewHealth);\n\nprotected:\n    int32 Health;"}
{"bad_code": "UENUM(BlueprintType) enum class ECharacterState : uint8 { Idle, Running, Jumping };", "good_code": "UENUM(BlueprintType)\nenum class ECharacterState : uint8\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "int32 CalculateSum(int32 A, int32 B){return A+B;}\n\nvoid AMyActor::BeginPlay()\n{\n    int Sum = CalculateSum(1,2); DoSomething(Sum);\n}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}\n\nvoid AMyActor::BeginPlay()\n{\n    int Sum = CalculateSum(1, 2);\n    DoSomething(Sum);\n}"}
{"bad_code": "class AExampleActor: public AActor {\npublic:\n    AExampleActor();\n    virtual void BeginPlay() override;\n    void DoSomething() { /* Implementation */ }\nprivate:\n    float Health, Speed;\n};", "good_code": "UCLASS()\nclass AExampleActor : public AActor\n{\npublic:\n    AExampleActor();\n\n    virtual void BeginPlay() override;\n\n    void DoSomething();\n\nprivate:\n    float Health;\n    float Speed;\n};"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyCharacter.h\"\n\nvoid AMyGameMode::StartPlay(){\n    Super::StartPlay(); }", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameMode.h\"\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n}"}
{"bad_code": "UPROPERTY()\nint32 Score; UFUNCTION() void UpdateScore();", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Score\")\nint32 Score;\n\nUFUNCTION()\nvoid UpdateScore();"}
{"bad_code": "if (bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "void SetVisibility(bool visible) \n{ \n    bIsVisible = visible; \n}", "good_code": "void SetVisibility(bool visible)\n{\n    bIsVisible = visible;\n}"}
{"bad_code": "void CalculateDamage(int32 baseDamage, int32 &outDamage){\n    outDamage = baseDamage * 2;}", "good_code": "void CalculateDamage(int32 baseDamage, int32& outDamage)\n{\n    outDamage = baseDamage * 2;\n}"}
{"bad_code": "bool bIsRunning, bIsJumping;", "good_code": "bool bIsRunning;\nbool bIsJumping;"}
{"bad_code": "int32 Sum(int32 A,int32 B) { return A+B; }", "good_code": "int32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "class MyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n    \n    public:\n    MyComponent();\n    float m_Speed;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\nprivate:\n    float m_Speed;\n};"}
{"bad_code": "switch (State) { case 0: DoAction(); break; default: break; }", "good_code": "switch (State)\n{\n    case 0:\n        DoAction();\n        break;\n    default:\n        break;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    virtual void BeginPlay() override {}\n\n    void Activate()\n    {\n    }\nprotected:\n    void ResetState() {}\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"Engine/World.h\" #include \"MyProject/MyActor.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\""}
{"bad_code": "void AMyActor::Tick(float DeltaTime) { Super::Tick(DeltaTime); }", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) int Health;\nUPROPERTY(EditAnywhere)\nfloat Speed;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere)\nint Health;\n\nUPROPERTY(EditAnywhere)\nfloat Speed;"}
{"bad_code": "for(int i=0; i<10; i++) DoSomething();", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "public:\nAMyActor();\nvoid Activate(); virtual void BeginPlay() override;", "good_code": "public:\n    AMyActor();\n    \n    virtual void BeginPlay() override;\n\n    void Activate();"}
{"bad_code": "int GetScore() {return Score;}", "good_code": "int GetScore()\n{\n    return Score;\n}"}
{"bad_code": "int32 a = 5, b = 10;\nint32 Result = a+b;", "good_code": "int32 a = 5;\nint32 b = 10;\n\nint32 Result = a + b;"}
{"bad_code": "FVector Location; FVector Velocity; FVector Acceleration;", "good_code": "FVector Location;\nFVector Velocity;\nFVector Acceleration;"}
{"bad_code": "UFUNCTION() void Jump() {}", "good_code": "UFUNCTION()\nvoid Jump()\n{\n}"}
{"bad_code": "class AMyActor: public AActor {\npublic:\n    AMyActor() {}\n    void BeginPlay() override {\n        Super::BeginPlay();\n    }\n    void Activate() { bIsActive = true; }\n\nprivate:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n    \n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyActor::Activate()\n{\n    bIsActive = true;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Engine.h\"\n\nclass UMyComponent: public UActorComponent {\npublic:\n    void Start() {\n        int32 Counter=0; for(int32 i=0;i<10;++i){Counter+=i;}\n    }\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"Engine/Engine.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void Start();\n\nprivate:\n    int32 m_Counter;\n};\n\nvoid UMyComponent::Start()\n{\n    m_Counter = 0;\n    for (int32 i = 0; i < 10; ++i)\n    {\n        m_Counter += i;\n    }\n}"}
{"bad_code": "class AEnemy : public ACharacter {\n    int32 Health, Armor;\npublic:\n    AEnemy() {}\n    void TakeDamage(int32 Damage) { Health -= Damage; }\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    AEnemy();\n\n    void TakeDamage(int32 Damage);\n\nprivate:\n    int32 Health;\n    int32 Armor;\n};\n\nAEnemy::AEnemy()\n{\n}\n\nvoid AEnemy::TakeDamage(int32 Damage)\n{\n    Health -= Damage;\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats {\n    GENERATED_BODY()\n    float Health; float Armor;\n    FPlayerStats() : Health(100.f), Armor(50.f) {}\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    float Health;\n    float Armor;\n\n    FPlayerStats()\n        : Health(100.f)\n        , Armor(50.f)\n    {\n    }\n};"}
{"bad_code": "UCLASS()\nclass UInventoryComponent : public UActorComponent {\npublic:\n    TArray<int32> Items;\n    void AddItem(int32 ItemId) { Items.Add(ItemId); }\n};", "good_code": "UCLASS()\nclass UInventoryComponent : public UActorComponent\n{\npublic:\n    void AddItem(int32 ItemId);\n\nprivate:\n    TArray<int32> Items;\n};\n\nvoid UInventoryComponent::AddItem(int32 ItemId)\n{\n    Items.Add(ItemId);\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\n    bool bIsJumping;\npublic:\n    void Jump() { if (!bIsJumping) { bIsJumping = true; } }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void Jump();\n\nprivate:\n    bool bIsJumping;\n};\n\nvoid AMyCharacter::Jump()\n{\n    if (!bIsJumping)\n    {\n        bIsJumping = true;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase {\n    int32 PlayerScore;\npublic:\n    void IncreaseScore(int32 Amount) { PlayerScore += Amount; }\n};", "good_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    void IncreaseScore(int32 Amount);\n\nprivate:\n    int32 PlayerScore;\n};\n\nvoid AMyGameMode::IncreaseScore(int32 Amount)\n{\n    PlayerScore += Amount;\n}"}
{"bad_code": "UCLASS()\nclass UHealthComponent : public UActorComponent {\n    float CurrentHealth;\n    float MaxHealth;\npublic:\n    void Heal(float Amount) { CurrentHealth += Amount; }\n};", "good_code": "UCLASS()\nclass UHealthComponent : public UActorComponent\n{\npublic:\n    void Heal(float Amount);\n\nprivate:\n    float CurrentHealth;\n    float MaxHealth;\n};\n\nvoid UHealthComponent::Heal(float Amount)\n{\n    CurrentHealth += Amount;\n}"}
{"bad_code": "UCLASS()\nclass UMyWidget : public UUserWidget {\n    UFUNCTION(BlueprintCallable, Category=\"UI\")\n    void OnClick() { /* Implementation */ }\n};", "good_code": "UCLASS()\nclass UMyWidget : public UUserWidget\n{\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"UI\")\n    void OnClick();\n};\n\nvoid UMyWidget::OnClick()\n{\n    // Implementation\n}"}
{"bad_code": "UCLASS()\nclass AWeapon : public AActor {\n    float Damage;\npublic:\n    void Fire() { /* Implementation */ }\n};", "good_code": "UCLASS()\nclass AWeapon : public AActor\n{\npublic:\n    void Fire();\n\nprivate:\n    float Damage;\n};\n\nvoid AWeapon::Fire()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"Kismet/GameplayStatics.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyCustomClass.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void BeginPlay() override {\n        Super::BeginPlay();\n    }\n\n    void Activate(){}\n\nprotected:\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Kismet/GameplayStatics.h\"\n\n#include \"MyProject/MyCustomClass.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    int32 Health;\n};"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats {\n    GENERATED_BODY()\n    \n    int32 Score; int32 Lives;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Score;\n    \n    int32 Lives;\n};"}
{"bad_code": "UCLASS() class UMyComponent : public UActorComponent {\npublic:\n    int32 GetHealth(){ return Health; }\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    int32 GetHealth();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass AEnemy : public ACharacter {\nprivate:\n    bool bIsAlive;\n    int32 Health;\nprotected:\n    void TakeDamage();\npublic:\n    AEnemy();\n    void Die();\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    AEnemy();\n\n    void Die();\n\nprotected:\n    void TakeDamage();\n\nprivate:\n    bool bIsAlive;\n    \n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere)\nfloat Speed, JumpHeight;", "good_code": "UPROPERTY(EditAnywhere)\nfloat Speed;\n\nUPROPERTY(EditAnywhere)\nfloat JumpHeight;"}
{"bad_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if(bIsActive) SetActorHiddenInGame(false);\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsActive)\n    {\n        SetActorHiddenInGame(false);\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Stats\")\nint32 Health;\nUPROPERTY(BlueprintReadWrite, Category=\"Stats\")\nint32 Armor;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nint32 Armor;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 Health;"}
{"bad_code": "void AMyCharacter::Move(float Value)\n{\n    if(Controller && Value != 0.0f) {\n        FVector Direction;\n        Direction = FVector::ForwardVector;\n        AddMovementInput(Direction, Value); }\n}", "good_code": "void AMyCharacter::Move(float Value)\n{\n    if (Controller && Value != 0.0f)\n    {\n        FVector Direction = FVector::ForwardVector;\n        AddMovementInput(Direction, Value);\n    }\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable)\nvoid FireWeapon(){ /* Implementation */ }", "good_code": "UFUNCTION(BlueprintCallable)\nvoid FireWeapon();"}
{"bad_code": "int32 AMyActor::CalculateScore(int32 BaseScore,int32 Multiplier){ return BaseScore*Multiplier; }", "good_code": "int32 AMyActor::CalculateScore(int32 BaseScore, int32 Multiplier)\n{\n    return BaseScore * Multiplier;\n}"}
{"bad_code": "#include \"EngineMinimal.h\"\n#include \"MyGameCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nclass UMyComponent: public UActorComponent{\npublic:\n    UMyComponent(){}\n\n    void Initialize() override{\n        Super::Initialize();\n    }\nprivate:\nfloat MovementSpeed; int32 Health;\n};", "good_code": "#include \"EngineMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyGameCharacter.h\"\n\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    virtual void Initialize() override;\n\nprivate:\n    float MovementSpeed;\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor{\npublic:\n    AMyActor();\n    void StartFunction() { }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void StartFunction();\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Stats\") int32 m_Score;\nUPROPERTY(BlueprintReadOnly, Category=\"Stats\") float m_Health;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat m_Health;\n\nUPROPERTY(EditAnywhere, Category = \"Stats\")\nint32 m_Score;"}
{"bad_code": "if(bIsValid){DoSomething();}", "good_code": "if (bIsValid)\n{\n    DoSomething();\n}"}
{"bad_code": "void Update(float DeltaTime){\n    int32 Result=A+B;\n    Process(Result);\n}", "good_code": "void Update(float DeltaTime)\n{\n    int32 Result = A + B;\n\n    Process(Result);\n}"}
{"bad_code": "UCLASS()\nclass AExampleActor: public AActor{\npublic:\n    AExampleActor(){}\n    void ExampleFunction(){}\nprivate:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AExampleActor : public AActor\n{\npublic:\n    AExampleActor();\n\n    void ExampleFunction();\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere) bool bIsEnabled; UPROPERTY(EditAnywhere) int32 m_Level;", "good_code": "UPROPERTY(VisibleAnywhere)\nbool bIsEnabled;\n\nUPROPERTY(EditAnywhere)\nint32 m_Level;"}
{"bad_code": "void ProcessData(){auto Data=GetData();Perform(Data);}", "good_code": "void ProcessData()\n{\n    auto Data = GetData();\n    \n    Perform(Data);\n}"}
{"bad_code": "class UAnotherComponent: public UObject{public: UAnotherComponent(){} void Execute(){} private: int32 Count;};", "good_code": "class UAnotherComponent : public UObject\n{\npublic:\n    UAnotherComponent();\n\n    void Execute();\n\nprivate:\n    int32 Count;\n};"}
{"bad_code": "void Calculate(){int32 Result=Value1+Value2;ReturnResult(Result);}", "good_code": "void Calculate()\n{\n    int32 Result = Value1 + Value2;\n\n    ReturnResult(Result);\n}"}
{"bad_code": "#include \"MyGame.h\"\n#include \"Engine/World.h\"\n\nclass AMyActor : public AActor {\npublic:\n    AMyActor() { Initialize(); }\n\n    void DoSomething() { Action(); }\nprivate:\n    void Initialize() { Health=100; }\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"MyGame.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void DoSomething();\n\nprivate:\n    void Initialize();\n\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n{\n    Initialize();\n}\n\nvoid AMyActor::DoSomething()\n{\n    Action();\n}\n\nvoid AMyActor::Initialize()\n{\n    Health = 100;\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase {\n    GENERATED_BODY()\n\n    UPROPERTY(VisibleAnywhere) UStaticMeshComponent* MeshComp;\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(VisibleAnywhere)\n    UStaticMeshComponent* MeshComp;\n};"}
{"bad_code": "void Jump(){ if(bCanJump) DoJump(); else Stop(); }", "good_code": "void Jump()\n{\n    if (bCanJump)\n    {\n        DoJump();\n    }\n    else\n    {\n        Stop();\n    }\n}"}
{"bad_code": "bool IsCharacterAlive(){ return bIsAlive; }", "good_code": "bool IsCharacterAlive()\n{\n    return bIsAlive;\n}"}
{"bad_code": "int32 Sum(int32 A,int32 B){return A+B;}", "good_code": "int32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) int32 Health, Armor;", "good_code": "UPROPERTY(BlueprintReadOnly)\nint32 Health;\n\nUPROPERTY(BlueprintReadOnly)\nint32 Armor;"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n\nAMyCharacter::AMyCharacter() : Health(100), Stamina(50) {}", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyCharacter.h\"\n\nAMyCharacter::AMyCharacter()\n    : Health(100)\n    , Stamina(50)\n{\n}"}
{"bad_code": "void AMyActor::BeginPlay() {\n    Super::BeginPlay(); Initialize();\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n    Initialize();\n}"}
{"bad_code": "UENUM() enum class ECharacterState{Idle, Walking, Running};", "good_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Walking,\n    Running\n};"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "#include \"MyGame/MyGameCharacter.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyGameComponent.h\"\n#include \"Kismet/GameplayStatics.h\"\n#include \"CoreMinimal.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Kismet/GameplayStatics.h\"\n\n#include \"MyGame/MyGameCharacter.h\"\n#include \"MyGame/MyGameComponent.h\""}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    AMyCharacter() : bIsAlive(true), Health(100) {}\n\n    void TakeDamage(int32 Amount) { Health -= Amount; }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void TakeDamage(int32 Amount);\n\nprivate:\n    bool bIsAlive;\n    int32 Health;\n};\n\nAMyCharacter::AMyCharacter()\n    : bIsAlive(true)\n    , Health(100)\n{\n}\n\nvoid AMyCharacter::TakeDamage(int32 Amount)\n{\n    Health -= Amount;\n}"}
{"bad_code": "void Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    ProcessMovement(); PerformAction();\n}", "good_code": "void Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    ProcessMovement();\n    PerformAction();\n}"}
{"bad_code": "UPROPERTY(EditAnywhere)\nfloat Health, Armor;", "good_code": "UPROPERTY(EditAnywhere)\nfloat Health;\n\nUPROPERTY(EditAnywhere)\nfloat Armor;"}
{"bad_code": "if (bIsActive) DoSomething();", "good_code": "if (bIsActive)\n{\n    DoSomething();\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(VisibleAnywhere)\n    float Speed; float Power;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(VisibleAnywhere)\n    float Speed;\n\n    UPROPERTY(VisibleAnywhere)\n    float Power;\n};"}
{"bad_code": "int32 Add(int32 A, int32 B){return A+B;}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\npublic:\n    void Initialize() { int32 SomeValue = 0; SomeValue++; }\n};", "good_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\npublic:\n    void Initialize();\n};\n\nvoid AMyComponent::Initialize()\n{\n    int32 SomeValue = 0;\n    SomeValue++;\n}"}
{"bad_code": "bool bIsRunning = true;\nint32 Velocity = 100; if(bIsRunning){ Velocity += 10; }", "good_code": "bool bIsRunning = true;\nint32 Velocity = 100;\n\nif (bIsRunning)\n{\n    Velocity += 10;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category = \"Action\") void StartAction();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Action\")\nvoid StartAction();"}
{"bad_code": "class MyActor : public AActor {\npublic:\n    MyActor() {}\n    void BeginPlay() override {}\nprivate:\n    int32 Health, Speed;\n};", "good_code": "UCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n    int32 Speed;\n};"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite) float Health;\nUPROPERTY(BlueprintReadWrite) float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Health\")\nfloat Health;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"PlayerController.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameMode.h\"\n#include \"PlayerController.h\""}
{"bad_code": "void MyFunction(){\n    if(a>b){ DoSomething(); }\n}", "good_code": "void MyFunction()\n{\n    if (a > b)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    void Jump() {\n        // Jump logic\n    }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void Jump()\n    {\n        // Jump logic\n    }\n};"}
{"bad_code": "bool bIsRunning; int32 Speed;", "good_code": "bool bIsRunning;\n\nint32 Speed;"}
{"bad_code": "UENUM()\nenum class EGameState { Playing, Paused, GameOver };", "good_code": "UENUM()\nenum class EGameState\n{\n    Playing,\n    Paused,\n    GameOver\n};"}
{"bad_code": "void Tick(float DeltaTime); virtual void BeginPlay() override;", "good_code": "virtual void BeginPlay() override;\n\nvoid Tick(float DeltaTime);"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {\n        Health = 100;\n    }\nprotected:\n    void BeginPlay() override;\n\nprivate:\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprotected:\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n{\n    Health = 100;\n}"}
{"bad_code": "#include \"MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent {\n    GENERATED_BODY()\npublic:\n    UMyComponent();\n    void Activate() { bIsActive = true; }\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    void Activate();\n\nprivate:\n    bool bIsActive;\n};\n\nUMyComponent::UMyComponent()\n{\n    bIsActive = false;\n}\n\nvoid UMyComponent::Activate()\n{\n    bIsActive = true;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Stats\") float Health, Stamina;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat Health;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat Stamina;"}
{"bad_code": "int32 Sum(int32 A, int32 B){return A+B;}", "good_code": "int32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "#include \"MyGameInstance.h\"\n#include \"Engine/Engine.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance {\npublic:\n    virtual void Init() override;\n\nprivate:\n    void LoadData();\n};", "good_code": "#include \"Engine/Engine.h\"\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance\n{\npublic:\n    virtual void Init() override;\n\nprivate:\n    void LoadData();\n};"}
{"bad_code": "UENUM()\nenum class EWeaponType : uint8 { Sword, Bow, Gun };", "good_code": "UENUM()\nenum class EWeaponType : uint8\n{\n    Sword,\n    Bow,\n    Gun\n};"}
{"bad_code": "if (bIsReady) DoSomething();\nelse DoSomethingElse();", "good_code": "if (bIsReady)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "void SomeFunction(){int32 A=10;int32 B=20;int32 Result=A+B;}", "good_code": "void SomeFunction()\n{\n    int32 A = 10;\n    int32 B = 20;\n    int32 Result = A + B;\n}"}
{"bad_code": "UPROPERTY(Category = \"Settings\", EditAnywhere, BlueprintReadWrite) float SpeedMultiplier;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Settings\")\nfloat SpeedMultiplier;"}
{"bad_code": "void MoveCharacter(){if (bCanMove){Position+=Speed;}}", "good_code": "void MoveCharacter()\n{\n    if (bCanMove)\n    {\n        Position += Speed;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter{\npublic:\n    AMyCharacter(){}\n    void BeginPlay() override;\n    void MoveToTarget();void Attack();\nprotected:\nint32 Health,Stamina;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void MoveToTarget();\n    \n    void Attack();\n\nprotected:\n    int32 Health;\n\n    int32 Stamina;\n};"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Control\")void Jump();\nprivate:\nfloat JumpHeight;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Control\")\n    void Jump();\n\nprivate:\n    float JumpHeight;\n};"}
{"bad_code": "UENUM()\nenum EPlayerState { Idle, Running, Jumping };\n\nclass APlayerController : public AActor\n{\n    UPROPERTY(EditAnywhere)\n    bool isPlayerActive;\n};", "good_code": "UENUM()\nenum EPlayerState\n{\n    Idle,\n    Running,\n    Jumping\n};\n\nclass APlayerController : public AActor\n{\n    UPROPERTY(EditAnywhere)\n    bool bIsPlayerActive;\n};"}
{"bad_code": "UCLASS()\nclass AEnemy : public ACharacter{\nprivate:float Health;bool isAggressive;\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\nprivate:\n    float Health;\n\n    bool bIsAggressive;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Tick(float DeltaTime)\n    {\n        int A=5;int B=10;int C=A+B;\n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Tick(float DeltaTime)\n    {\n        int A = 5;\n        int B = 10;\n        int C = A + B;\n    }\n};"}
{"bad_code": "UPROPERTY()\nbool CanAttack;UPROPERTY()\nint32 AmmoCount;", "good_code": "UPROPERTY()\nbool bCanAttack;\n\nUPROPERTY()\nint32 AmmoCount;"}
{"bad_code": "class AWeapon : public AActor\n{\npublic:\n    void Fire();void Reload();\n};", "good_code": "class AWeapon : public AActor\n{\npublic:\n    void Fire();\n\n    void Reload();\n};"}
{"bad_code": "UCLASS()\nclass UMyHUD : public UUserWidget\n{\n    UFUNCTION(BlueprintCallable, Category = \"UI\")void UpdateHealthBar();\n};", "good_code": "UCLASS()\nclass UMyHUD : public UUserWidget\n{\n    UFUNCTION(BlueprintCallable, Category = \"UI\")\n    void UpdateHealthBar();\n};"}
{"bad_code": "UCLASS()\nclass AGameModeBase : public AGameMode\n{\n    AGameModeBase()\n    {\n        DefaultPawnClass = APawn::StaticClass();\n    }\n};", "good_code": "UCLASS()\nclass AGameModeBase : public AGameMode\n{\npublic:\n    AGameModeBase()\n    {\n        DefaultPawnClass = APawn::StaticClass();\n    }\n};"}
{"bad_code": "UCLASS()\nclass ACamera : public AActor\n{\n    void MoveCamera(float DeltaTime)\n    { /* logic here */ }\n    void ZoomCamera();\n};", "good_code": "UCLASS()\nclass ACamera : public AActor\n{\n    void MoveCamera(float DeltaTime);\n\n    void ZoomCamera();\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {};\n\n    virtual void BeginPlay() override {\n        Super::BeginPlay();\n    };\n\nprivate:\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\") float MaxHealth;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\")\n    float MaxHealth;\n};"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"Components/InputComponent.h\"\n#include \"GameFramework/Character.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() {\n        Speed = 600.0f; JumpHeight = 200.0f;\n    }\n\n    void Jump() { /* Jump logic */ }\n    void MoveForward(float Value) { /* Move forward logic */ }\n\nprivate:\n    float Speed;\n    float JumpHeight;\n};", "good_code": "#include \"Components/InputComponent.h\"\n#include \"GameFramework/Character.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Jump();\n\n    void MoveForward(float Value);\n\nprivate:\n    float Speed;\n    float JumpHeight;\n};"}
{"bad_code": "UENUM()\nenum class EWeaponType : uint8 { Pistol, Rifle, Shotgun };\n\nUCLASS()\nclass UWeapon : public UObject {\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Weapon\")\n    void Fire() { /* Fire logic */ }\n};", "good_code": "UENUM()\nenum class EWeaponType : uint8\n{\n    Pistol,\n    Rifle,\n    Shotgun\n};\n\nUCLASS()\nclass UWeapon : public UObject\n{\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Weapon\")\n    void Fire();\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProjectile.h\"\n\nUCLASS()\nclass AMyProjectile : public AActor {\n    GENERATED_BODY()\n\npublic:\n    AMyProjectile() : CollisionRadius(15.0f), Damage(10) {}\n\nprivate:\n    UPROPERTY(EditAnywhere, Category = \"Collision\")\n    float CollisionRadius;\n\n    UPROPERTY(EditDefaultsOnly, Category = \"Damage\")\n    int32 Damage;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyProjectile.h\"\n\nUCLASS()\nclass AMyProjectile : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyProjectile();\n\nprivate:\n    UPROPERTY(EditAnywhere, Category = \"Collision\")\n    float CollisionRadius;\n\n    UPROPERTY(EditDefaultsOnly, Category = \"Damage\")\n    int32 Damage;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Health\") float Health;\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Health\") float MaxHealth;\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Health\") bool bIsAlive;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Health\")\nfloat Health;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Health\")\nbool bIsAlive;"}
{"bad_code": "UCLASS()\nclass AEnemy : public ACharacter {\npublic:\n    AEnemy();\n    void Attack() {\n        // Attack logic\n    };\n\n    void MoveToPlayer() {\n        // Move logic\n    }\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    AEnemy();\n\n    void Attack();\n\n    void MoveToPlayer();\n};"}
{"bad_code": "UPROPERTY(EditDefaultsOnly)\nint32 Points;\n\nUFUNCTION(BlueprintCallable, Category = \"Game\")\nvoid ResetGame() {\n    // Reset logic\n}", "good_code": "UPROPERTY(EditDefaultsOnly)\nint32 Points;\n\nUFUNCTION(BlueprintCallable, Category = \"Game\")\nvoid ResetGame();"}
{"bad_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyItem.h\"\n\nUCLASS()\nclass AMyItem : public AActor {\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Item\")\n    void UseItem() { /* Use item logic */ }\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyItem.h\"\n\nUCLASS()\nclass AMyItem : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Item\")\n    void UseItem();\n};"}
{"bad_code": "#include \"Components/AudioComponent.h\"\n#include \"Sound/SoundCue.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MySoundEmitter.h\"\n\nUCLASS()\nclass AMySoundEmitter : public AActor {\n    GENERATED_BODY()\n\npublic:\n    void PlaySound() { /* Play sound logic */ }\n};", "good_code": "#include \"Components/AudioComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Sound/SoundCue.h\"\n\n#include \"MySoundEmitter.h\"\n\nUCLASS()\nclass AMySoundEmitter : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void PlaySound();\n};"}
{"bad_code": "#include \"GameFramework/PlayerController.h\"\n#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController {\n    GENERATED_BODY()\n\npublic:\n    void SetupInputComponent() override {\n        Super::SetupInputComponent();\n    }\n};", "good_code": "#include \"GameFramework/PlayerController.h\"\n\n#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n    void SetupInputComponent() override;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyCustomClass.h\"\n#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass MYPROJECT_API AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void BeginPlay() override {\n        Super::BeginPlay();\n    }\nprivate:\n    int32 Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyCustomClass.h\"\n\nUCLASS()\nclass MYPROJECT_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(Category = \"Health\", BlueprintReadOnly)\nfloat MaxHealth, MinHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MinHealth;"}
{"bad_code": "void SetVisible(bool bVisible) { if (bVisible) SetActorHiddenInGame(false); else SetActorHiddenInGame(true); }", "good_code": "void SetVisible(bool bVisible)\n{\n    if (bVisible)\n    {\n        SetActorHiddenInGame(false);\n    }\n    else\n    {\n        SetActorHiddenInGame(true);\n    }\n}"}
{"bad_code": "UCLASS()\nclass MYPROJECT_API AMyCharacter : public ACharacter {\n    UFUNCTION(BlueprintCallable)\n    void Jump();\n};", "good_code": "UCLASS()\nclass MYPROJECT_API AMyCharacter : public ACharacter\n{\npublic:\n    UFUNCTION(BlueprintCallable)\n    void Jump();\n};"}
{"bad_code": "int32 CalculateScore(bool bIsWinner, int32 baseScore) { return bIsWinner ? baseScore * 2 : baseScore; }", "good_code": "int32 CalculateScore(bool bIsWinner, int32 BaseScore)\n{\n    return bIsWinner ? BaseScore * 2 : BaseScore;\n}"}
{"bad_code": "if(bIsActive){Deactivate();}", "good_code": "if (bIsActive)\n{\n    Deactivate();\n}"}
{"bad_code": "void ResetState(); // Declaration in header\n\nvoid AMyActor::ResetState() // Definition in source\n{ \n    Health = 100; \n}", "good_code": "void ResetState(); // Declaration in header\n\nvoid AMyActor::ResetState()\n{\n    Health = 100;\n}"}
{"bad_code": "int32 Sum = A+B;", "good_code": "int32 Sum = A + B;"}
{"bad_code": "UCLASS()\nclass AAnotherActor : public AActor {\n    GENERATED_BODY()\n    void Tick(float DeltaTime) override;\n};", "good_code": "UCLASS()\nclass AAnotherActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "public:\nint32 GetHealth() const { return Health; }", "good_code": "public:\n    int32 GetHealth() const\n    {\n        return Health;\n    }"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter {\npublic:\nAMyCharacter(){}\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n    {\n    }\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "int32 Sum(int32 A,int32 B){\nreturn A+B;}", "good_code": "int32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UPROPERTY() int32 Health, MaxHealth;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 MaxHealth;"}
{"bad_code": "for (int32 i=0;i<10;++i) DoSomething();", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "UFUNCTION()\nvoid Jump() {\n  // Implementation\n}", "good_code": "UFUNCTION()\nvoid Jump()\n{\n    // Implementation\n}"}
{"bad_code": "public: AMyActor();\nvoid BeginPlay()override;", "good_code": "public:\n    AMyActor();\n\n    virtual void BeginPlay() override;"}
{"bad_code": "if(IsValid(Target)){MoveToTarget();}", "good_code": "if (IsValid(Target))\n{\n    MoveToTarget();\n}"}
{"bad_code": "bool bIsVisible=true;", "good_code": "bool bIsVisible = true;"}
{"bad_code": "int32 a,b,c;\na=10;b=20;c=a+b;", "good_code": "int32 a;\nint32 b;\nint32 c;\n\na = 10;\nb = 20;\nc = a + b;"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\n    public: AMyActor(){};\n\n    virtual void BeginPlay() override{};\n\n    int32 Health; void ResetState(){}; \n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    void ResetState();\n\n    int32 Health;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyCharacter.h\"\n#include \"Engine/Engine.h\"", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyCharacter.h\""}
{"bad_code": "UPROPERTY(Category=\"Health\", BlueprintReadOnly) float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "int32 A = 5, B = 10, C = 15;\nint32 Result=A+B+C;", "good_code": "int32 A = 5;\nint32 B = 10;\nint32 C = 15;\n\nint32 Result = A + B + C;"}
{"bad_code": "UENUM() enum class EMyEnum { ValueOne, ValueTwo, ValueThree };", "good_code": "UENUM()\nenum class EMyEnum\n{\n    ValueOne,\n    ValueTwo,\n    ValueThree\n};"}
{"bad_code": "bool bIsActive, bIsVisible;", "good_code": "bool bIsActive;\nbool bIsVisible;"}
{"bad_code": "void MyFunction() {\n    int32 X=0; int32 Y=5;\n    if(X<Y) X+=Y;\n}", "good_code": "void MyFunction()\n{\n    int32 X = 0;\n    int32 Y = 5;\n\n    if (X < Y)\n    {\n        X += Y;\n    }\n}"}
{"bad_code": "USTRUCT() struct FMyStruct { int32 Value; };", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 Value;\n};"}
{"bad_code": "public: void Activate(); protected: void ResetState(); private: int32 Health;", "good_code": "public:\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;"}
{"bad_code": "class MyCharacter : public ACharacter {\npublic:\n\tMyCharacter() { bIsAlive = true; }\n\n\tbool IsAlive() { return bIsAlive; }\nprivate:\n\tbool bIsAlive;\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    bool IsAlive() const;\n\nprivate:\n    bool bIsAlive;\n};\n\nAMyCharacter::AMyCharacter()\n{\n    bIsAlive = true;\n}\n\nbool AMyCharacter::IsAlive() const\n{\n    return bIsAlive;\n}"}
{"bad_code": "#include \"Engine/Engine.h\"\n#include \"MyProject/MyHeader.h\"\n#include \"CoreMinimal.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Engine.h\"\n\n#include \"MyProject/MyHeader.h\""}
{"bad_code": "UCLASS() class MyActor : public AActor\n{\npublic:\n\tMyActor();\n\tvirtual void BeginPlay() override;\n\tvoid DoSomething() { if (bIsActive) { DoAction(); } }\nprivate:\n\tbool bIsActive;\n\tvoid DoAction();\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void DoSomething();\n\nprivate:\n    bool bIsActive;\n\n    void DoAction();\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n}\n\nvoid AMyActor::DoSomething()\n{\n    if (bIsActive)\n    {\n        DoAction();\n    }\n}\n\nvoid AMyActor::DoAction()\n{\n}"}
{"bad_code": "void MyFunction() {\n\tint A=5, B=10; int C=A+B; if (C > 10) { C -= 2; } else { C += 2; }\n}", "good_code": "void MyFunction()\n{\n    int A = 5;\n    int B = 10;\n    int C = A + B;\n\n    if (C > 10)\n    {\n        C -= 2;\n    }\n    else\n    {\n        C += 2;\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) int32 Score;\nUPROPERTY() bool IsVisible;", "good_code": "UPROPERTY(BlueprintReadOnly)\nint32 Score;\n\nUPROPERTY()\nbool bIsVisible;"}
{"bad_code": "UCLASS()\nclass MyComponent : public UActorComponent {\nprotected:\n\tvoid Init() { }\n    void Shutdown() { }\npublic:\n\tMyComponent() { }\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\nprotected:\n    void Init();\n\n    void Shutdown();\n};\n\nUMyComponent::UMyComponent()\n{\n}\n\nvoid UMyComponent::Init()\n{\n}\n\nvoid UMyComponent::Shutdown()\n{\n}"}
{"bad_code": "bool CheckCondition(){\n    if(Condition) return true; return false;\n}", "good_code": "bool CheckCondition()\n{\n    if (Condition)\n    {\n        return true;\n    }\n\n    return false;\n}"}
{"bad_code": "void SetValues(int A, int B, int C) { this->A = A;this->B = B;this->C = C; }", "good_code": "void SetValues(int A, int B, int C)\n{\n    this->A = A;\n    this->B = B;\n    this->C = C;\n}"}
{"bad_code": "UPROPERTY()\nint32 Health, Stamina;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Stamina;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Reset();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Reset();"}
{"bad_code": "#include \"MyGameCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyGame.h\"\n#include \"Components/SkeletalMeshComponent.h\"\n#include \"GameFramework/PlayerController.h\"\n\nUCLASS()\nclass AMyGameCharacter : public ACharacter\n{\npublic:\n    AMyGameCharacter()\n    {\n        Health = 100;\n        bIsAlive = true;\n    }\n    void Tick(float DeltaTime) override\n    {\n        Super::Tick(DeltaTime);\n        if(bIsAlive) { MoveForward(); }\n    }\n    void MoveForward()\n    {\n        AddMovementInput(GetActorForwardVector());\n    }\nprivate:\n    bool bIsAlive;\n    int32 Health;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n#include \"Engine/World.h\"\n#include \"Components/SkeletalMeshComponent.h\"\n\n#include \"MyGame.h\"\n#include \"MyGameCharacter.h\"\n\nUCLASS()\nclass AMyGameCharacter : public ACharacter\n{\npublic:\n    AMyGameCharacter();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    void MoveForward();\n\n    bool bIsAlive;\n    int32 Health;\n};\n\nAMyGameCharacter::AMyGameCharacter()\n{\n    Health = 100;\n    bIsAlive = true;\n}\n\nvoid AMyGameCharacter::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bIsAlive)\n    {\n        MoveForward();\n    }\n}\n\nvoid AMyGameCharacter::MoveForward()\n{\n    AddMovementInput(GetActorForwardVector());\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerData\n{\n    GENERATED_BODY()\n\n    int32 Score; float Health; bool bIsActive;\n};", "good_code": "USTRUCT()\nstruct FPlayerData\n{\n    GENERATED_BODY()\n\n    int32 Score;\n    float Health;\n    bool bIsActive;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category=\"Movement\") float JumpHeight;\nUPROPERTY(BlueprintReadWrite, Category=\"Movement\") float Speed;\nUPROPERTY(BlueprintReadWrite, Category=\"State\") bool bIsJumping;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nfloat JumpHeight;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(BlueprintReadWrite, Category = \"State\")\nbool bIsJumping;"}
{"bad_code": "void AMyActor::Activate(bool bActivate) { if(bActivate) { ActivateLogic(); } else { DeactivateLogic(); } }", "good_code": "void AMyActor::Activate(bool bActivate)\n{\n    if (bActivate)\n    {\n        ActivateLogic();\n    }\n    else\n    {\n        DeactivateLogic();\n    }\n}"}
{"bad_code": "class AEnemy : public AActor\n{\n    AEnemy() { Health = 50; }\n    void TakeDamage(int32 Damage) { Health -= Damage; }\n    int32 Health;\n};", "good_code": "class AEnemy : public AActor\n{\npublic:\n    AEnemy();\n\nprivate:\n    void TakeDamage(int32 Damage);\n\n    int32 Health;\n};\n\nAEnemy::AEnemy()\n{\n    Health = 50;\n}\n\nvoid AEnemy::TakeDamage(int32 Damage)\n{\n    Health -= Damage;\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    void InitializeComponent() override { Super::InitializeComponent(); bIsInitialized = true; }\n    bool bIsInitialized;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    virtual void InitializeComponent() override;\n\nprivate:\n    bool bIsInitialized;\n};\n\nvoid UMyComponent::InitializeComponent()\n{\n    Super::InitializeComponent();\n    bIsInitialized = true;\n}"}
{"bad_code": "bool CheckCollision(int A, int B){return A > B;}", "good_code": "bool CheckCollision(int A, int B)\n{\n    return A > B;\n}"}
{"bad_code": "void UpdatePosition(float X, float Y, float Z) { Position.X = X; Position.Y = Y; Position.Z = Z; }", "good_code": "void UpdatePosition(float X, float Y, float Z)\n{\n    Position.X = X;\n    Position.Y = Y;\n    Position.Z = Z;\n}"}
{"bad_code": "int32 CalculateScore(int32 Kills, int32 Deaths, int32 Assists) { return Kills * 100 - Deaths * 50 + Assists * 25; }", "good_code": "int32 CalculateScore(int32 Kills, int32 Deaths, int32 Assists)\n{\n    return Kills * 100 - Deaths * 50 + Assists * 25;\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Combat\") bool bCanAttack, bIsDefending;", "good_code": "UPROPERTY(EditAnywhere, Category = \"Combat\")\nbool bCanAttack;\n\nUPROPERTY(EditAnywhere, Category = \"Combat\")\nbool bIsDefending;"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyPlayerController.h\"\nclass AMyGameMode : public AGameModeBase {\npublic:\n    AMyGameMode() {}\n\n    void StartPlay() override;\nvoid EndPlay(const EEndPlayReason::Type EndPlayReason) override;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameMode.h\"\n#include \"MyPlayerController.h\"\n\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode();\n\n    virtual void StartPlay() override;\n\n    virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category=\"Movement\") float Speed;\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category=\"Health\") float Health;\npublic:\nAMyCharacter();\n\nvoid Jump() { if(bCanJump) { /* Jump logic */ } }\nprivate:\nbool bCanJump;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Jump();\n\nprotected:\n\nprivate:\n    UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Movement\")\n    float Speed;\n\n    UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Health\")\n    float Health;\n\n    bool bCanJump;\n};\n\nvoid AMyCharacter::Jump()\n{\n    if (bCanJump)\n    {\n        // Jump logic\n    }\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyHUD.h\"\n#include \"Engine/Canvas.h\"\n#include \"GameFramework/HUD.h\"\n#include \"MyGameMode.h\"\nclass AMyHUD : public AHUD {\npublic:\nvoid DrawHUD() override;\nvoid BeginPlay() override;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Canvas.h\"\n#include \"GameFramework/HUD.h\"\n\n#include \"MyGameMode.h\"\n#include \"MyHUD.h\"\n\nclass AMyHUD : public AHUD\n{\npublic:\n    virtual void BeginPlay() override;\n\n    virtual void DrawHUD() override;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, Category = \"Damage\")\nint32 DamageAmount, DamageRadius;\nvoid ApplyDamage() { int32 TotalDamage=DamageAmount+DamageRadius; }", "good_code": "UPROPERTY(EditAnywhere, Category = \"Damage\")\nint32 DamageAmount;\n\nUPROPERTY(EditAnywhere, Category = \"Damage\")\nint32 DamageRadius;\n\nvoid ApplyDamage()\n{\n    int32 TotalDamage = DamageAmount + DamageRadius;\n}"}
{"bad_code": "UCLASS()\nclass AMyPawn : public APawn {\nUPROPERTY(VisibleAnywhere) int32 Health;\nUPROPERTY(VisibleAnywhere) int32 Armor;\npublic:\nAMyPawn() : Health(100), Armor(50) {}\nvoid TakeDamage(int32 Amount) { Health -= Amount; }\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\n    void TakeDamage(int32 Amount);\n\nprotected:\n\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    int32 Health;\n\n    UPROPERTY(VisibleAnywhere)\n    int32 Armor;\n};\n\nAMyPawn::AMyPawn()\n    : Health(100)\n    , Armor(50)\n{\n}\n\nvoid AMyPawn::TakeDamage(int32 Amount)\n{\n    Health -= Amount;\n}"}
{"bad_code": "void UpdateScore(int32 NewScore) { Score = NewScore; } void ResetScore() { Score = 0; }", "good_code": "void UpdateScore(int32 NewScore)\n{\n    Score = NewScore;\n}\n\nvoid ResetScore()\n{\n    Score = 0;\n}"}
{"bad_code": "UCLASS()\nclass AMyController : public APlayerController {\npublic:\nvoid SetupInputComponent() override { Super::SetupInputComponent(); InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyController::StartJump); }\nprivate:\nvoid StartJump();\n};", "good_code": "UCLASS()\nclass AMyController : public APlayerController\n{\npublic:\n    virtual void SetupInputComponent() override;\n\nprotected:\n\nprivate:\n    void StartJump();\n};\n\nvoid AMyController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyController::StartJump);\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category=\"Weapon\") float FireRate;\nUPROPERTY(BlueprintReadWrite, Category=\"Weapon\") float Damage;\nvoid Fire() { /* Fire logic */ }", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Weapon\")\nfloat FireRate;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Weapon\")\nfloat Damage;\n\nvoid Fire()\n{\n    // Fire logic\n}"}
{"bad_code": "UCLASS()\nclass AMyObject : public UObject {\npublic:\nAMyObject() : m_Value(0) {}\nvoid SetValue(int32 InValue) { m_Value = InValue; }\nprivate:\nint32 m_Value;\n};", "good_code": "UCLASS()\nclass AMyObject : public UObject\n{\npublic:\n    AMyObject();\n\n    void SetValue(int32 InValue);\n\nprotected:\n\nprivate:\n    int32 m_Value;\n};\n\nAMyObject::AMyObject()\n    : m_Value(0)\n{\n}\n\nvoid AMyObject::SetValue(int32 InValue)\n{\n    m_Value = InValue;\n}"}
{"bad_code": "bool bIsRunning; bool bIsJumping;\nif(bIsRunning && bIsJumping) { /* Do something */ }", "good_code": "bool bIsRunning;\nbool bIsJumping;\n\nif (bIsRunning && bIsJumping)\n{\n    // Do something\n}"}
{"bad_code": "UCLASS()\nclass AExampleActor : public AActor {\npublic:\n    AExampleActor(){}\n\n    virtual void BeginPlay() override;\n\n    void Activate(){}\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health; int32 Stamina;\n};", "good_code": "UCLASS()\nclass AExampleActor : public AActor\n{\npublic:\n    AExampleActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere, Category=\"Movement\") float Speed;\nUPROPERTY(BlueprintReadOnly, Category=\"Movement\") bool bIsRunning;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nbool bIsRunning;\n\nUPROPERTY(VisibleAnywhere, Category = \"Movement\")\nfloat Speed;"}
{"bad_code": "#include \"MyProject/MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyProject/MyActor.h\""}
{"bad_code": "int32 add(int32 a, int32 b){return a+b;}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UCLASS()\nclass ATestActor : public AActor\n{\npublic:\n    ATestActor();\n\nprotected:\n    void BeginPlay() override;\n\n    void ResetState();\n\nprivate:\n    bool m_IsActive;\n};", "good_code": "UCLASS()\nclass ATestActor : public AActor\n{\npublic:\n    ATestActor();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void ResetState();\n\nprivate:\n    bool m_IsActive;\n};"}
{"bad_code": "void FunctionA(){int32 Var1=10;int32 Var2=20;if(Var1<Var2){Var1=Var2;}}", "good_code": "void FunctionA()\n{\n    int32 Var1 = 10;\n    int32 Var2 = 20;\n\n    if (Var1 < Var2)\n    {\n        Var1 = Var2;\n    }\n}"}
{"bad_code": "for(int i=0;i<10;i++) {DoSomething();}", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "void ProcessData(){if(bCondition){Execute();}else{HandleError();}}", "good_code": "void ProcessData()\n{\n    if (bCondition)\n    {\n        Execute();\n    }\n    else\n    {\n        HandleError();\n    }\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Attributes\") float Health, Stamina;", "good_code": "UPROPERTY(EditAnywhere, Category = \"Attributes\")\nfloat Health;\n\nUPROPERTY(EditAnywhere, Category = \"Attributes\")\nfloat Stamina;"}
{"bad_code": "void AExampleActor::BeginPlay() \n{\n    Super::BeginPlay();\n    Initialize();\n}", "good_code": "void AExampleActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    Initialize();\n}"}
{"bad_code": "UCLASS()\nclass AExampleActor : public AActor {\npublic: AExampleActor() {}\n\nprivate:\n    bool bIsActive, bIsVisible;\n};", "good_code": "UCLASS()\nclass AExampleActor : public AActor\n{\npublic:\n    AExampleActor();\n\nprivate:\n    bool bIsActive;\n    bool bIsVisible;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyProjectCharacter.h\"\n#include \"Engine/World.h\"\n\nclass UMyComponent\n{\npublic:\n    void Initialize() { /* Implementation */ }\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyProjectCharacter.h\"\n\nclass UMyComponent\n{\npublic:\n    void Initialize()\n    {\n        // Implementation\n    }\n};"}
{"bad_code": "void ProcessInput()\n{\n    int32 Value=5, Result=10+Value; if(Value>0){Result*=2;}\n}", "good_code": "void ProcessInput()\n{\n    int32 Value = 5;\n    int32 Result = 10 + Value;\n\n    if (Value > 0)\n    {\n        Result *= 2;\n    }\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 MaxHealth; \n\nUFUNCTION(BlueprintCallable) void Heal();", "good_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Health\")\nint32 MaxHealth;\n\nUFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Heal();"}
{"bad_code": "if(bCondition) { DoSomething(); } \nelse { DoSomethingElse(); }", "good_code": "if (bCondition)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "UCLASS()\nclass USomeClass : public UObject {\npublic: void SomeFunction() {}\n\nprivate: int32 Counter;\n};", "good_code": "UCLASS()\nclass USomeClass : public UObject\n{\npublic:\n    void SomeFunction();\n\nprivate:\n    int32 Counter;\n};"}
{"bad_code": "void CalculateValues()\n{\n    int32 A=10, B=20, C=A+B; A*=2; B+=5;\n}", "good_code": "void CalculateValues()\n{\n    int32 A = 10;\n    int32 B = 20;\n    int32 C = A + B;\n\n    A *= 2;\n    B += 5;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) bool bIsEnabled; \nbool bIsActive;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"State\")\nbool bIsEnabled;\n\nbool bIsActive;"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "USTRUCT()\nstruct FCharacterStats {\n    int32 Health; int32 Strength;\n};", "good_code": "USTRUCT()\nstruct FCharacterStats\n{\n    int32 Health;\n    int32 Strength;\n};"}
{"bad_code": "UCLASS()\nclass MyActor: public AActor {\npublic:\n    MyActor() {}\n\n    void BeginPlay() override {}\n\nprivate:\n    int32 health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "USTRUCT()\nstruct FMyStruct {\n    int32 Value1, Value2;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 Value1;\n    int32 Value2;\n};"}
{"bad_code": "UPROPERTY()\nint32 Score;\nUPROPERTY()\nbool IsVisible;", "good_code": "UPROPERTY()\nint32 Score;\n\nUPROPERTY()\nbool bIsVisible;"}
{"bad_code": "void SomeFunction(){ if(condition){ DoSomething(); } }", "good_code": "void SomeFunction()\n{\n    if (condition)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "#include \"MyProject.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject.h\"\n#include \"MyActor.h\""}
{"bad_code": "void Calculate()\n{\n    int32 a=5,b=10;\n    int32 result=a+b;\n}", "good_code": "void Calculate()\n{\n    int32 a = 5;\n    int32 b = 10;\n    int32 result = a + b;\n}"}
{"bad_code": "public:\nvoid MyFunction() {}\nprotected:\nvoid MyProtectedFunction() {}\nprivate:\nint32 MyVariable;", "good_code": "public:\n    void MyFunction();\n\nprotected:\n    void MyProtectedFunction();\n\nprivate:\n    int32 MyVariable;"}
{"bad_code": "void ProcessData()\n{\n    if (DataIsValid) { Process(); }\n    else { HandleError(); }\n}", "good_code": "void ProcessData()\n{\n    if (DataIsValid)\n    {\n        Process();\n    }\n    else\n    {\n        HandleError();\n    }\n}"}
{"bad_code": "UPROPERTY()\nfloat Speed;\nUPROPERTY()\nBlueprintReadOnly, Category = \"Movement\")\nfloat MaxSpeed;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat MaxSpeed;"}
{"bad_code": "protected:\nbool CheckCondition(){return condition;}", "good_code": "protected:\n    bool CheckCondition()\n    {\n        return condition;\n    }"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter {\npublic: AMyCharacter() { Health = 100; }\nprotected: virtual void BeginPlay() override;\nprivate: int Health;\n};", "good_code": "#include \"Engine/World.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprotected:\n    virtual void BeginPlay() override;\n\nprivate:\n    int Health;\n};\n\nAMyCharacter::AMyCharacter()\n{\n    Health = 100;\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{ \n    GENERATED_BODY() public: void Tick(float DeltaTime)\n    {\n        Super::Tick(DeltaTime); DoSomething();\n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    void DoSomething();\n};\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    DoSomething();\n}"}
{"bad_code": "USTRUCT()\nstruct FMyStruct{ int32 X, Y; };", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 X;\n    int32 Y;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\") float MaxHealth; float MinHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat MaxHealth;\n\nfloat MinHealth;"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "void DoSomething()\n{\n    int32 A=0,B=1;\n    if(A<B){ A=B; }\n}", "good_code": "void DoSomething()\n{\n    int32 A = 0;\n    int32 B = 1;\n\n    if (A < B)\n    {\n        A = B;\n    }\n}"}
{"bad_code": "public: AMyActor(); void Activate(); private: int Health;", "good_code": "public:\n    AMyActor();\n    void Activate();\n\nprivate:\n    int Health;"}
{"bad_code": "UENUM() enum class EMyEnum{ Value1, Value2 };", "good_code": "UENUM()\nenum class EMyEnum\n{\n    Value1,\n    Value2\n};"}
{"bad_code": "UPROPERTY() int32 Speed; int32 JumpHeight;", "good_code": "UPROPERTY()\nint32 Speed;\n\nint32 JumpHeight;"}
{"bad_code": "#define MY_CONSTANT 100#define ANOTHER_CONSTANT 200", "good_code": "#define MY_CONSTANT 100\n\n#define ANOTHER_CONSTANT 200"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor();\n    virtual void BeginPlay() override;\n    void Activate();\nprotected:\n    void ResetState();\nprivate:\n    int32 Health; };", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Health\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "#include \"MyGame.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n#include \"MyGame.h\""}
{"bad_code": "bool bIsVisible = true; if(bIsVisible){SetActorHiddenInGame(false);}", "good_code": "bool bIsVisible = true;\n\nif (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "int32 A = 5, B = 10, Result = A+B;", "good_code": "int32 A = 5;\nint32 B = 10;\nint32 Result = A + B;"}
{"bad_code": "void MyFunction()\n{\n    int32 X=10;int32 Y=20;\n    if(X<Y){DoSomething();}\n}", "good_code": "void MyFunction()\n{\n    int32 X = 10;\n    int32 Y = 20;\n\n    if (X < Y)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void FireWeapon();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid FireWeapon();"}
{"bad_code": "public: void Initialize(); protected: void Reset(); private: int32 Score;", "good_code": "public:\n    void Initialize();\n\nprotected:\n    void Reset();\n\nprivate:\n    int32 Score;"}
{"bad_code": "if (bIsRunning) {Stop();}\nelse {Start();}", "good_code": "if (bIsRunning)\n{\n    Stop();\n}\nelse\n{\n    Start();\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoWork();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoWork();\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Health\") float MaxHealth;\nint32 Health, Score, Lives;\nbool bIsVisible=false;\nif(bIsVisible){\nSetActorHiddenInGame(false);\n}", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nint32 Health;\nint32 Score;\nint32 Lives;\n\nbool bIsVisible = false;\n\nif (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor { void BeginPlay() override;};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void BeginPlay() override;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyGameMode.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameMode.h\""}
{"bad_code": "void SetVisibility(bool Visible) {bIsVisible=Visible;}", "good_code": "void SetVisibility(bool bVisible)\n{\n    bIsVisible = bVisible;\n}"}
{"bad_code": "UPROPERTY()int32 Score;\nUFUNCTION(BlueprintCallable) void ResetGame();\nUPROPERTY(BlueprintReadWrite) int32 Lives;", "good_code": "UPROPERTY(BlueprintReadWrite)\nint32 Lives;\n\nUPROPERTY()\nint32 Score;\n\nUFUNCTION(BlueprintCallable)\nvoid ResetGame();"}
{"bad_code": "class AMyCharacter : public ACharacter {public: AMyCharacter();};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n};"}
{"bad_code": "int32 CalculateScore(int32 Base, int32 Multiplier){return Base*Multiplier;}", "good_code": "int32 CalculateScore(int32 Base, int32 Multiplier)\n{\n    return Base * Multiplier;\n}"}
{"bad_code": "bool bIsAlive; float Health; float MaxHealth;", "good_code": "bool bIsAlive;\nfloat Health;\nfloat MaxHealth;"}
{"bad_code": "void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override {Super::SetupPlayerInputComponent(PlayerInputComponent);}", "good_code": "void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override\n{\n    Super::SetupPlayerInputComponent(PlayerInputComponent);\n}"}
{"bad_code": "UPROPERTY()int32 m_Speed;\nUPROPERTY()int32 m_Acceleration;", "good_code": "UPROPERTY()\nint32 m_Speed;\n\nUPROPERTY()\nint32 m_Acceleration;"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    void BeginPlay() override; void Jump(); \n};", "good_code": "#include \"Engine/World.h\"\n\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    virtual void BeginPlay() override;\n\n    void Jump();\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadOnly)\nfloat Health, MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere)\nfloat Health;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere)\nfloat MaxHealth;"}
{"bad_code": "if (bIsActive) SetActive(true); else SetActive(false);", "good_code": "if (bIsActive)\n{\n    SetActive(true);\n}\nelse\n{\n    SetActive(false);\n}"}
{"bad_code": "public:\nAMyActor()\n{\n}\n\nvoid Activate() {}", "good_code": "public:\nAMyActor()\n{\n}\n\nvoid Activate()\n{\n}"}
{"bad_code": "int32 CalculateSum(int32 A,int32 B){return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "void UpdatePosition(float x, float y, float z){ Position.X=x; Position.Y=y; Position.Z=z; }", "good_code": "void UpdatePosition(float X, float Y, float Z)\n{\n    Position.X = X;\n    Position.Y = Y;\n    Position.Z = Z;\n}"}
{"bad_code": "for (int32 i=0;i<10;i++){ DoSomething(i); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething(i);\n}"}
{"bad_code": "UPROPERTY()\nbool bIsVisible;bool bIsAlive;", "good_code": "UPROPERTY()\nbool bIsVisible;\n\nUPROPERTY()\nbool bIsAlive;"}
{"bad_code": "UFUNCTION()\nvoid ResetState(){State=0;}", "good_code": "UFUNCTION()\nvoid ResetState()\n{\n    State = 0;\n}"}
{"bad_code": "AMyActor::AMyActor()\n{\n    Health=100;\n}\nvoid AMyActor::Activate(){isActive=true;}", "good_code": "AMyActor::AMyActor()\n{\n    Health = 100;\n}\n\nvoid AMyActor::Activate()\n{\n    bIsActive = true;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor() {}\n    bool bIsActive; void Activate() { bIsActive = true; }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Activate()\n{\n    bIsActive = true;\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor();\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\n    void Jump()\n    { /* Implementation */ }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Jump();\n};\n\nvoid AMyActor::Jump()\n{\n    // Implementation\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category = \"Health\") float Health; int32 HealthBonus;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Health\")\nfloat Health;\n\nint32 HealthBonus;"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\n    void MoveTo(float x, float y, float z) { /* code */ }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    void MoveTo(float X, float Y, float Z);\n};\n\nvoid AMyCharacter::MoveTo(float X, float Y, float Z)\n{\n    // code\n}"}
{"bad_code": "for (int i = 0; i < 10; i++) { DoSomething(); }", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "void DoSomething() { int32 A=5,B=10; int32 Result=A+B; }", "good_code": "void DoSomething()\n{\n    int32 A = 5;\n    int32 B = 10;\n    int32 Result = A + B;\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\nprivate:\n    int32 Speed; int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\nprivate:\n    int32 Speed;\n    int32 Health;\n};"}
{"bad_code": "if(bIsActive){Deactivate();}", "good_code": "if (bIsActive)\n{\n    Deactivate();\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\nprotected:\n    void Reset() { /* Reset code */ }\npublic:\n    AMyActor() {}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprotected:\n    void Reset();\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Reset()\n{\n    // Reset code\n}"}
{"bad_code": "#include \"MyCustomActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS() class AMyCustomActor : public AActor {\n    GENERATED_BODY()\n\npublic:\n    AMyCustomActor(){}\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCustomActor.h\"\n\nUCLASS()\nclass AMyCustomActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCustomActor()\n    {\n    }\n};"}
{"bad_code": "UPROPERTY(float CurrentHealth;)\nUFUNCTION(BlueprintCallable, void TakeDamage(float Amount);)", "good_code": "UPROPERTY(BlueprintReadWrite)\nfloat CurrentHealth;\n\nUFUNCTION(BlueprintCallable)\nvoid TakeDamage(float Amount);"}
{"bad_code": "public:\nAMyActor();\n\nvoid SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;", "good_code": "public:\n    AMyActor();\n\n    virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;"}
{"bad_code": "APlayerController* PlayerController=UGameplayStatics::GetPlayerController(GetWorld(), 0);", "good_code": "APlayerController* PlayerController = UGameplayStatics::GetPlayerController(GetWorld(), 0);"}
{"bad_code": "int32 First,Second,Third;", "good_code": "int32 First;\nint32 Second;\nint32 Third;"}
{"bad_code": "if (bIsActive) { Deactivate(); Activate(); }", "good_code": "if (bIsActive)\n{\n    Deactivate();\n    Activate();\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere) int32 Score;\n\nprivate: float Speed;\n\npublic: AMyActor();", "good_code": "UPROPERTY(VisibleAnywhere)\nint32 Score;\n\npublic:\n    AMyActor();\n\nprivate:\n    float Speed;"}
{"bad_code": "void AMyActor::BeginPlay() {\n    Super::BeginPlay();\n    CheckHealth();\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n    \n    CheckHealth();\n}"}
{"bad_code": "bool bIsActive=false;if(bIsActive==false) {Activate();}", "good_code": "bool bIsActive = false;\n\nif (bIsActive == false)\n{\n    Activate();\n}"}
{"bad_code": "void MoveToLocation(FVector Destination){  UE_LOG(LogTemp, Warning, TEXT(\"Moving\")); }", "good_code": "void MoveToLocation(FVector Destination)\n{\n    UE_LOG(LogTemp, Warning, TEXT(\"Moving\"));\n}"}
{"bad_code": "if(bVisible) SetActorHiddenInGame(false);\nelse {\nSetActorHiddenInGame(true);}", "good_code": "if (bVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "UCLASS() class MyActor : public AActor {\npublic:\n    MyActor(){ }\n    void Tick(float DeltaTime) override{\n        Super::Tick(DeltaTime);}\nprivate:\nint32 health; };", "good_code": "UCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    int32 Health;\n};\n\nMyActor::MyActor()\n{\n}\n\nvoid MyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n#include \"CoreMinimal.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\""}
{"bad_code": "UPROPERTY(int32 Health, Armor;)", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Armor;"}
{"bad_code": "USTRUCT() struct FMyStruct{\nfloat X, Y, Z;};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    float X;\n    float Y;\n    float Z;\n};"}
{"bad_code": "class MyClass {\npublic:\nMyClass(){}; void DoSomething(){}; private: int32 Value;};", "good_code": "class MyClass\n{\npublic:\n    MyClass();\n\n    void DoSomething();\n\nprivate:\n    int32 Value;\n};\n\nMyClass::MyClass()\n{\n}\n\nvoid MyClass::DoSomething()\n{\n}"}
{"bad_code": "int32 Add(int32 A,int32 B){return A+B;}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "void SetPosition(float X,float Y){PositionX=X;PositionY=Y;}", "good_code": "void SetPosition(float X, float Y)\n{\n    PositionX = X;\n    PositionY = Y;\n}"}
{"bad_code": "public: void Reset(); protected: void Init(); private: int32 Speed;", "good_code": "public:\n    void Reset();\n\nprotected:\n    void Init();\n\nprivate:\n    int32 Speed;"}
{"bad_code": "UFUNCTION()void Fire(); UFUNCTION()void Reload();", "good_code": "UFUNCTION()\nvoid Fire();\n\nUFUNCTION()\nvoid Reload();"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyProjectUtils.h\"\n#include \"Kismet/GameplayStatics.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS()\nclass AMyCharacter: public ACharacter {\npublic:\n    AMyCharacter()\n    {}\n\n    void BeginPlay() override {\n        Super::BeginPlay();\n        Initialize();\n    }\n    \nprivate:\n    void Initialize() {\n        Health = 100; Speed=600;\n    }\n    \n    int32 Health, Speed;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"Kismet/GameplayStatics.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyCharacter.h\"\n#include \"MyProjectUtils.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    void Initialize();\n\n    int32 Health;\n    int32 Speed;\n};\n\nAMyCharacter::AMyCharacter()\n{\n}\n\nvoid AMyCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n    Initialize();\n}\n\nvoid AMyCharacter::Initialize()\n{\n    Health = 100;\n    Speed = 600;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly)\nfloat Speed, Acceleration;\n\nint32 CalculateScore(int32 Base, int32 Multiplier){return Base*Multiplier;}\n\nif(bIsActive) DoAction();", "good_code": "UPROPERTY(BlueprintReadOnly)\nfloat Speed;\n\nUPROPERTY(BlueprintReadOnly)\nfloat Acceleration;\n\nint32 CalculateScore(int32 Base, int32 Multiplier)\n{\n    return Base * Multiplier;\n}\n\nif (bIsActive)\n{\n    DoAction();\n}"}
{"bad_code": "UCLASS()\nclass MyComponent : public UActorComponent\n{\npublic:\n    MyComponent(){\n        InitVariables();\n    }\n    void Reset();\n    bool IsReady(){return bIsInitialized;}\nprivate:\n    void InitVariables();\n    bool bIsInitialized;\n};", "good_code": "UCLASS()\nclass MyComponent : public UActorComponent\n{\npublic:\n    MyComponent();\n\n    void Reset();\n\n    bool IsReady();\n\nprivate:\n    void InitVariables();\n\n    bool bIsInitialized;\n};\n\nMyComponent::MyComponent()\n{\n    InitVariables();\n}\n\nbool MyComponent::IsReady()\n{\n    return bIsInitialized;\n}"}
{"bad_code": "UPROPERTY()\nint32 Counter; float Timer;\n\nfor(int i=0;i<10;i++){DoSomething();}", "good_code": "UPROPERTY()\nint32 Counter;\n\nUPROPERTY()\nfloat Timer;\n\nfor (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "int32 Add(int32 A,int32 B){return A+B;}\n\nUPROPERTY()\nFVector Position, Rotation;", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}\n\nUPROPERTY()\nFVector Position;\n\nUPROPERTY()\nFVector Rotation;"}
{"bad_code": "USTRUCT()\nstruct FMyStruct{int32 Value;};\n\nvoid DoStuff(){if(bIsEnabled){Execute();}}", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 Value;\n};\n\nvoid DoStuff()\n{\n    if (bIsEnabled)\n    {\n        Execute();\n    }\n}"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyUtility.h\"\n#include \"GameFramework/PlayerController.h\"\n#include \"Graphics/MyGraphics.h\"\n\nUCLASS()\nclass AMyActor: public AActor{\npublic:\n    AMyActor(){}\n    void Start();\n    bool IsValid(){return bIsActive;}\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"Graphics/MyGraphics.h\"\n#include \"MyUtility.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Start();\n\n    bool IsValid();\n\nprivate:\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nbool AMyActor::IsValid()\n{\n    return bIsActive;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category=\"Movement\") float WalkSpeed,RunSpeed;\n\nif(bShouldJump){Jump();}", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nfloat WalkSpeed;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nfloat RunSpeed;\n\nif (bShouldJump)\n{\n    Jump();\n}"}
{"bad_code": "UENUM()\nenum EMyEnum{First,Second,Third};\n\nvoid Process(){while(bProcess){Execute();}}", "good_code": "UENUM()\nenum EMyEnum\n{\n    First,\n    Second,\n    Third\n};\n\nvoid Process()\n{\n    while (bProcess)\n    {\n        Execute();\n    }\n}"}
{"bad_code": "UPROPERTY()\nint32 CurrentValue, MaxValue;\n\nint32 Multiply(int32 X,int32 Y){return X*Y;}", "good_code": "UPROPERTY()\nint32 CurrentValue;\n\nUPROPERTY()\nint32 MaxValue;\n\nint32 Multiply(int32 X, int32 Y)\n{\n    return X * Y;\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/InputComponent.h\"\n#include \"Engine/World.h\"\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\npublic:\n    bool bIsAlive; bool bCanJump;\n\nprotected:\n    void BeginPlay() override;\n\n    void Reset();\n\nprivate:\n    void MoveForward(float Value);\n\n    float Health;\n    float MaxHealth;\n\npublic:\n    AMyCharacter() { bIsAlive = true; }\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Components/InputComponent.h\"\n#include \"Engine/World.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void Reset();\n\nprivate:\n    void MoveForward(float Value);\n\n    bool bIsAlive;\n    bool bCanJump;\n\n    float Health;\n    float MaxHealth;\n};\n\nAMyCharacter::AMyCharacter()\n    : bIsAlive(true)\n{\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere) int32 Score, HighScore;\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\npublic:\n    void SetupInputComponent() override\n    {\n        Super::SetupInputComponent();\n        InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);\n    }\n};", "good_code": "UCLASS()\nclass AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void SetupInputComponent() override;\n\nprivate:\n    UPROPERTY(BlueprintReadWrite, EditAnywhere)\n    int32 Score;\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere)\n    int32 HighScore;\n};\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);\n}"}
{"bad_code": "if(A > B) { Result = A-B; } else { Result = B-A; }", "good_code": "if (A > B)\n{\n    Result = A - B;\n}\nelse\n{\n    Result = B - A;\n}"}
{"bad_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Running, Jumping\n};", "good_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category = \"Character\") void MoveRight(float Value);", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Character\")\nvoid MoveRight(float Value);"}
{"bad_code": "int32 Health, Shield;\nHealth = 100; Shield = 50;", "good_code": "int32 Health;\nint32 Shield;\n\nHealth = 100;\nShield = 50;"}
{"bad_code": "class UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n    public:\n    UMyComponent() { Initialize(); }\n\n    private:\n    void Initialize() { /* Initialize Component */ }\n};", "good_code": "class UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\nprivate:\n    void Initialize();\n};\n\nUMyComponent::UMyComponent()\n{\n    Initialize();\n}\n\nvoid UMyComponent::Initialize()\n{\n    // Initialize Component\n}"}
{"bad_code": "FORCEINLINE void SetHealth(int32 NewHealth) { Health = NewHealth; }", "good_code": "FORCEINLINE void SetHealth(int32 NewHealth)\n{\n    Health = NewHealth;\n}"}
{"bad_code": "int32 CalculateDamage(int32 BaseDamage, float Multiplier)\n{ return BaseDamage * Multiplier; }", "good_code": "int32 CalculateDamage(int32 BaseDamage, float Multiplier)\n{\n    return BaseDamage * Multiplier;\n}"}
{"bad_code": "void SetActorLocation(FVector NewLocation){\n    ActorLocation=NewLocation;\n}", "good_code": "void SetActorLocation(FVector NewLocation)\n{\n    ActorLocation = NewLocation;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor\n{ public:\n    AMyActor() {}\n\n    virtual void BeginPlay() override {}\n\n    void Activate() {}\n    private:\n    int32 Health;\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 Health;\n    float Speed;\n};"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n#include \"MyProject/MyActor.h\""}
{"bad_code": "USTRUCT() struct FCharacterStats\n{ UPROPERTY() float Health; UPROPERTY() float Stamina; };", "good_code": "USTRUCT()\nstruct FCharacterStats\n{\n    UPROPERTY()\n    float Health;\n\n    UPROPERTY()\n    float Stamina;\n};"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter\n{ public: AMyCharacter()\n    { bIsAlive = true; }\n    bool bIsAlive;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n    {\n        bIsAlive = true;\n    }\n\n    bool bIsAlive;\n};"}
{"bad_code": "UCLASS() class AMyPawn : public APawn\n{ public:\n    AMyPawn(int a, int b) : X(a), Y(b) {}\n\n    void Move() { X++; Y++; }\n    private:\n    int X, Y;\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn(int a, int b)\n        : X(a)\n        , Y(b)\n    {\n    }\n\n    void Move()\n    {\n        X++;\n        Y++;\n    }\n\nprivate:\n    int X;\n    int Y;\n};"}
{"bad_code": "UENUM() enum class EWeaponType : uint8 { Pistol, Rifle, Shotgun, Sniper };", "good_code": "UENUM()\nenum class EWeaponType : uint8\n{\n    Pistol,\n    Rifle,\n    Shotgun,\n    Sniper\n};"}
{"bad_code": "UCLASS() class AWeapon : public AActor\n{ \npublic:\n    virtual void BeginPlay() override\n    { \n        Super::BeginPlay(); if(bIsLoaded) Fire();\n    }\n    bool bIsLoaded;\n};", "good_code": "UCLASS()\nclass AWeapon : public AActor\n{\npublic:\n    virtual void BeginPlay() override\n    {\n        Super::BeginPlay();\n\n        if (bIsLoaded)\n        {\n            Fire();\n        }\n    }\n\n    bool bIsLoaded;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadWrite) int32 Health, Stamina;", "good_code": "UPROPERTY(BlueprintReadWrite)\nint32 Health;\n\nUPROPERTY(BlueprintReadWrite)\nint32 Stamina;"}
{"bad_code": "UCLASS() class AMyPlayer : public APlayer\n{ \npublic:\n    void Run(float speed) { m_Speed = speed; }\n    float m_Speed;\n};", "good_code": "UCLASS()\nclass AMyPlayer : public APlayer\n{\npublic:\n    void Run(float speed)\n    {\n        m_Speed = speed;\n    }\n\n    float m_Speed;\n};"}
{"bad_code": "UFUNCTION() void Jump() { /* jump logic */ }", "good_code": "UFUNCTION()\nvoid Jump()\n{\n    // Jump logic\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter()\n    {\n        Health = 100;\n        Speed = 600.0f; }\n\n    void BeginPlay() override { Super::BeginPlay(); }\n\n    void Move() { /* Implementation */ }\n\nprivate:\n    int32 Health, Speed;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Move();\n\nprivate:\n    int32 Health;\n    float Speed;\n};\n\nAMyCharacter::AMyCharacter()\n{\n    Health = 100;\n    Speed = 600.0f;\n}\n\nvoid AMyCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "USTRUCT(BlueprintType) struct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(VisibleAnywhere) int32 Health;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite) int32 Stamina;\n};", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    int32 Stamina;\n\n    UPROPERTY(VisibleAnywhere)\n    int32 Health;\n};"}
{"bad_code": "void AMyActor::TickActor(float DeltaTime, enum ELevelTick TickType, FActorTickFunction& ThisTickFunction)\n{\n    if (bIsActive) DoSomething(); else DoNothing();\n}", "good_code": "void AMyActor::TickActor(float DeltaTime, enum ELevelTick TickType, FActorTickFunction& ThisTickFunction)\n{\n    if (bIsActive)\n    {\n        DoSomething();\n    }\n    else\n    {\n        DoNothing();\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, EditDefaultsOnly) bool bIsEnabled;", "good_code": "UPROPERTY(EditDefaultsOnly, BlueprintReadOnly)\nbool bIsEnabled;"}
{"bad_code": "UCLASS()\nclass MYGAME_API AExample : public AActor\n{\n    GENERATED_BODY()\n\nprotected:\n    void ExampleFunc()\n    {\n        int32 A = 5, B = 10, C = A+B;\n        Calculate(C);\n    }\n};", "good_code": "UCLASS()\nclass MYGAME_API AExample : public AActor\n{\n    GENERATED_BODY()\n\nprotected:\n    void ExampleFunc()\n    {\n        int32 A = 5;\n        int32 B = 10;\n        int32 C = A + B;\n\n        Calculate(C);\n    }\n};"}
{"bad_code": "void AMyActor::SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent)\n{\n    Super::SetupPlayerInputComponent(PlayerInputComponent);\n\n    PlayerInputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyActor::Jump); PlayerInputComponent->BindAction(\"Shoot\", IE_Pressed, this, &AMyActor::Shoot);\n}", "good_code": "void AMyActor::SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent)\n{\n    Super::SetupPlayerInputComponent(PlayerInputComponent);\n\n    PlayerInputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyActor::Jump);\n    PlayerInputComponent->BindAction(\"Shoot\", IE_Pressed, this, &AMyActor::Shoot);\n}"}
{"bad_code": "UENUM()\nenum EWeaponType\n{\n    EWT_Pistol,\n    EWT_Rifle,\n    EWT_Shotgun\n};", "good_code": "UENUM()\nenum EWeaponType\n{\n    EWT_Pistol,\n    EWT_Rifle,\n    EWT_Shotgun\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyPawn : public APawn\n{\n    GENERATED_BODY()\n\nprotected:\n    UFUNCTION() void StartJump() { /* Implementation */ }\n    UFUNCTION() void StopJump() { /* Implementation */ }\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyPawn : public APawn\n{\n    GENERATED_BODY()\n\nprotected:\n    UFUNCTION()\n    void StartJump();\n\n    UFUNCTION()\n    void StopJump();\n};\n\nvoid AMyPawn::StartJump()\n{\n    // Implementation\n}\n\nvoid AMyPawn::StopJump()\n{\n    // Implementation\n}"}
{"bad_code": "public: virtual void BeginPlay() override; float GetSpeed() const { return Speed; }", "good_code": "public:\n    virtual void BeginPlay() override;\n\n    float GetSpeed() const\n    {\n        return Speed;\n    }"}
{"bad_code": "UPROPERTY(EditAnywhere) float MovementSpeed;\nUPROPERTY(BlueprintReadOnly, Category = \"Status\") bool bIsAlive;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Status\")\nbool bIsAlive;\n\nUPROPERTY(EditAnywhere)\nfloat MovementSpeed;"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() {}\n\n    void StartJump() { bIsJumping = true; }\n    void StopJump() { bIsJumping = false; }\n\nprotected:\n    bool bIsJumping;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void StartJump();\n    void StopJump();\n\nprotected:\n    bool bIsJumping;\n};\n\nAMyCharacter::AMyCharacter()\n{\n}\n\nvoid AMyCharacter::StartJump()\n{\n    bIsJumping = true;\n}\n\nvoid AMyCharacter::StopJump()\n{\n    bIsJumping = false;\n}"}
{"bad_code": "#include \"SomeHeader.h\"\n#include \"CoreMinimal.h\"\n\nUPROPERTY(EditAnywhere) int32 Score, MaxScore;\n\nvoid SomeFunction() { if (Score > 10) Score = 0; }", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"SomeHeader.h\"\n\nUPROPERTY(EditAnywhere)\nint32 Score;\n\nUPROPERTY(EditAnywhere)\nint32 MaxScore;\n\nvoid SomeFunction()\n{\n    if (Score > 10)\n    {\n        Score = 0;\n    }\n}"}
{"bad_code": "USTRUCT(BlueprintType) struct FMyStruct {\n    GENERATED_BODY() \n    UPROPERTY(EditAnywhere) int32 Value; \n};", "good_code": "USTRUCT(BlueprintType)\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    int32 Value;\n};"}
{"bad_code": "void DoSomething() { int32 a=10,b=20; if(a<b){return;} }", "good_code": "void DoSomething()\n{\n    int32 a = 10;\n    int32 b = 20;\n\n    if (a < b)\n    {\n        return;\n    }\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\nprivate:\n    void DoSomething() {}\n    int32 Value;\nprotected:\n    void MyFunction() {}\npublic:\n    AMyActor() {}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprotected:\n    void MyFunction();\n\nprivate:\n    void DoSomething();\n    int32 Value;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::DoSomething()\n{\n}\n\nvoid AMyActor::MyFunction()\n{\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Components/ActorComponent.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent {\n    GENERATED_BODY()\npublic:\n    UMyComponent() {}\n};", "good_code": "#include \"Components/ActorComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n};\n\nUMyComponent::UMyComponent()\n{\n}"}
{"bad_code": "int Add(int a, int b){return a+b;}\n\nbool Check(int a,int b){\n    if(a==b) return true; else return false;\n}", "good_code": "int Add(int a, int b)\n{\n    return a + b;\n}\n\nbool Check(int a, int b)\n{\n    if (a == b)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere) float Health, MaxHealth;\n\nif (Health < 0) Health = 0;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nfloat Health;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere)\nfloat MaxHealth;\n\nif (Health < 0)\n{\n    Health = 0;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\n    GENERATED_BODY()\npublic:\n    void DoAction() { int32 x=5; }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void DoAction();\n};\n\nvoid AMyActor::DoAction()\n{\n    int32 x = 5;\n}"}
{"bad_code": "UENUM(BlueprintType) enum class EMyEnum : uint8 { Value1, Value2 };\n\nvoid ProcessEnum(EMyEnum EnumVal) { switch(EnumVal){ case EMyEnum::Value1: break; case EMyEnum::Value2: break; } }", "good_code": "UENUM(BlueprintType)\nenum class EMyEnum : uint8\n{\n    Value1,\n    Value2\n};\n\nvoid ProcessEnum(EMyEnum EnumVal)\n{\n    switch (EnumVal)\n    {\n        case EMyEnum::Value1:\n            break;\n\n        case EMyEnum::Value2:\n            break;\n    }\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyCustomComponent.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    UFUNCTION(BlueprintCallable) void StartGame();\n\nprivate:\n    UPROPERTY(EditAnywhere) int32 Health;\n    UPROPERTY(EditAnywhere) int32 Stamina;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCustomComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    UFUNCTION(BlueprintCallable)\n    void StartGame();\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    int32 Health;\n\n    UPROPERTY(EditAnywhere)\n    int32 Stamina;\n};"}
{"bad_code": "#include \"MyHeader.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyPawn : public APawn {\npublic:\n    AMyPawn();\n\n    void BeginPlay() override;\n\nprotected:\n    void Reset();\n\nprivate:\n    float Speed, Power;\n};", "good_code": "#include \"Engine/World.h\"\n\n#include \"MyHeader.h\"\n\nUCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void Reset();\n\nprivate:\n    float Speed;\n    float Power;\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere) bool bIsActive;\n\nvoid SomeFunction() { int32 Value = 10;  if(Value > 5) { DoSomething(); } }", "good_code": "UPROPERTY(VisibleAnywhere)\nbool bIsActive;\n\nvoid SomeFunction()\n{\n    int32 Value = 10;\n\n    if (Value > 5)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "if(bShouldRun) { Run(); } else { Stop(); }", "good_code": "if (bShouldRun)\n{\n    Run();\n}\nelse\n{\n    Stop();\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();DoAnotherThing();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n    DoAnotherThing();\n}"}
{"bad_code": "void AMyActor::Jump(){\n\n    // Implementation\n}", "good_code": "void AMyActor::Jump()\n{\n    // Implementation\n}"}
{"bad_code": "int32 Result=A+B;", "good_code": "int32 Result = A + B;"}
{"bad_code": "void MoveTo(int x, int y,int z){}", "good_code": "void MoveTo(int x, int y, int z)\n{\n}"}
{"bad_code": "float Health, Armor;\nbool bIsDead, bHasShield;", "good_code": "float Health;\nfloat Armor;\n\nbool bIsDead;\nbool bHasShield;"}
{"bad_code": "#include \"MyGameInstance.h\"\n#include \"Kismet/GameplayStatics.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance {\npublic:\n    UMyGameInstance() {}\n\n    void Init() override;\n};", "good_code": "#include \"Kismet/GameplayStatics.h\"\n\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance\n{\npublic:\n    UMyGameInstance();\n\n    virtual void Init() override;\n};"}
{"bad_code": "UCLASS() class AMyCharacter: public ACharacter {\npublic:\n    AMyCharacter(){}\n\n    void TakeDamage(float damage) { Health -= damage; }\n\nprivate:\n    float Health;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n    {\n    }\n\n    void TakeDamage(float Damage)\n    {\n        Health -= Damage;\n    }\n\nprivate:\n    float Health;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"Engine/Engine.h\"\n\nAMyActor::AMyActor()\n{\n    PrimaryActorTick.bCanEverTick = true;\n    float X = 0, Y = 0, Z = 0;\n    FVector Position(X, Y, Z);\n}", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nAMyActor::AMyActor()\n{\n    PrimaryActorTick.bCanEverTick = true;\n\n    float X = 0;\n    float Y = 0;\n    float Z = 0;\n    FVector Position(X, Y, Z);\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Movement\") float Speed;\nUFUNCTION() void Move();", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Movement\")\nfloat Speed;\n\nUFUNCTION()\nvoid Move();"}
{"bad_code": "if(bCanJump) { Jump(); }\nfor(int i=0;i<10;i++){ DoSomething(); }", "good_code": "if (bCanJump)\n{\n    Jump();\n}\n\nfor (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UCLASS() class AGameCharacter:public ACharacter {\n    int32 Gold;\n    bool bIsAlive;\n};", "good_code": "UCLASS()\nclass AGameCharacter : public ACharacter\n{\nprivate:\n    int32 Gold;\n    bool bIsAlive;\n};"}
{"bad_code": "public: void Activate(); private: bool bIsActive;", "good_code": "public:\n    void Activate();\n\nprivate:\n    bool bIsActive;"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Health\") float CurrentHealth;\nUPROPERTY(BlueprintReadWrite, Category=\"Health\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat CurrentHealth;"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);\nelse { SetActorHiddenInGame(true); }", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "void CalculateScore(int32 points) {\n    Score += points;\n    if(Score>HighScore)\n    HighScore=Score;\n}", "good_code": "void CalculateScore(int32 Points)\n{\n    Score += Points;\n\n    if (Score > HighScore)\n    {\n        HighScore = Score;\n    }\n}"}
{"bad_code": "for(int i=0;i<10;i++) DoSomething();DoAnotherThing();", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}\n\nDoAnotherThing();"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGameInstance.h\"\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n    void Tick(float DeltaTime) override;\n    int32 CalculateScore();\nprivate:\n    float Health, Armor;\n    bool bIsAlive;};\nvoid AMyActor::Tick(float DeltaTime) {\n    if(bIsAlive) { CalculateScore(); Health -= DeltaTime;}}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\n    int32 CalculateScore();\n\nprivate:\n    float Health;\n    float Armor;\n    bool bIsAlive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    if (bIsAlive)\n    {\n        CalculateScore();\n        Health -= DeltaTime;\n    }\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"Components/CapsuleComponent.h\"\n#include \"GameFramework/Character.h\"\nUCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter();\n    void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;\n    void MoveForward(float Value);\n    void MoveRight(float Value);\nprivate:\n    float Speed; int32 JumpHeight;};\nAMyCharacter::AMyCharacter()\n{\n    Speed = 600.0f;}\nvoid AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) {\n    Super::SetupPlayerInputComponent(PlayerInputComponent);\n    PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward);\n    PlayerInputComponent->BindAxis(\"MoveRight\", this, &AMyCharacter::MoveRight);}", "good_code": "#include \"Components/CapsuleComponent.h\"\n#include \"GameFramework/Character.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;\n\n    void MoveForward(float Value);\n\n    void MoveRight(float Value);\n\nprivate:\n    float Speed;\n    int32 JumpHeight;\n};\n\nAMyCharacter::AMyCharacter()\n{\n    Speed = 600.0f;\n}\n\nvoid AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n{\n    Super::SetupPlayerInputComponent(PlayerInputComponent);\n\n    PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward);\n    PlayerInputComponent->BindAxis(\"MoveRight\", this, &AMyCharacter::MoveRight);\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent {\nGENERATED_BODY()\npublic:\n    UMyComponent();\n    void BeginPlay() override;\n    void PrintMessage() const;\nprivate:\n    UPROPERTY(EditAnywhere)\n    FString Message;};\nUMyComponent::UMyComponent()\n{\n    Message = \"Hello, Unreal!\";}\nvoid UMyComponent::BeginPlay() {\n    Super::BeginPlay();\n    PrintMessage();}\nvoid UMyComponent::PrintMessage() const {\n    UE_LOG(LogTemp, Warning, TEXT(\"%s\"), *Message);}", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    virtual void BeginPlay() override;\n\n    void PrintMessage() const;\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    FString Message;\n};\n\nUMyComponent::UMyComponent()\n{\n    Message = \"Hello, Unreal!\";\n}\n\nvoid UMyComponent::BeginPlay()\n{\n    Super::BeginPlay();\n    PrintMessage();\n}\n\nvoid UMyComponent::PrintMessage() const\n{\n    UE_LOG(LogTemp, Warning, TEXT(\"%s\"), *Message);\n}"}
{"bad_code": "#include \"MyHUD.h\"\n#include \"Engine/Canvas.h\"\n#include \"GameFramework/HUD.h\"\nUCLASS()\nclass AMyHUD : public AHUD {\npublic:\n    AMyHUD();\n    void DrawHUD() override;\nprivate:\n    void DrawHealthBar();};\nAMyHUD::AMyHUD() {}\nvoid AMyHUD::DrawHUD() {\n    Super::DrawHUD();\n    DrawHealthBar();}\nvoid AMyHUD::DrawHealthBar(){\n    // Draw logic\n}", "good_code": "#include \"Engine/Canvas.h\"\n#include \"GameFramework/HUD.h\"\n\n#include \"MyHUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD\n{\npublic:\n    AMyHUD();\n\n    virtual void DrawHUD() override;\n\nprivate:\n    void DrawHealthBar();\n};\n\nAMyHUD::AMyHUD()\n{\n}\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n    DrawHealthBar();\n}\n\nvoid AMyHUD::DrawHealthBar()\n{\n    // Draw logic\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/GameMode.h\"\n#include \"GameFramework/PlayerController.h\"\nUCLASS()\nclass AMyGameMode : public AGameMode {\npublic:\n    AMyGameMode();\n    void BeginPlay() override;\nprivate:\n    int32 Score;};\nAMyGameMode::AMyGameMode() {\n    Score = 0;}\nvoid AMyGameMode::BeginPlay() {\n    Super::BeginPlay();}", "good_code": "#include \"GameFramework/GameMode.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameMode\n{\npublic:\n    AMyGameMode();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Score;\n};\n\nAMyGameMode::AMyGameMode()\n{\n    Score = 0;\n}\n\nvoid AMyGameMode::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n#include \"GameFramework/PlayerController.h\"\nUCLASS()\nclass AMyPlayerController : public APlayerController {\npublic:\n    AMyPlayerController();\n    void SetupInputComponent() override;\nprivate:\n    void Jump();};\nAMyPlayerController::AMyPlayerController() {}\nvoid AMyPlayerController::SetupInputComponent() {\n    Super::SetupInputComponent();\n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);}\nvoid AMyPlayerController::Jump() {\n    // Jump logic\n}", "good_code": "#include \"GameFramework/PlayerController.h\"\n\n#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\npublic:\n    AMyPlayerController();\n\n    virtual void SetupInputComponent() override;\n\nprivate:\n    void Jump();\n};\n\nAMyPlayerController::AMyPlayerController()\n{\n}\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n\n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);\n}\n\nvoid AMyPlayerController::Jump()\n{\n    // Jump logic\n}"}
{"bad_code": "#include \"MyPawn.h\"\n#include \"GameFramework/Pawn.h\"\nUCLASS()\nclass AMyPawn : public APawn {\npublic:\n    AMyPawn();\n    void MoveForward(float Value);\nprivate:\n    float Speed;};\nAMyPawn::AMyPawn() {\n    Speed = 400.0f;}\nvoid AMyPawn::MoveForward(float Value) {\n    // Move logic\n}", "good_code": "#include \"GameFramework/Pawn.h\"\n\n#include \"MyPawn.h\"\n\nUCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\n    void MoveForward(float Value);\n\nprivate:\n    float Speed;\n};\n\nAMyPawn::AMyPawn()\n{\n    Speed = 400.0f;\n}\n\nvoid AMyPawn::MoveForward(float Value)\n{\n    // Move logic\n}"}
{"bad_code": "#include \"MyWidget.h\"\n#include \"Blueprint/UserWidget.h\"\nUCLASS()\nclass UMyWidget : public UUserWidget {\npublic:\n    UMyWidget(const FObjectInitializer& ObjectInitializer);\n    void NativeConstruct() override;\nprivate:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"UI\")\n    FString Title;};\nUMyWidget::UMyWidget(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer) {}\nvoid UMyWidget::NativeConstruct() {\n    Super::NativeConstruct();}", "good_code": "#include \"Blueprint/UserWidget.h\"\n\n#include \"MyWidget.h\"\n\nUCLASS()\nclass UMyWidget : public UUserWidget\n{\npublic:\n    UMyWidget(const FObjectInitializer& ObjectInitializer);\n\n    virtual void"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() {}\n    void BeginPlay() override;\n    bool bIsAlive; int Health;\nprivate:\n    void DoSomething(){ int Value=0; Value++; }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    bool bIsAlive;\n\n    int Health;\n\nprivate:\n    void DoSomething()\n    {\n        int Value = 0;\n        Value++;\n    }\n};"}
{"bad_code": "#include \"MyGame.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nclass UMyComponent : public UActorComponent {\n    GENERATED_BODY()\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"MyGame.h\"\n\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n};"}
{"bad_code": "UPROPERTY(Category=\"Stats\", BlueprintReadWrite) int32 Speed;\nUPROPERTY(BlueprintReadOnly, Category=\"Stats\") int32 Health;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nint32 Speed;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 Health;"}
{"bad_code": "void AMyActor::DoAction() {if(bIsReady){Activate();}else{Reset();}}", "good_code": "void AMyActor::DoAction()\n{\n    if (bIsReady)\n    {\n        Activate();\n    }\n    else\n    {\n        Reset();\n    }\n}"}
{"bad_code": "int32 Calculate(int A,int B){return A+B;}", "good_code": "int32 Calculate(int A, int B)\n{\n    return A + B;\n}"}
{"bad_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase {\npublic:\n    virtual void StartPlay() override {}\n    void EndGame() {StopAll(); }\n};", "good_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    virtual void StartPlay() override;\n\n    void EndGame();\n\nprivate:\n    void StopAll();\n};"}
{"bad_code": "bool bIsRunning=true;bool bIsJumping=false;", "good_code": "bool bIsRunning = true;\n\nbool bIsJumping = false;"}
{"bad_code": "void SetSpeed(int Speed){m_Speed=Speed;}", "good_code": "void SetSpeed(int Speed)\n{\n    m_Speed = Speed;\n}"}
{"bad_code": "UPROPERTY() int32 MaxHealth;\nUPROPERTY(EditAnywhere, BlueprintReadWrite) float MovementSpeed;", "good_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite)\nfloat MovementSpeed;\n\nUPROPERTY()\nint32 MaxHealth;"}
{"bad_code": "UFUNCTION() void Initialize(); UFUNCTION() void Shutdown();", "good_code": "UFUNCTION()\nvoid Initialize();\n\nUFUNCTION()\nvoid Shutdown();"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor() {};\n\n    void Activate() { bIsActive = true; ResetState(); }\n\nprotected:\n    void ResetState() { bIsActive = false; }\n\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Activate()\n{\n    bIsActive = true;\n    ResetState();\n}\n\nvoid AMyActor::ResetState()\n{\n    bIsActive = false;\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    bool bIsActive;\n    AMyActor() : bIsActive(false) {}\n\n    void ToggleActive() { bIsActive = !bIsActive; }\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void ToggleActive();\n\n    bool bIsActive;\n\nprivate:\n\n};\n\nAMyActor::AMyActor()\n    : bIsActive(false)\n{\n}\n\nvoid AMyActor::ToggleActive()\n{\n    bIsActive = !bIsActive;\n}"}
{"bad_code": "#include \"PlayerStats.h\"\n#include \"CoreMinimal.h\"\n\nstruct FPlayerStats\n{\n    UPROPERTY(VisibleAnywhere)\n    int32 Health, Armor;\n\n    FPlayerStats() : Health(100), Armor(50) {}\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"PlayerStats.h\"\n\nUSTRUCT()\nstruct FPlayerStats\n{\n    UPROPERTY(VisibleAnywhere)\n    int32 Health;\n\n    UPROPERTY(VisibleAnywhere)\n    int32 Armor;\n\n    FPlayerStats();\n};\n\nFPlayerStats::FPlayerStats()\n    : Health(100)\n    , Armor(50)\n{\n}"}
{"bad_code": "#include \"Components/ActorComponent.h\"\n\nUCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    void DoWork() { int32 Result = 0; for(int32 i=0;i<10;i++){ Result += i; } }\n};", "good_code": "#include \"Components/ActorComponent.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    void DoWork();\n};\n\nvoid UMyComponent::DoWork()\n{\n    int32 Result = 0;\n\n    for (int32 i = 0; i < 10; i++)\n    {\n        Result += i;\n    }\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n\nstruct FAttributes\n{\n    float Health; float Stamina;\n};", "good_code": "#include \"CoreMinimal.h\"\n\nstruct FAttributes\n{\n    float Health;\n\n    float Stamina;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n\nclass AEnemy : public AActor\n{\npublic:\n    void MoveToPlayer() { /* Implementation */ };\n    void AttackPlayer() { /* Implementation */ };\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\nclass AEnemy : public AActor\n{\npublic:\n    void MoveToPlayer();\n\n    void AttackPlayer();\n};\n\nvoid AEnemy::MoveToPlayer()\n{\n    // Implementation\n}\n\nvoid AEnemy::AttackPlayer()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"GameFramework/Character.h\"\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    int32 Health;\n    int32 Mana;\n    \n    AMyCharacter() : Health(100), Mana(50) {}\n};", "good_code": "#include \"GameFramework/Character.h\"\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter();\n\n    int32 Health;\n\n    int32 Mana;\n};\n\nAMyCharacter::AMyCharacter()\n    : Health(100)\n    , Mana(50)\n{\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n\nenum class EGameState : uint8 { Playing, Paused, GameOver };", "good_code": "#include \"CoreMinimal.h\"\n\nUENUM()\nenum class EGameState : uint8\n{\n    Playing,\n    Paused,\n    GameOver\n};"}
{"bad_code": "UENUM()\nenum class EEnemyState : uint8\n{\n    Idle, Attacking, Retreating\n};", "good_code": "UENUM()\nenum class EEnemyState : uint8\n{\n    Idle,\n    Attacking,\n    Retreating\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n\nclass AProjectile : public AActor\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    float Speed; float Range;\n\n    public:\n    AProjectile() : Speed(1000.f), Range(10000.f) {}\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\nclass AProjectile : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AProjectile();\n\n    UPROPERTY(EditAnywhere)\n    float Speed;\n\n    UPROPERTY(EditAnywhere)\n    float Range;\n};\n\nAProjectile::AProjectile()\n    : Speed(1000.f)\n    , Range(10000.f)\n{\n}"}
{"bad_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n#include \"MyGame/MyCharacter.h\"\n\nUCLASS()\nclass AMyActor: public AActor{\npublic:\n\tAMyActor();\n\n\tvoid DoSomething() { int a=0; a++; }\n\nprivate:\n\tUPROPERTY(BlueprintReadOnly)\n\tint Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"Components/StaticMeshComponent.h\"\n\n#include \"MyGame/MyCharacter.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void DoSomething();\n\nprivate:\n    UPROPERTY(BlueprintReadOnly)\n    int Health;\n};\n\nvoid AMyActor::DoSomething()\n{\n    int32 A = 0;\n    A++;\n}"}
{"bad_code": "class AMyActor : public AActor {\npublic:\n\tAMyActor();\n\n\tvoid BeginPlay() override;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n};"}
{"bad_code": "if(bIsEnabled)\n\tDoSomething();\nelse DoSomethingElse();", "good_code": "if (bIsEnabled)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "void MoveToLocation(FVector Location){ /* Code */ }", "good_code": "void MoveToLocation(FVector Location)\n{\n    // Implementation\n}"}
{"bad_code": "int32 A=5, B=10; int32 Result=A+B;", "good_code": "int32 A = 5;\nint32 B = 10;\n\nint32 Result = A + B;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void StartGame();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid StartGame();"}
{"bad_code": "class UMyComponent : public UActorComponent {\nprivate:\n\tint32 Health, Speed;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\nprivate:\n    int32 Health;\n    int32 Speed;\n};"}
{"bad_code": "void AMyCharacter::Tick(float DeltaTime)\n{\n\tif(bIsAlive) { MoveForward(); }\n}", "good_code": "void AMyCharacter::Tick(float DeltaTime)\n{\n    if (bIsAlive)\n    {\n        MoveForward();\n    }\n}"}
{"bad_code": "int32 Multiply(int32 A,int32 B){return A*B;}", "good_code": "int32 Multiply(int32 A, int32 B)\n{\n    return A * B;\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nbool bIsActive;", "good_code": "UPROPERTY(BlueprintReadOnly, VisibleAnywhere)\nbool bIsActive;"}
{"bad_code": "if(bIsRunning) SetSpeed(600.0f);\nelse SetSpeed(300.0f);", "good_code": "if (bIsRunning)\n{\n    SetSpeed(600.0f);\n}\nelse\n{\n    SetSpeed(300.0f);\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\""}
{"bad_code": "UPROPERTY(float MaxHealth, BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "UCLASS()\nclass MyCharacter: public ACharacter\n{\n    private:\n    float Health;\n    public:\n    MyCharacter();\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprivate:\n    float Health;\n};"}
{"bad_code": "int32 Health, Armor, Stamina;", "good_code": "int32 Health;\nint32 Armor;\nint32 Stamina;"}
{"bad_code": "void APlayer::Move(){\nfloat Speed = 600.0f;SetVelocity(Speed);}", "good_code": "void APlayer::Move()\n{\n    float Speed = 600.0f;\n    SetVelocity(Speed);\n}"}
{"bad_code": "void AMyActor::BeginPlay()\n{\nSuper::BeginPlay();\nUE_LOG(LogTemp, Warning, TEXT(\"Actor has begun play\"));\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    UE_LOG(LogTemp, Warning, TEXT(\"Actor has begun play\"));\n}"}
{"bad_code": "bool bIsDead = Health<=0?true:false;", "good_code": "bool bIsDead = Health <= 0 ? true : false;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();"}
{"bad_code": "if(bIsVisible) { SetActorHiddenInGame(false); }\nelse { SetActorHiddenInGame(true); }", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Attributes\") int32 Stamina, Health;\nvoid Move(){if(bCanMove){DoMove();}}\nclass MyActor:public AActor{public:MyActor();\nprotected:void ResetState();virtual void BeginPlay()override;\nprivate:int32 Health;};", "good_code": "UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = \"Attributes\")\nint32 Stamina;\n\nUPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = \"Attributes\")\nint32 Health;\n\nvoid Move()\n{\n    if (bCanMove)\n    {\n        DoMove();\n    }\n}\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS() class MyCharacter: public ACharacter{public: MyCharacter(); void Jump() {DoJump();}; void Run(){Speed += 10;};private: int32 Speed;};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Jump()\n    {\n        DoJump();\n    }\n\n    void Run()\n    {\n        Speed += 10;\n    }\n\nprivate:\n    int32 Speed;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyWidget.h\"\n#include \"MyGameMode.h\"\n#include \"EngineMinimal.h\"", "good_code": "#include \"EngineMinimal.h\"\n#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyGameMode.h\"\n#include \"MyWidget.h\""}
{"bad_code": "bool bIsVisible; int32 MaxHealth; void SetHealth(int32 NewHealth){MaxHealth=NewHealth;}", "good_code": "bool bIsVisible;\n\nint32 MaxHealth;\n\nvoid SetHealth(int32 NewHealth)\n{\n    MaxHealth = NewHealth;\n}"}
{"bad_code": "USTRUCT(BlueprintType) struct FPlayerStats{GENERATED_BODY() int32 Health; int32 Stamina;};", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Health;\n\n    int32 Stamina;\n};"}
{"bad_code": "public: void Initialize(); private: void Cleanup(); protected: void Prepare();", "good_code": "public:\n    void Initialize();\n\nprotected:\n    void Prepare();\n\nprivate:\n    void Cleanup();"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Actions\") void Fire(); UFUNCTION(BlueprintCallable, Category=\"Actions\") void Reload();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Fire();\n\nUFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Reload();"}
{"bad_code": "class Enemy{void Attack(); void Defend(); int32 Health;};", "good_code": "class AEnemy\n{\npublic:\n    void Attack();\n\n    void Defend();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "if(bIsRunning)Speed+=10;else Speed=0;", "good_code": "if (bIsRunning)\n{\n    Speed += 10;\n}\nelse\n{\n    Speed = 0;\n}"}
{"bad_code": "void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)override{Super::SetupPlayerInputComponent(PlayerInputComponent);}", "good_code": "void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override\n{\n    Super::SetupPlayerInputComponent(PlayerInputComponent);\n}"}
{"bad_code": "#include \"MyProject.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyCharacter.h\"\n\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() {}\n    virtual void BeginPlay() override;\n\n    void Move();\n\nprivate:\n    bool bIsAlive, bCanJump;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject.h\"\n\n#include \"MyCharacter.h\"\n\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Move();\n\nprivate:\n    bool bIsAlive;\n    bool bCanJump;\n};"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n    void DoSomething() { int a=0; a++; }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void DoSomething()\n    {\n        int a = 0;\n        a++;\n    }\n};"}
{"bad_code": "UCLASS()\nclass AMyObject : public UObject {\nprivate:\n    float x, y, z;\npublic:\n    AMyObject() : x(0), y(0), z(0) {}\n};", "good_code": "UCLASS()\nclass AMyObject : public UObject\n{\npublic:\n    AMyObject();\n\nprivate:\n    float x;\n    float y;\n    float z;\n};\n\nAMyObject::AMyObject()\n    : x(0)\n    , y(0)\n    , z(0)\n{\n}"}
{"bad_code": "void MyFunction() { if(true) { /* do something */ } }", "good_code": "void MyFunction()\n{\n    if (true)\n    {\n        // do something\n    }\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Health, Stamina;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Health;\n\nUPROPERTY(EditAnywhere)\nint32 Stamina;"}
{"bad_code": "void ACustomActor::Tick(float DeltaTime){\n    Super::Tick(DeltaTime); bNeedsUpdate = true;}", "good_code": "void ACustomActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    \n    bNeedsUpdate = true;\n}"}
{"bad_code": "UENUM() enum class EMyEnum { ValueOne, ValueTwo };", "good_code": "UENUM()\nenum class EMyEnum\n{\n    ValueOne,\n    ValueTwo\n};"}
{"bad_code": "void Calculate(int a, int b){\n    int result=a+b; \n    if(result>10) result = 10;\n}", "good_code": "void Calculate(int a, int b)\n{\n    int result = a + b;\n    \n    if (result > 10)\n    {\n        result = 10;\n    }\n}"}
{"bad_code": "void DoSomething() { for(int i=0;i<10;i++){ /* do something */ } }", "good_code": "void DoSomething()\n{\n    for (int i = 0; i < 10; i++)\n    {\n        // do something\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category=\"Movement\") float Speed;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Movement\")\nfloat Speed;"}
{"bad_code": "int32 Health, Stamina; if (Health > 0) SetActorHiddenInGame(false);", "good_code": "int32 Health;\nint32 Stamina;\n\nif (Health > 0)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats {\n    int32 Health; int32 Stamina; \n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "UCLASS() class AMyCharacter: public ACharacter { public: AMyCharacter(); void Jump(); private: int32 Health; bool bIsRunning; };", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Jump();\n\nprivate:\n    int32 Health;\n    bool bIsRunning;\n};"}
{"bad_code": "if(bIsVisible){SetActorHiddenInGame(false);} else {SetActorHiddenInGame(true);}", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "void SetHealth(int32 NewHealth) {Health = NewHealth;}", "good_code": "void SetHealth(int32 NewHealth)\n{\n    Health = NewHealth;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category=\"Stats\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nfloat MaxHealth;"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\""}
{"bad_code": "void Update(float DeltaTime){Position += Speed * DeltaTime;Angle += RotationSpeed * DeltaTime;}", "good_code": "void Update(float DeltaTime)\n{\n    Position += Speed * DeltaTime;\n    Angle += RotationSpeed * DeltaTime;\n}"}
{"bad_code": "if (Score>=100){bHasWon=true;}", "good_code": "if (Score >= 100)\n{\n    bHasWon = true;\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "#include \"MyHeader.h\"\n#include \"EngineMinimal.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS()\nclass MyActor : public AActor {\npublic:\n    MyActor() {}\n    int Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"EngineMinimal.h\"\n\n#include \"MyHeader.h\"\n\nUCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass MyComponent : public UActorComponent {\npublic:\n    void DoWork(){ int result = 5; result++; }\n};", "good_code": "UCLASS()\nclass MyComponent : public UActorComponent\n{\npublic:\n    void DoWork()\n    {\n        int32 Result = 5;\n\n        Result++;\n    }\n};"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats {\n    GENERATED_BODY()\n    float Health, Stamina;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    float Health;\n    float Stamina;\n};"}
{"bad_code": "UPROPERTY()\nfloat Speed;\nUPROPERTY()\nint JumpHeight;\nUPROPERTY(BlueprintReadWrite)\nbool bCanFly;", "good_code": "UPROPERTY(BlueprintReadWrite)\nbool bCanFly;\n\nUPROPERTY()\nfloat Speed;\n\nUPROPERTY()\nint32 JumpHeight;"}
{"bad_code": "public:\n    void Run(); void Walk();\nprivate: int RunSpeed;", "good_code": "public:\n    void Run();\n    void Walk();\n\nprivate:\n    int32 RunSpeed;"}
{"bad_code": "if(bIsEnabled) SetActive(true);", "good_code": "if (bIsEnabled)\n{\n    SetActive(true);\n}"}
{"bad_code": "int32 Sum = 0;for(int i=0;i<10;i++){Sum+=i;}", "good_code": "int32 Sum = 0;\n\nfor (int32 i = 0; i < 10; i++)\n{\n    Sum += i;\n}"}
{"bad_code": "UFUNCTION()\nvoid OnStart(){}; virtual void Tick(float DeltaTime) override{};", "good_code": "UFUNCTION()\nvoid OnStart();\n\nvirtual void Tick(float DeltaTime) override;"}
{"bad_code": "UPROPERTY()\nbool IsRunning;\nUPROPERTY(BlueprintReadOnly)\nbool bIsJumping;", "good_code": "UPROPERTY(BlueprintReadOnly)\nbool bIsJumping;\n\nUPROPERTY()\nbool bIsRunning;"}
{"bad_code": "int32 Calc(int32 a,int32 b){return a+b;}", "good_code": "int32 Calc(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic: AMyActor() { Health = 100; }\n\nvoid Activate() { bIsActive = true; }\nprivate: int32 Health; bool bIsActive; };", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprivate:\n    int32 Health;\n    bool bIsActive;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"Engine/Engine.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Engine.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\""}
{"bad_code": "UPROPERTY(EditAnywhere) float Speed, MaxSpeed;\n\npublic: void SetSpeed(float NewSpeed) { Speed = NewSpeed; }", "good_code": "UPROPERTY(EditAnywhere)\nfloat Speed;\n\nUPROPERTY(EditAnywhere)\nfloat MaxSpeed;\n\npublic:\n    void SetSpeed(float NewSpeed);"}
{"bad_code": "if (bIsDead) Destroy();\nelse {\n    Health += 10;\n    if (Health > MaxHealth) Health = MaxHealth;\n}", "good_code": "if (bIsDead)\n{\n    Destroy();\n}\nelse\n{\n    Health += 10;\n\n    if (Health > MaxHealth)\n    {\n        Health = MaxHealth;\n    }\n}"}
{"bad_code": "UENUM() enum class EState { Idle, Running, Jumping };\n\nvoid AMyCharacter::Run() { State = EState::Running; }", "good_code": "UENUM()\nenum class EState\n{\n    Idle,\n    Running,\n    Jumping\n};\n\nvoid AMyCharacter::Run()\n{\n    State = EState::Running;\n}"}
{"bad_code": "for (int32 i=0; i<10; i++) { DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Action\") void Jump() { /* Implementation */ }", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Action\")\nvoid Jump();"}
{"bad_code": "UPROPERTY(float, Category=\"Movement\") float Speed;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nfloat Speed;"}
{"bad_code": "int32 CalculateResult(int32 A,int32 B){return A+B;}", "good_code": "int32 CalculateResult(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "if(bCanJump){Jump();}\nelse{Fall();}", "good_code": "if (bCanJump)\n{\n    Jump();\n}\nelse\n{\n    Fall();\n}"}
{"bad_code": "#include \"MyGame.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\npublic:\n    AMyActor();\n    virtual void BeginPlay() override;\nprivate:\n    int32 Health; int32 Armor;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter{\npublic:\n    AMyCharacter();\nprotected:\n    void Jump() override{}\n    void Crouch() override{}\nprivate:\n    float Speed;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprotected:\n    void Jump() override;\n\n    void Crouch() override;\n\nprivate:\n    float Speed;\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=\"Movement\") float MaxSpeed;\nUPROPERTY(EditAnywhere, Category=\"Health\") float Health;", "good_code": "UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = \"Movement\")\nfloat MaxSpeed;\n\nUPROPERTY(EditAnywhere, Category = \"Health\")\nfloat Health;"}
{"bad_code": "void AMyActor::Activate() { if(!bIsActive) { bIsActive = true; }}", "good_code": "void AMyActor::Activate()\n{\n    if (!bIsActive)\n    {\n        bIsActive = true;\n    }\n}"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) { Super::Tick(DeltaTime); MoveForward(); }\nvoid AMyActor::MoveForward(){}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    MoveForward();\n}\n\nvoid AMyActor::MoveForward()\n{\n}"}
{"bad_code": "if(bIsVisible){SetActorHiddenInGame(false);}\nelse{SetActorHiddenInGame(true);}", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "enum class EState{Idle, Running, Jumping};", "good_code": "UENUM()\nenum class EState\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "void Function1(){int a=0;int b=1;}", "good_code": "void Function1()\n{\n    int a = 0;\n    int b = 1;\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "bool bIsActive=false;\nbool bIsVisible=true;", "good_code": "bool bIsActive = false;\n\nbool bIsVisible = true;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyActor.h\"\n#include \"Engine/World.h\"\nclass AMyActor : public AActor {\npublic:\n    AMyActor(){}\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyActor.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n    }\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) int32 Health, MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly)\nint32 Health;\n\nUPROPERTY(BlueprintReadOnly)\nint32 MaxHealth;"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter {\npublic: AMyCharacter();\nprivate: int32 Health; void ResetHealth(){} void ResetState(){} \n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprivate:\n    int32 Health;\n\n    void ResetHealth()\n    {\n    }\n\n    void ResetState()\n    {\n    }\n};"}
{"bad_code": "void SetVisibility(bool bVisible) { if(bVisible) SetActorHiddenInGame(false); else SetActorHiddenInGame(true); }", "good_code": "void SetVisibility(bool bVisible)\n{\n    if (bVisible)\n    {\n        SetActorHiddenInGame(false);\n    }\n    else\n    {\n        SetActorHiddenInGame(true);\n    }\n}"}
{"bad_code": "int32 A =10;int32 B= 20;int32 Result=A+B;", "good_code": "int32 A = 10;\nint32 B = 20;\nint32 Result = A + B;"}
{"bad_code": "UFUNCTION(BlueprintCallable)void Jump(); void Land();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();\n\nvoid Land();"}
{"bad_code": "public: int32 Health; UPROPERTY(BlueprintReadOnly) float Speed;", "good_code": "public:\n    int32 Health;\n\n    UPROPERTY(BlueprintReadOnly)\n    float Speed;"}
{"bad_code": "while(true){ DoSomething(); };", "good_code": "while (true)\n{\n    DoSomething();\n}"}
{"bad_code": "UENUM() enum class EPlayerState { Idle, Running, Jumping };", "good_code": "UENUM()\nenum class EPlayerState\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "if(SomethingHappened) DoSomething();", "good_code": "if (SomethingHappened)\n{\n    DoSomething();\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    UMyComponent() {PrimaryComponentTick.bCanEverTick = true;}\n\n    void BeginPlay() override {Super::BeginPlay();}\n\n    void Activate(bool bReset) {if (bReset) {bIsActive = true;}}\n\n    bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    virtual void BeginPlay() override;\n\n    void Activate(bool bReset);\n\nprivate:\n    bool bIsActive;\n};\n\nUMyComponent::UMyComponent()\n{\n    PrimaryComponentTick.bCanEverTick = true;\n}\n\nvoid UMyComponent::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid UMyComponent::Activate(bool bReset)\n{\n    if (bReset)\n    {\n        bIsActive = true;\n    }\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats {\n    GENERATED_BODY()\n\n    UPROPERTY()\n    int32 Health, Stamina;\n\n    UPROPERTY()\n    float Speed;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY()\n    int32 Health;\n\n    UPROPERTY()\n    int32 Stamina;\n\n    UPROPERTY()\n    float Speed;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter()\n    { MovementSpeed = 600; }\n\n    void Tick(float DeltaTime) override\n    { Super::Tick(DeltaTime); }\n\n    void Sprint() {MovementSpeed = 1200;}\n\nprivate:\n    float MovementSpeed;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void Tick(float DeltaTime) override;\n\n    void Sprint();\n\nprivate:\n    float MovementSpeed;\n};\n\nAMyCharacter::AMyCharacter()\n{\n    MovementSpeed = 600;\n}\n\nvoid AMyCharacter::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}\n\nvoid AMyCharacter::Sprint()\n{\n    MovementSpeed = 1200;\n}"}
{"bad_code": "UPROPERTY(EditAnywhere)\nint32 AmmoCount;UPROPERTY(EditAnywhere)\nint32 MaxAmmo;", "good_code": "UPROPERTY(EditAnywhere)\nint32 AmmoCount;\n\nUPROPERTY(EditAnywhere)\nint32 MaxAmmo;"}
{"bad_code": "UENUM()\nenum class EWeaponType { \n    Pistol, \n    Rifle, Shotgun };", "good_code": "UENUM()\nenum class EWeaponType\n{\n    Pistol,\n    Rifle,\n    Shotgun\n};"}
{"bad_code": "UCLASS()\nclass AMyWeapon : public AActor {\npublic:\n    AMyWeapon() : Damage(10) {}\n\n    void Fire() {if (Ammo > 0) {Ammo--;}}\n\nprivate:\n    int32 Ammo;\n    int32 Damage;\n};", "good_code": "UCLASS()\nclass AMyWeapon : public AActor\n{\npublic:\n    AMyWeapon();\n\n    void Fire();\n\nprivate:\n    int32 Ammo;\n    int32 Damage;\n};\n\nAMyWeapon::AMyWeapon()\n    : Damage(10)\n{\n}\n\nvoid AMyWeapon::Fire()\n{\n    if (Ammo > 0)\n    {\n        Ammo--;\n    }\n}"}
{"bad_code": "UPROPERTY()\nFVector Position, Rotation;", "good_code": "UPROPERTY()\nFVector Position;\n\nUPROPERTY()\nFVector Rotation;"}
{"bad_code": "UCLASS()\nclass ANPC : public ACharacter {\npublic:\n    ANPC() {}\n\n    void Speak() {UE_LOG(LogTemp, Warning, TEXT(\"Hello!\"));}\n};", "good_code": "UCLASS()\nclass ANPC : public ACharacter\n{\npublic:\n    ANPC();\n\n    void Speak();\n};\n\nANPC::ANPC()\n{\n}\n\nvoid ANPC::Speak()\n{\n    UE_LOG(LogTemp, Warning, TEXT(\"Hello!\"));\n}"}
{"bad_code": "UPROPERTY()\nbool bIsVisible, bIsActive;", "good_code": "UPROPERTY()\nbool bIsVisible;\n\nUPROPERTY()\nbool bIsActive;"}
{"bad_code": "UCLASS()\nclass AEnemy : public ACharacter {\npublic:\n    AEnemy() : Health(100) {}\n\n    void Attack() {if (bCanAttack) {Health--;}}\n\nprivate:\n    int32 Health;\n    bool bCanAttack;\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    AEnemy();\n\n    void Attack();\n\nprivate:\n    int32 Health;\n    bool bCanAttack;\n};\n\nAEnemy::AEnemy()\n    : Health(100)\n{\n}\n\nvoid AEnemy::Attack()\n{\n    if (bCanAttack)\n    {\n        Health--;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    virtual void BeginPlay() override {\n        int32 Health, Stamina;\n        Health=100;Stamina=50;\n        if (Health > 0) SetActorHiddenInGame(false); \n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n    int32 Stamina;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Health = 100;\n    Stamina = 50;\n\n    if (Health > 0)\n    {\n        SetActorHiddenInGame(false);\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite) int32 Health, Stamina;\nUFUNCTION() void ResetHealth() {Health = 100; Stamina = 50;}", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nint32 Stamina;\n\nUFUNCTION()\nvoid ResetHealth()\n{\n    Health = 100;\n    Stamina = 50;\n}"}
{"bad_code": "#include \"Components/ActorComponent.h\"#include \"GameFramework/Actor.h\"\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent: public UActorComponent{\n    GENERATED_BODY()\npublic:\n    UMyComponent() {}\n};", "good_code": "#include \"Components/ActorComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n};\n\nUMyComponent::UMyComponent()\n{\n}"}
{"bad_code": "int32 CalculateScore(int32 A,int32 B){return A+B;}", "good_code": "int32 CalculateScore(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "bool bEnabled=true;if(bEnabled){DoSomething();}", "good_code": "bool bEnabled = true;\n\nif (bEnabled)\n{\n    DoSomething();\n}"}
{"bad_code": "UENUM()enum class EGameState:uint8{Idle,Playing,Paused};", "good_code": "UENUM()\nenum class EGameState : uint8\n{\n    Idle,\n    Playing,\n    Paused\n};"}
{"bad_code": "int32 x=5, y=10;int32 z=x+y;", "good_code": "int32 x = 5;\nint32 y = 10;\nint32 z = x + y;"}
{"bad_code": "for(int32 i=0;i<10;i++)DoSomething();", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UPROPERTY()float Value;\nUPROPERTY(BlueprintReadWrite)float MaxValue;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Default\")\nfloat MaxValue;\n\nUPROPERTY(Category = \"Default\")\nfloat Value;"}
{"bad_code": "#include \"MyActor.h\"#include \"GameFramework/Actor.h\"\nAMyActor::AMyActor(){}", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nAMyActor::AMyActor()\n{\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyActor.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic: AMyActor(){};\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n    }\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"General\") int32 MaxHealth, MinHealth;", "good_code": "UPROPERTY(EditAnywhere, Category = \"General\")\nint32 MaxHealth;\n\nUPROPERTY(EditAnywhere, Category = \"General\")\nint32 MinHealth;"}
{"bad_code": "void DoSomething() {\n    if(bIsReady) DoSomethingElse();\n}", "good_code": "void DoSomething()\n{\n    if (bIsReady)\n    {\n        DoSomethingElse();\n    }\n}"}
{"bad_code": "int32 Calculate(int32 A,int32 B){return A+B;}", "good_code": "int32 Calculate(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "USTRUCT() struct FMyStruct{int32 Value;};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 Value;\n};"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Start() { }", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Start()\n{\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoWork();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoWork();\n}"}
{"bad_code": "void MyFunction() {} void AnotherFunction() {}", "good_code": "void MyFunction()\n{\n}\n\nvoid AnotherFunction()\n{\n}"}
{"bad_code": "class UMyComponent : public UActorComponent{public: UMyComponent(){}};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent()\n    {\n    }\n};"}
{"bad_code": "int32 Sum(int32 X, int32 Y){return X*Y;}", "good_code": "int32 Sum(int32 X, int32 Y)\n{\n    return X * Y;\n}"}
{"bad_code": "#include \"MyActorComponent.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS() class UMyActorComponent : public UActorComponent {\npublic:\n    UMyActorComponent() {}\n    void BeginPlay() override;\nprivate:\n    float Speed, Height;\n    bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActorComponent.h\"\n\nUCLASS()\nclass UMyActorComponent : public UActorComponent\n{\npublic:\n    UMyActorComponent();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    float Speed;\n    float Height;\n    bool bIsActive;\n};"}
{"bad_code": "#include \"Components/SceneComponent.h\"\n#include \"MyProjectile.h\"\n\nUCLASS() class AMyProjectile : public AActor {\n    GENERATED_BODY()\n    public:\n    AMyProjectile() { PrimaryActorTick.bCanEverTick = true; }\n    void Tick(float DeltaTime) override;\n    void FireInDirection(const FVector& ShootDirection) { ProjectileMovement->Velocity = ShootDirection * ProjectileMovement->InitialSpeed;}\n    UProjectileMovementComponent* ProjectileMovement;\n};", "good_code": "#include \"Components/SceneComponent.h\"\n\n#include \"MyProjectile.h\"\n\nUCLASS()\nclass AMyProjectile : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyProjectile();\n\n    virtual void Tick(float DeltaTime) override;\n\n    void FireInDirection(const FVector& ShootDirection);\n\nprivate:\n    UProjectileMovementComponent* ProjectileMovement;\n};\n\nAMyProjectile::AMyProjectile()\n{\n    PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyProjectile::FireInDirection(const FVector& ShootDirection)\n{\n    ProjectileMovement->Velocity = ShootDirection * ProjectileMovement->InitialSpeed;\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n\nvoid AMyCharacter::BeginPlay() {\n    Super::BeginPlay();\n    Health = 100; MovementSpeed = 600;\n    if(Health > 0)\n        { bIsAlive = true; }\n    else bIsAlive = false; }", "good_code": "#include \"MyCharacter.h\"\n\nvoid AMyCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n\n    Health = 100;\n    MovementSpeed = 600;\n\n    if (Health > 0)\n    {\n        bIsAlive = true;\n    }\n    else\n    {\n        bIsAlive = false;\n    }\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n\nvoid AMyGameMode::StartPlay() {\n    Super::StartPlay();\n\n    if(GameState == EGameState::Playing) {\n        StartMatch(); }\n    else EndMatch();\n}", "good_code": "#include \"MyGameMode.h\"\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n\n    if (GameState == EGameState::Playing)\n    {\n        StartMatch();\n    }\n    else\n    {\n        EndMatch();\n    }\n}"}
{"bad_code": "#include \"MyAIController.h\"\n\nvoid AMyAIController::OnPossess(APawn* InPawn) {\n    Super::OnPossess(InPawn);  BlackboardComp = CreateDefaultSubobject<UBlackboardComponent>(TEXT(\"BlackboardComp\")); }", "good_code": "#include \"MyAIController.h\"\n\nvoid AMyAIController::OnPossess(APawn* InPawn)\n{\n    Super::OnPossess(InPawn);\n\n    BlackboardComp = CreateDefaultSubobject<UBlackboardComponent>(TEXT(\"BlackboardComp\"));\n}"}
{"bad_code": "#include \"MyWidget.h\"\n\nvoid UMyWidget::NativeConstruct() {\n    Super::NativeConstruct();\n    if(HealthBar)\n    { \n        HealthBar->SetPercent(Health / MaxHealth); }\n}", "good_code": "#include \"MyWidget.h\"\n\nvoid UMyWidget::NativeConstruct()\n{\n    Super::NativeConstruct();\n\n    if (HealthBar)\n    {\n        HealthBar->SetPercent(Health / MaxHealth);\n    }\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n\nvoid AMyPlayerController::SetupInputComponent() {\n    Super::SetupInputComponent();\n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump); }", "good_code": "#include \"MyPlayerController.h\"\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n\n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);\n}"}
{"bad_code": "#include \"MyVehicle.h\"\n\nvoid AMyVehicle::Accelerate(float Value) {\n    if(Value > 0) { Speed += Value; }\n    else { Speed -= Value; }\n}", "good_code": "#include \"MyVehicle.h\"\n\nvoid AMyVehicle::Accelerate(float Value)\n{\n    if (Value > 0)\n    {\n        Speed += Value;\n    }\n    else\n    {\n        Speed -= Value;\n    }\n}"}
{"bad_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGameInstance.h\"\n\nUMyGameInstance::UMyGameInstance() {\n    ItemCount = 0; bIsGamePaused = false; }", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameInstance.h\"\n\nUMyGameInstance::UMyGameInstance()\n{\n    ItemCount = 0;\n    bIsGamePaused = false;\n}"}
{"bad_code": "#include \"MyHUD.h\"\n\nvoid AMyHUD::DrawHUD() {\n    Super::DrawHUD();\n    if(bShowMinimap) {\n        DrawMinimap(); }\n}", "good_code": "#include \"MyHUD.h\"\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n\n    if (bShowMinimap)\n    {\n        DrawMinimap();\n    }\n}"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter { public: AMyCharacter(){} void StartRun(); int Health; };", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void StartRun();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, Category=\"Stats\") float MaxSpeed;\nUPROPERTY(BlueprintReadWrite, Category=\"Stats\") float MinSpeed;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nfloat MaxSpeed;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nfloat MinSpeed;"}
{"bad_code": "if(bIsRunning){Speed += 10;}\nelse{Speed -= 5;}", "good_code": "if (bIsRunning)\n{\n    Speed += 10;\n}\nelse\n{\n    Speed -= 5;\n}"}
{"bad_code": "int32 A = 10, B = 20, C = 30;\nint32 Result=A+B+C;", "good_code": "int32 A = 10;\nint32 B = 20;\nint32 C = 30;\n\nint32 Result = A + B + C;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyProjectCharacter.h\"\n#include \"Kismet/GameplayStatics.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Kismet/GameplayStatics.h\"\n\n#include \"MyProjectCharacter.h\""}
{"bad_code": "void MyFunction(){int32 Value=5;if(Value>0){DoSomething();}}", "good_code": "void MyFunction()\n{\n    int32 Value = 5;\n\n    if (Value > 0)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "UFUNCTION() void DoAction();\nUFUNCTION(BlueprintCallable, Category=\"Actions\") void Jump();", "good_code": "UFUNCTION()\nvoid DoAction();\n\nUFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Jump();"}
{"bad_code": "class AMovementComponent : public UActorComponent{ public: AMovementComponent(){} void Accelerate(){} protected: void Stop(){} private: float Speed; bool bIsActive; };", "good_code": "class AMovementComponent : public UActorComponent\n{\npublic:\n    AMovementComponent();\n\n    void Accelerate();\n\nprotected:\n    void Stop();\n\nprivate:\n    float Speed;\n    bool bIsActive;\n};"}
{"bad_code": "#define my_macro 100\n#define ANOTHER_MACRO 200", "good_code": "#define MY_MACRO 100\n#define ANOTHER_MACRO 200"}
{"bad_code": "void Execute(){if(bCanExecute){PerformTask();}else{AbortTask();}}", "good_code": "void Execute()\n{\n    if (bCanExecute)\n    {\n        PerformTask();\n    }\n    else\n    {\n        AbortTask();\n    }\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\n    AMyCharacter()\n    {\n        Health = 100; MovementSpeed = 600;\n    }\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprivate:\n    int32 Health;\n    int32 MovementSpeed;\n};\n\nAMyCharacter::AMyCharacter()\n{\n    Health = 100;\n    MovementSpeed = 600;\n}"}
{"bad_code": "UCLASS()\nclass AMyPlayer : public AActor\n{\n    UPROPERTY(BlueprintReadOnly)\n    bool IsAlive;\n    UPROPERTY()\n    float MaxHealth;\n};", "good_code": "UCLASS()\nclass AMyPlayer : public AActor\n{\npublic:\n    AMyPlayer();\n\nprivate:\n    UPROPERTY(BlueprintReadOnly, Category = \"Status\")\n    bool bIsAlive;\n\n    UPROPERTY(Category = \"Health\")\n    float MaxHealth;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    int32 CalculateScore(int32 BaseScore, int32 Multiplier)\n    {\n        return BaseScore*Multiplier;\n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    int32 CalculateScore(int32 BaseScore, int32 Multiplier);\n\nprivate:\n    int32 BaseScore;\n    int32 Multiplier;\n};\n\nint32 AMyActor::CalculateScore(int32 BaseScore, int32 Multiplier)\n{\n    return BaseScore * Multiplier;\n}"}
{"bad_code": "UENUM()\nenum class EGameState\n{\n    Playing, Paused, GameOver\n};", "good_code": "UENUM()\nenum class EGameState\n{\n    Playing,\n    Paused,\n    GameOver\n};"}
{"bad_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    void StartPlay() override\n    {\n        Super::StartPlay();\n        if (bIsGameActive) return;\n        bIsGameActive = true;\n    }\n};", "good_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    virtual void StartPlay() override;\n\nprivate:\n    bool bIsGameActive;\n};\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n\n    if (bIsGameActive)\n    {\n        return;\n    }\n\n    bIsGameActive = true;\n}"}
{"bad_code": "UCLASS()\nclass AMyPawn : public APawn\n{\n    void MoveForward(float Value)\n    {\n        AddMovementInput(GetActorForwardVector(),Value);\n    }\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    void MoveForward(float Value);\n\nprivate:\n    float Value;\n};\n\nvoid AMyPawn::MoveForward(float Value)\n{\n    AddMovementInput(GetActorForwardVector(), Value);\n}"}
{"bad_code": "UCLASS()\nclass AMyController : public APlayerController\n{\n    void SetupInputComponent() override\n    {\n        Super::SetupInputComponent();\n        InputComponent->BindAxis(\"MoveForward\", this, &AMyController::MoveForward);\n    }\n};", "good_code": "UCLASS()\nclass AMyController : public APlayerController\n{\npublic:\n    virtual void SetupInputComponent() override;\n\nprivate:\n    void MoveForward(float Value);\n};\n\nvoid AMyController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n\n    InputComponent->BindAxis(\"MoveForward\", this, &AMyController::MoveForward);\n}"}
{"bad_code": "USTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n    UPROPERTY()\n    int32 Strength, Agility;\n};", "good_code": "USTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(Category = \"Attributes\")\n    int32 Strength;\n\n    UPROPERTY(Category = \"Attributes\")\n    int32 Agility;\n};"}
{"bad_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\n    void Activate(bool bReset)\n    {\n        Super::Activate(bReset); if (!bIsActive) { bIsActive = true; }\n    }\n};", "good_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\npublic:\n    virtual void Activate(bool bReset) override;\n\nprivate:\n    bool bIsActive;\n};\n\nvoid AMyComponent::Activate(bool bReset)\n{\n    Super::Activate(bReset);\n\n    if (!bIsActive)\n    {\n        bIsActive = true;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyHUD : public AHUD\n{\n    void DrawHUD() override\n    {\n        Super::DrawHUD(); DrawText(\"Score: 100\", FColor::White, 10, 10);\n    }\n};", "good_code": "UCLASS()\nclass AMyHUD : public AHUD\n{\npublic:\n    virtual void DrawHUD() override;\n\nprivate:\n    FString ScoreText;\n};\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n\n    DrawText(\"Score: 100\", FColor::White, 10, 10);\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic: AMyActor(){}\n\nvoid BeginPlay() override { Super::BeginPlay();}\n\nvoid Activate() { /* Implementation */ }\n\nprotected: void ResetState() {}\n\nprivate:int32 Health; };", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyActor::Activate()\n{\n    // Implementation\n}\n\nvoid AMyActor::ResetState()\n{\n    // Implementation\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Stats\") float Health,MaxHealth;", "good_code": "UPROPERTY(EditAnywhere, Category = \"Stats\")\nfloat Health;\n\nUPROPERTY(EditAnywhere, Category = \"Stats\")\nfloat MaxHealth;"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"EngineMinimal.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"EngineMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();"}
{"bad_code": "public:\nvoid SetSpeed(float NewSpeed) { m_Speed=NewSpeed; }", "good_code": "public:\nvoid SetSpeed(float NewSpeed)\n{\n    m_Speed = NewSpeed;\n}"}
{"bad_code": "int32 Sum(int32 A,int32 B){return A+B;}", "good_code": "int32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "for (int32 i=0;i<10;++i) { DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "bool bIsAlive=true;\nbool bCanJump=false;", "good_code": "bool bIsAlive = true;\nbool bCanJump = false;"}
{"bad_code": "if(Health<0) { Die(); }\nelse if(Health<MaxHealth) { Heal(); }", "good_code": "if (Health < 0)\n{\n    Die();\n}\nelse if (Health < MaxHealth)\n{\n    Heal();\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void Tick(float DeltaTime) override {\n        // Implementation\n    }\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter {\n  int Health; bool bIsDead;\npublic:\n  AMyCharacter() {}\n  void BeginPlay() override {}\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int Health;\n    bool bIsDead;\n};"}
{"bad_code": "UPROPERTY(Category=\"Stats\", BlueprintReadWrite)\nint32 Score, Lives;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nint32 Score;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nint32 Lives;"}
{"bad_code": "int Add(int A, int B) { return A+B; }", "good_code": "int Add(int A, int B)\n{\n    return A + B;\n}"}
{"bad_code": "void DoSomething() {\n  int A=10; int B=20; int Result=A+B; \n}", "good_code": "void DoSomething()\n{\n    int A = 10;\n    int B = 20;\n    int Result = A + B;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Actions\") void Move();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Move();"}
{"bad_code": "if (Condition) DoSomething();", "good_code": "if (Condition)\n{\n    DoSomething();\n}"}
{"bad_code": "for (int i=0;i<10;++i) { /* loop body */ }", "good_code": "for (int i = 0; i < 10; ++i)\n{\n    // loop body\n}"}
{"bad_code": "bool IsVisible; float Opacity;", "good_code": "bool bIsVisible;\nfloat Opacity;"}
{"bad_code": "class UMyComponent: public UActorComponent{void Activate(){}};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    void Activate();\n};"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter { public: AMyCharacter() {} protected: float MaxHealth; void ResetHealth() {} };", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprotected:\n    float MaxHealth;\n\n    void ResetHealth();\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyActor.h\"\n#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyActor.h\""}
{"bad_code": "UPROPERTY(Category = \"Movement\", BlueprintReadOnly) float Speed;UPROPERTY(Category = \"Movement\", BlueprintReadOnly) float JumpHeight;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat JumpHeight;"}
{"bad_code": "void CalculateDamage() {int32 Damage = BaseDamage*Multiplier;if(Damage > MaxDamage)Damage = MaxDamage;}", "good_code": "void CalculateDamage()\n{\n    int32 Damage = BaseDamage * Multiplier;\n    \n    if (Damage > MaxDamage)\n    {\n        Damage = MaxDamage;\n    }\n}"}
{"bad_code": "bool bIsVisible;bool bHasStarted;bool bIsPendingKill;", "good_code": "bool bIsVisible;\n\nbool bHasStarted;\n\nbool bIsPendingKill;"}
{"bad_code": "UENUM() enum class EPlayerState { Idle, Running, Jumping };", "good_code": "UENUM()\nenum class EPlayerState\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "UFUNCTION(BlueprintCallable) void StartGame(); UFUNCTION(BlueprintCallable) void EndGame();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid StartGame();\n\nUFUNCTION(BlueprintCallable)\nvoid EndGame();"}
{"bad_code": "int32 Health, MaxHealth;bool bIsAlive;", "good_code": "int32 Health;\n\nint32 MaxHealth;\n\nbool bIsAlive;"}
{"bad_code": "public: void Initialize(); virtual void BeginPlay() override; protected: void Reset(); private: int32 Score;", "good_code": "public:\n    void Initialize();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void Reset();\n\nprivate:\n    int32 Score;"}
{"bad_code": "#define MYGAME_API __declspec(dllexport) class UMyComponent : public UActorComponent { GENERATED_BODY() };", "good_code": "#define MYGAME_API __declspec(dllexport)\n\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n};"}
{"bad_code": "#include \"MyProjectCharacter.h\"\n#include \"Engine.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyProjectCharacter: public ACharacter {\npublic:\n    void BeginPlay() override;\n\n    UPROPERTY(EditAnywhere)\n    float MaxHealth;\n};", "good_code": "#include \"Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProjectCharacter.h\"\n\nUCLASS()\nclass AMyProjectCharacter : public ACharacter\n{\npublic:\n    virtual void BeginPlay() override;\n\n    UPROPERTY(EditAnywhere)\n    float MaxHealth;\n};"}
{"bad_code": "void MyFunction() { int Result=A+B; if(Result>0) { DoSomething(); } }", "good_code": "void MyFunction()\n{\n    int Result = A + B;\n\n    if (Result > 0)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "class MyClass : public AActor {\n    MyClass() : Health(100), Armor(50) {}\n\nprivate:\n    int32 Health, Armor;\n};", "good_code": "class MyClass : public AActor\n{\npublic:\n    MyClass()\n        : Health(100)\n        , Armor(50)\n    {\n    }\n\nprivate:\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Health, Armor;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Health;\n\nUPROPERTY(EditAnywhere)\nint32 Armor;"}
{"bad_code": "if(bIsActive) DoAction();", "good_code": "if (bIsActive)\n{\n    DoAction();\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    UMyComponent() {}\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent()\n    {\n    }\n};"}
{"bad_code": "AMyActor::AMyActor() : Speed(100), Health(100) {}", "good_code": "AMyActor::AMyActor()\n    : Speed(100)\n    , Health(100)\n{\n}"}
{"bad_code": "public: void Reset() {}", "good_code": "public:\n    void Reset()\n    {\n    }"}
{"bad_code": "bool bIsReady=true; if(bIsReady){StartProcess();}", "good_code": "bool bIsReady = true;\n\nif (bIsReady)\n{\n    StartProcess();\n}"}
{"bad_code": "int32 CalculateResult(int32 A,int32 B) {return A+B;}", "good_code": "int32 CalculateResult(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "#include \"SomeOtherHeader.h\"\n#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass MYGAME_API AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode() {}\n\n    virtual void StartPlay() override {\n        Super::StartPlay();\n    }\n\n    void ResetGame() { World = GetWorld(); }\n\nprivate:\n    UPROPERTY()\n    UWorld* World;\n};", "good_code": "#include \"Engine/World.h\"\n\n#include \"MyGameMode.h\"\n#include \"SomeOtherHeader.h\"\n\nUCLASS()\nclass MYGAME_API AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode()\n    {\n    }\n\n    virtual void StartPlay() override\n    {\n        Super::StartPlay();\n    }\n\n    void ResetGame()\n    {\n        World = GetWorld();\n    }\n\nprivate:\n    UPROPERTY()\n    UWorld* World;\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\npublic:\n    AMyCharacter();\n    void BeginPlay() override;\n    void MoveForward(float Value);\nprotected:\n    void Jump();\nprivate:\n    float Health, Stamina;\n    bool bIsRunning;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void MoveForward(float Value);\n\nprotected:\n    void Jump();\n\nprivate:\n    float Health;\n    float Stamina;\n    bool bIsRunning;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadOnly)\nint32 Score;\nUPROPERTY()\nint32 Lives;\nUFUNCTION(BlueprintImplementableEvent)\nvoid OnPlayerDeath();", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere)\nint32 Score;\n\nUPROPERTY()\nint32 Lives;\n\nUFUNCTION(BlueprintImplementableEvent)\nvoid OnPlayerDeath();"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) {\n    if(DeltaTime > 0.0f)\n    { DoSomething(); }\n}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    if (DeltaTime > 0.0f)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "class UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    float GetSpeed() { return Speed; }\nprivate:\n    float Speed;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    float GetSpeed()\n    {\n        return Speed;\n    }\n\nprivate:\n    float Speed;\n};"}
{"bad_code": "public:\n    void AMyActor::SetHealth(int32 value) {\n        Health = value;\n    }\nprivate:\n    int32 Health;", "good_code": "public:\n    void AMyActor::SetHealth(int32 Value)\n    {\n        Health = Value;\n    }\n\nprivate:\n    int32 Health;"}
{"bad_code": "void AMyActor::SetVisible(bool isVisible) { bIsVisible = isVisible; }", "good_code": "void AMyActor::SetVisible(bool bIsVisible)\n{\n    this->bIsVisible = bIsVisible;\n}"}
{"bad_code": "if (bIsActive) { Deactivate(); } else { Activate(); }", "good_code": "if (bIsActive)\n{\n    Deactivate();\n}\nelse\n{\n    Activate();\n}"}
{"bad_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats {\n    GENERATED_BODY()\n    UPROPERTY()\n    int32 Kills;\n    UPROPERTY(BlueprintReadOnly)\n    int32 Deaths;\n};", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY()\n    int32 Kills;\n\n    UPROPERTY(BlueprintReadOnly)\n    int32 Deaths;\n};"}
{"bad_code": "void AMyCharacter::Heal(int32 amount) { Health += amount; if (Health > MaxHealth) { Health = MaxHealth; } }", "good_code": "void AMyCharacter::Heal(int32 Amount)\n{\n    Health += Amount;\n    \n    if (Health > MaxHealth)\n    {\n        Health = MaxHealth;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic: AMyActor(); virtual void BeginPlay() override; void Activate(); protected: void ResetState(); private: int32 Health;};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\") float MaxHealth, MinHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MinHealth;"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameMode.h\""}
{"bad_code": "bool bIsVisible=true; int32 Count=0; if(bIsVisible){Count++;Count++;}else{Count--;}", "good_code": "bool bIsVisible = true;\nint32 Count = 0;\n\nif (bIsVisible)\n{\n    Count++;\n    Count++;\n}\nelse\n{\n    Count--;\n}"}
{"bad_code": "void DoSomething()\n{\n    if(bCondition) { return; }\n    int32 Value = 10; Value += 5;\n}", "good_code": "void DoSomething()\n{\n    if (bCondition)\n    {\n        return;\n    }\n\n    int32 Value = 10;\n    Value += 5;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) int32 Health; UFUNCTION() void Heal();", "good_code": "UPROPERTY(BlueprintReadOnly)\nint32 Health;\n\nUFUNCTION()\nvoid Heal();"}
{"bad_code": "for(int32 i=0;i<10;i++){DoAction();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoAction();\n}"}
{"bad_code": "if(Input == 1) { ActionOne(); } else if(Input == 2) { ActionTwo(); } else { ActionDefault(); }", "good_code": "if (Input == 1)\n{\n    ActionOne();\n}\nelse if (Input == 2)\n{\n    ActionTwo();\n}\nelse\n{\n    ActionDefault();\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyActor.h\"\n#include \"Components/StaticMeshComponent.h\"", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "UENUM()\nenum class EMyEnum : uint8 { OptionOne, OptionTwo, OptionThree };", "good_code": "UENUM()\nenum class EMyEnum : uint8\n{\n    OptionOne,\n    OptionTwo,\n    OptionThree\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nclass AMyActor: public AActor {\npublic:\n    AMyActor() {}\n    void BeginPlay() override;\n    void Activate() {}\nprivate:\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Health\") float MaxHealth;\nUFUNCTION(BlueprintCallable) void Heal(float Amount);", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUFUNCTION(BlueprintCallable)\nvoid Heal(float Amount);"}
{"bad_code": "bool bIsVisible; bool bIsActive;\n\nif(bIsVisible) { SetActorHiddenInGame(false); }", "good_code": "bool bIsVisible;\nbool bIsActive;\n\nif (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "int32 Health, Armor;\n\nArmor = 50; Health = 100;", "good_code": "int32 Health;\nint32 Armor;\n\nArmor = 50;\nHealth = 100;"}
{"bad_code": "void MyFunction() {\n    int32 Result=A+B; \n}", "good_code": "void MyFunction()\n{\n    int32 Result = A + B;\n}"}
{"bad_code": "void Tick(float DeltaTime) override\n{\n    // Implementation\n}", "good_code": "void Tick(float DeltaTime) override\n{\n    // Implementation\n}"}
{"bad_code": "AMyActor()\n{\n    Health = 100;\n}", "good_code": "AMyActor()\n{\n    Health = 100;\n}"}
{"bad_code": "void MoveToTarget(float Speed) { m_Speed=Speed; }\n\nint32 Damage, Score;", "good_code": "void MoveToTarget(float Speed)\n{\n    m_Speed = Speed;\n}\n\nint32 Damage;\nint32 Score;"}
{"bad_code": "if(bCanJump) Jump();", "good_code": "if (bCanJump)\n{\n    Jump();\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats { int32 Health; int32 Mana; };", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Health;\n    int32 Mana;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/Engine.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n        PrimaryActorTick.bCanEverTick = true;\n    }\n    void BeginPlay() override\n    {\n        Super::BeginPlay();\n    }\n    void Tick(float DeltaTime) override\n    {\n        Super::Tick(DeltaTime);\n    }\n    bool bIsActive;\nprivate:\n    UPROPERTY()\n    int32 Health, Stamina;\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    virtual void Tick(float DeltaTime) override;\n\n    bool bIsActive;\n\nprivate:\n    UPROPERTY()\n    int32 Health;\n\n    UPROPERTY()\n    int32 Stamina;\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API AEnemyCharacter : public ACharacter\n{\npublic:\n    void Attack() { DoDamage(); }\nprotected:\n    void DoDamage(){}\n};", "good_code": "UCLASS()\nclass MYGAME_API AEnemyCharacter : public ACharacter\n{\npublic:\n    void Attack()\n    {\n        DoDamage();\n    }\n\nprotected:\n    void DoDamage()\n    {\n    }\n};"}
{"bad_code": "UENUM()\nenum EMovementType\n{\n    Walking,\n    Running\n};", "good_code": "UENUM()\nenum class EMovementType\n{\n    Walking,\n    Running\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyPlayer : public ACharacter\n{\n    UFUNCTION()\n    void MoveForward(float Value);\n    UFUNCTION()\n    void MoveRight(float Value);\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyPlayer : public ACharacter\n{\npublic:\n    UFUNCTION()\n    void MoveForward(float Value);\n\n    UFUNCTION()\n    void MoveRight(float Value);\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    UMyComponent();\n    void BeginPlay() override;\n    void Update();\n\nprivate:\n    float MaxRange;\n    float MinRange;\n};", "good_code": "UCLASS()\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    virtual void BeginPlay() override;\n\n    void Update();\n\nprivate:\n    float MaxRange;\n\n    float MinRange;\n};"}
{"bad_code": "UPROPERTY()\nint32 Score, Lives;", "good_code": "UPROPERTY()\nint32 Score;\n\nUPROPERTY()\nint32 Lives;"}
{"bad_code": "if(bIsVisible) { Hide(); } else { Show(); }", "good_code": "if (bIsVisible)\n{\n    Hide();\n}\nelse\n{\n    Show();\n}"}
{"bad_code": "float CalculateDamage(int32 BaseDamage, int32 Defense){return BaseDamage-Defense;}", "good_code": "float CalculateDamage(int32 BaseDamage, int32 Defense)\n{\n    return BaseDamage - Defense;\n}"}
{"bad_code": "UPROPERTY()\nbool bIsFlying;\nUPROPERTY()\nbool bIsRunning;\nUPROPERTY()\nbool bIsJumping;", "good_code": "UPROPERTY()\nbool bIsFlying;\n\nUPROPERTY()\nbool bIsRunning;\n\nUPROPERTY()\nbool bIsJumping;"}
{"bad_code": "UPROPERTY()\nint32 HealthPoints, ArmorPoints;\n\nvoid Heal(int32 Amount){HealthPoints+=Amount;}", "good_code": "UPROPERTY()\nint32 HealthPoints;\n\nUPROPERTY()\nint32 ArmorPoints;\n\nvoid Heal(int32 Amount)\n{\n    HealthPoints += Amount;\n}"}
{"bad_code": "UCLASS()\nclass AExampleActor : public AActor {\npublic:\n    AExampleActor() {\n        Init();\n    }\n    void Tick(float DeltaTime) override;\nprotected:\n    void Init() {\n        Health = 100;\n    }\nprivate:\n    int32 Health;\n    float Speed;\n};", "good_code": "UCLASS()\nclass AExampleActor : public AActor\n{\npublic:\n    AExampleActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprotected:\n    void Init();\n\nprivate:\n    int32 Health;\n    float Speed;\n};\n\nAExampleActor::AExampleActor()\n{\n    Init();\n}\n\nvoid AExampleActor::Init()\n{\n    Health = 100;\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Settings\")bool bIsActive;\nUPROPERTY(EditAnywhere, Category=\"Settings\")int32 Health, Armor;", "good_code": "UPROPERTY(EditAnywhere, Category = \"Settings\")\nbool bIsActive;\n\nUPROPERTY(EditAnywhere, Category = \"Settings\")\nint32 Health;\n\nUPROPERTY(EditAnywhere, Category = \"Settings\")\nint32 Armor;"}
{"bad_code": "void AMyCharacter::Die(){if(bIsAlive){bIsAlive=false;}}", "good_code": "void AMyCharacter::Die()\n{\n    if (bIsAlive)\n    {\n        bIsAlive = false;\n    }\n}"}
{"bad_code": "int32 Sum(int32 A, int32 B) { return A+B; }", "good_code": "int32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyCharacter.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameMode.h\""}
{"bad_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")int32 Health;UPROPERTY(BlueprintReadWrite, Category = \"Stats\")int32 Armor;\n};", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    int32 Health;\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\n    int32 Armor;\n};"}
{"bad_code": "class UMyComponent : public UActorComponent {\n    GENERATED_BODY()\n    public:\n    UFUNCTION(BlueprintCallable, Category=\"Actions\")void ActivateComponent();\n    private:\n    bool bIsActive;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Actions\")\n    void ActivateComponent();\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "void AMyActor::MoveToLocation(FVector Destination){FVector Direction=Destination-GetActorLocation();SetActorLocation(GetActorLocation()+Direction);}", "good_code": "void AMyActor::MoveToLocation(FVector Destination)\n{\n    FVector Direction = Destination - GetActorLocation();\n    SetActorLocation(GetActorLocation() + Direction);\n}"}
{"bad_code": "if(Health>0){bIsAlive=true;}else{bIsAlive=false;}", "good_code": "if (Health > 0)\n{\n    bIsAlive = true;\n}\nelse\n{\n    bIsAlive = false;\n}"}
{"bad_code": "class AMyAIController : public AAIController {\n    GENERATED_BODY()\n    public:\n    AMyAIController(){}\n    protected:\n    void BeginPlay() override{}\n    private:\n    void CalculatePath(){}\n};", "good_code": "class AMyAIController : public AAIController\n{\n    GENERATED_BODY()\n\npublic:\n    AMyAIController();\n\nprotected:\n    virtual void BeginPlay() override;\n\nprivate:\n    void CalculatePath();\n};\n\nAMyAIController::AMyAIController()\n{\n}\n\nvoid AMyAIController::BeginPlay()\n{\n}"}
{"bad_code": "UCLASS()\nclass MyActor: public AActor{\npublic:\n    MyActor();\n    virtual void BeginPlay() override;\n    private:\n    int Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly,Category=\"Health\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "int A, B, C;", "good_code": "int32 A;\nint32 B;\nint32 C;"}
{"bad_code": "void DoSomething()\n{\n    int A = 5;int B=10;\n    int Result=A+B;\n}", "good_code": "void DoSomething()\n{\n    int32 A = 5;\n\n    int32 B = 10;\n\n    int32 Result = A + B;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "UFUNCTION(BlueprintCallable) void Launch();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Launch();"}
{"bad_code": "public: AMovementComponent();", "good_code": "public:\n    AMovementComponent();"}
{"bad_code": "void MoveToTarget(){//Implementation}", "good_code": "void MoveToTarget()\n{\n    // Implementation\n}"}
{"bad_code": "#define MyMacro 1", "good_code": "#define MY_MACRO 1"}
{"bad_code": "#include \"MyProjectCharacter.h\"\n#include \"GameFramework/Actor.h\"\n\nclass AMyCharacter: public AActor {\npublic:\n    AMyCharacter();\n    void Tick(float DeltaTime) override; void Move();\n\nprivate:\n    float Speed; bool bIsJumping;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProjectCharacter.h\"\n\nclass AMyCharacter : public AActor\n{\npublic:\n    AMyCharacter();\n\n    void Tick(float DeltaTime) override;\n\n    void Move();\n\nprivate:\n    float Speed;\n    bool bIsJumping;\n};"}
{"bad_code": "if(bCanMove) {\n    MoveCharacter();\n}", "good_code": "if (bCanMove)\n{\n    MoveCharacter();\n}"}
{"bad_code": "int32 Health=100;int32 Armor=50;", "good_code": "int32 Health = 100;\nint32 Armor = 50;"}
{"bad_code": "void CalculateDamage(){int32 Damage=0;Damage=Health-Armor;}", "good_code": "void CalculateDamage()\n{\n    int32 Damage = 0;\n    Damage = Health - Armor;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Attributes\")int32 Health;\nUPROPERTY(BlueprintReadWrite, Category=\"Attributes\")int32 Stamina;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Attributes\")\nint32 Stamina;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Attributes\")\nint32 Health;"}
{"bad_code": "for(int32 i=0;i<10;++i)DoSomething();", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "bool IsGameOver=false;", "good_code": "bool bIsGameOver = false;"}
{"bad_code": "void MyFunction(){if(bIsActive)DoSomething();}", "good_code": "void MyFunction()\n{\n    if (bIsActive)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor{public:AMyActor(){}void BeginPlay()override{}};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void BeginPlay() override;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGameMode.h\"", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGameMode.h\""}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyCharacter.h\"\n\nAMyGameMode::AMyGameMode(){\n    DefaultPawnClass=AMyCharacter::StaticClass();\n    PlayerControllerClass=AMyPlayerController::StaticClass();}\n\nvoid AMyGameMode::BeginPlay(){\n    Super::BeginPlay();\n    if(GEngine)GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Game Started\"));}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameMode.h\"\n\nAMyGameMode::AMyGameMode()\n{\n    DefaultPawnClass = AMyCharacter::StaticClass();\n    PlayerControllerClass = AMyPlayerController::StaticClass();\n}\n\nvoid AMyGameMode::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (GEngine)\n    {\n        GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Game Started\"));\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor:public AActor{\npublic:\n    AMyActor();\n\n    void Tick(float DeltaTime)override;\n    virtual void BeginPlay()override;\n\nprivate:\n    float Health, Stamina;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n    void Tick(float DeltaTime) override;\n\nprivate:\n    float Health;\n    float Stamina;\n};"}
{"bad_code": "USTRUCT()\nstruct FMyStruct {\n    GENERATED_BODY()\n    int HealthPoints; int ManaPoints;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    int HealthPoints;\n    int ManaPoints;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Score;\n\nvoid IncreaseScore(){\n    Score+=10;}", "good_code": "UPROPERTY(EditAnywhere)\nint32 Score;\n\nvoid IncreaseScore()\n{\n    Score += 10;\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter{\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)override;\n    bool IsJumping;    \n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    virtual void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\n\nprivate:\n    bool bIsJumping;\n};"}
{"bad_code": "if (bIsActive) ExecuteTask(); else CancelTask();", "good_code": "if (bIsActive)\n{\n    ExecuteTask();\n}\nelse\n{\n    CancelTask();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Actions\") void StartAction();\nUFUNCTION(BlueprintCallable, Category=\"Actions\") void StopAction();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid StartAction();\n\nUFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid StopAction();"}
{"bad_code": "UCLASS()\nclass AMyComponent:public UActorComponent{\n    public:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite) int32 Speed;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite) int32 Strength;\n};", "good_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\npublic:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    int32 Speed;\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite)\n    int32 Strength;\n};"}
{"bad_code": "for(int i=0;i<10;++i){DoSomething();}", "good_code": "for (int i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "if (A>B) Max=A; else Max=B;", "good_code": "if (A > B)\n{\n    Max = A;\n}\nelse\n{\n    Max = B;\n}"}
{"bad_code": "class MyActor : public AActor {\npublic:\n    MyActor() {};\n\n    void BeginPlay() override {\n        Super::BeginPlay();\n    }\n    void Activate() { bActive = true; }\nprotected:\n    void ResetState() { bActive = false; }\nprivate:\n    bool bActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    bool bActive;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\nclass MyActor : public AActor {\nprotected:\n    void BeginPlay() override { Super::BeginPlay(); }\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\nprotected:\n    virtual void BeginPlay() override;\n};"}
{"bad_code": "USTRUCT()\nstruct FMyStruct {\n    int32 X, Y;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 X;\n    int32 Y;\n};"}
{"bad_code": "UPROPERTY(Category = \"Movement\", BlueprintReadOnly)\nfloat MaxSpeed;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat MaxSpeed;"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    int32 Health;\npublic:\n    AMyActor() {}\n    void SetHealth(int32 NewHealth) { Health = NewHealth; }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void SetHealth(int32 NewHealth);\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "if (Condition) DoSomething();\nelse DoSomethingElse();", "good_code": "if (Condition)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "void DoMath() { int32 result=A+B; DoSomething(); }", "good_code": "void DoMath()\n{\n    int32 Result = A + B;\n\n    DoSomething();\n}"}
{"bad_code": "void MyFunction() {\n    if (bCondition) { Action(); }\n}", "good_code": "void MyFunction()\n{\n    if (bCondition)\n    {\n        Action();\n    }\n}"}
{"bad_code": "UPROPERTY()\nint32 Health, Stamina;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Stamina;"}
{"bad_code": "bool bIsRunning; float Speed; UPROPERTY() int32 Health;", "good_code": "bool bIsRunning;\n\nfloat Speed;\n\nUPROPERTY()\nint32 Health;"}
{"bad_code": "class AMyActor : public AActor {\npublic:\n    AMyActor() { \n        // Constructor implementation \n    }\n\n    void Activate() { if(bIsActive) { Deactivate(); } }\n\nprivate:\n    bool bIsActive; int32 Health;\n};", "good_code": "class AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprivate:\n    bool bIsActive;\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n{\n    // Constructor implementation\n}\n\nvoid AMyActor::Activate()\n{\n    if (bIsActive)\n    {\n        Deactivate();\n    }\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"CoreMinimal.h\"\n#include \"Engine.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\""}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\nprivate:\n    float Speed, Acceleration;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\nprivate:\n    float Speed;\n    float Acceleration;\n};"}
{"bad_code": "UPROPERTY(Category=\"Movement\", BlueprintReadWrite) int32 Speed;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nint32 Speed;"}
{"bad_code": "void AMyActor::DoSomething()\n{\n    int32 A=10,B=20,Result=A+B;\n}", "good_code": "void AMyActor::DoSomething()\n{\n    int32 A = 10;\n    int32 B = 20;\n    int32 Result = A + B;\n}"}
{"bad_code": "class UMyComponent : public UActorComponent {\npublic:\n    UMyComponent() {}\n\n    void Initialize() {}\n};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    void Initialize();\n};\n\nUMyComponent::UMyComponent()\n{\n    // Constructor implementation\n}\n\nvoid UMyComponent::Initialize()\n{\n    // Initialization code\n}"}
{"bad_code": "bool bIsVisible = true; if(bIsVisible) { Hide(); }", "good_code": "bool bIsVisible = true;\n\nif (bIsVisible)\n{\n    Hide();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();"}
{"bad_code": "for(int32 i=0;i<10;i++){ DoWork(i); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoWork(i);\n}"}
{"bad_code": "class UMyComponent : public UActorComponent {\nprotected:\n    void Reset(); \n    void Update(); \n    int32 Count;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\nprotected:\n    void Reset();\n    void Update();\n\n    int32 Count;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    virtual void BeginPlay() override {}\n\nprivate:\n    int Health, Stamina;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) float MaxHealth;\nUPROPERTY() int32 CurrentHealth;\n\nif (Health > 0) { Health--; }", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY()\nint32 CurrentHealth;\n\nif (Health > 0)\n{\n    Health--;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void TakeDamage(int32 Damage);\nvoid Heal(int32 Amount) { Health += Amount; }", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Health\")\nvoid TakeDamage(int32 Damage);\n\nvoid Heal(int32 Amount)\n{\n    Health += Amount;\n}"}
{"bad_code": "void Update() { if(bIsActive){ Process(); } else{ Reset(); } }", "good_code": "void Update()\n{\n    if (bIsActive)\n    {\n        Process();\n    }\n    else\n    {\n        Reset();\n    }\n}"}
{"bad_code": "UPROPERTY() bool Active;\nUPROPERTY(BlueprintReadWrite) float MovementSpeed;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Status\")\nbool bActive;\n\nUPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nfloat MovementSpeed;"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyGameMode.h\"\n#include \"GameFramework/PlayerController.h\"\n\nvoid AMyGameMode::StartPlay() {\n    Super::StartPlay();\n    if(GEngine) GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Welcome!\"));\n}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGameMode.h\"\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n\n    if (GEngine)\n    {\n        GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT(\"Welcome!\"));\n    }\n}"}
{"bad_code": "UCLASS()\nclass MyComponent : public UActorComponent\n{\npublic:\n    void Init();\n    void Shutdown();\n    virtual void BeginPlay() override;\nprotected:\n    void Reset();\nprivate:\n    bool Initialized;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    virtual void BeginPlay() override;\n\n    void Init();\n    void Shutdown();\n\nprotected:\n    void Reset();\n\nprivate:\n    bool bInitialized;\n};"}
{"bad_code": "void Calculate(int A, int B){int Result=A*B;}", "good_code": "void Calculate(int32 A, int32 B)\n{\n    int32 Result = A * B;\n}"}
{"bad_code": "#include \"Math/UnrealMathUtility.h\"\n#include \"MyCharacter.h\"\n\nfloat AMyCharacter::GetRandomValue(float Min, float Max){return FMath::FRandRange(Min, Max);}", "good_code": "#include \"Math/UnrealMathUtility.h\"\n\n#include \"MyCharacter.h\"\n\nfloat AMyCharacter::GetRandomValue(float Min, float Max)\n{\n    return FMath::FRandRange(Min, Max);\n}"}
{"bad_code": "if(Speed>MaxSpeed){Speed=MaxSpeed;}", "good_code": "if (Speed > MaxSpeed)\n{\n    Speed = MaxSpeed;\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"CoreMinimal.h\"\n#include \"MyProject/MyCustomClass.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    AMyActor() {}\n\n    void BeginPlay() override {}\n    \n    void Activate() {}\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyCustomClass.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    void Tick(float DeltaTime)\n    {\n        Super::Tick(DeltaTime);\n        UpdateHealth();\n    }\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    void UpdateHealth();\n};\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    UpdateHealth();\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    public:\n    AMyActor() {}\n    \n    private:\n    int Health, Stamina;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprivate:\n    int Health;\n    int Stamina;\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    public:\n    void Jump() { /*...*/ }\n\n    void Run() { /*...*/ }\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    void Jump();\n\n    void Run();\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite)\nint32 MaxHealth;\nUPROPERTY(BlueprintReadOnly, EditAnywhere)\nint32 CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 MaxHealth;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere)\nint32 CurrentHealth;"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    public:\n    void Move() {int Speed=10; Speed+=5;}\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    void Move();\n};\n\nvoid AMyActor::Move()\n{\n    int Speed = 10;\n    Speed += 5;\n}"}
{"bad_code": "void UpdatePosition(int x,int y){x+=1;y+=1;}", "good_code": "void UpdatePosition(int x, int y)\n{\n    x += 1;\n    y += 1;\n}"}
{"bad_code": "if(bIsRunning) return;", "good_code": "if (bIsRunning)\n{\n    return;\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\n    public:\n    bool bIsActive;\n    AMyActor() {bIsActive = true;}\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    bool bIsActive;\n\nprivate:\n    void Initialize();\n};\n\nAMyActor::AMyActor()\n    : bIsActive(true)\n{\n}"}
{"bad_code": "int32 Sum(int32 A, int32 B){return A+B;}", "good_code": "int32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "#include \"MyActorComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor: public AActor\n{\npublic:\n\tAMyActor() {}\n\n\tvoid BeginPlay() override{\n\t\tSuper::BeginPlay();\n\t}\n\n\tvoid DoSomething(){\n\t\tif (true) DoAnotherThing();\n\t}\n\nprivate:\n\tvoid DoAnotherThing() {}\n\n\tint32 Health, Stamina;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActorComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void DoSomething();\n\nprivate:\n    void DoAnotherThing();\n\n    int32 Health;\n    int32 Stamina;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyActor::DoSomething()\n{\n    if (true)\n    {\n        DoAnotherThing();\n    }\n}\n\nvoid AMyActor::DoAnotherThing()\n{\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Character.h\"\n\nUCLASS()\nclass AMyCharacter: public ACharacter\n{\npublic:\n\tAMyCharacter(){}\n\t\n\tvoid Tick(float DeltaTime) override{\n\t\tSuper::Tick(DeltaTime); ApplyDamage();\n\t}\n\nprotected:\n\tvoid ApplyDamage(){}\n\nprivate:\n\tint32 Armor, Agility;\n};", "good_code": "#include \"GameFramework/Character.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void Tick(float DeltaTime) override;\n\nprotected:\n    void ApplyDamage();\n\nprivate:\n    int32 Armor;\n    int32 Agility;\n};\n\nAMyCharacter::AMyCharacter()\n{\n}\n\nvoid AMyCharacter::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    ApplyDamage();\n}\n\nvoid AMyCharacter::ApplyDamage()\n{\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/GameModeBase.h\"\n\nUCLASS()\nclass AMyGameMode: public AGameModeBase\n{\npublic:\n\tvoid StartPlay() override{ Super::StartPlay(); }\n\n\tint32 Points, Lives;\n};", "good_code": "#include \"GameFramework/GameModeBase.h\"\n\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    virtual void StartPlay() override;\n\nprivate:\n    int32 Points;\n    int32 Lives;\n};\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n#include \"GameFramework/PlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController: public APlayerController\n{\npublic:\n\tvoid SetupInputComponent() override{ Super::SetupInputComponent(); }\n\nprivate:\n\tbool bIsPaused, bCanMove;\n};", "good_code": "#include \"GameFramework/PlayerController.h\"\n\n#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\npublic:\n    virtual void SetupInputComponent() override;\n\nprivate:\n    bool bIsPaused;\n    bool bCanMove;\n};\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n}"}
{"bad_code": "#include \"MyHUD.h\"\n#include \"GameFramework/HUD.h\"\n\nUCLASS()\nclass AMyHUD: public AHUD\n{\npublic:\n\tvoid DrawHUD() override{ Super::DrawHUD(); }\n\n\tfloat Width, Height;\n};", "good_code": "#include \"GameFramework/HUD.h\"\n\n#include \"MyHUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD\n{\npublic:\n    virtual void DrawHUD() override;\n\nprivate:\n    float Width;\n    float Height;\n};\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n}"}
{"bad_code": "#include \"MyGameState.h\"\n#include \"GameFramework/GameStateBase.h\"\n\nUCLASS()\nclass AMyGameState: public AGameStateBase\n{\npublic:\n\tvoid Tick(float DeltaTime) override{ Super::Tick(DeltaTime); }\n\n\tint32 CurrentLevel, MaxLevel;\n};", "good_code": "#include \"GameFramework/GameStateBase.h\"\n\n#include \"MyGameState.h\"\n\nUCLASS()\nclass AMyGameState : public AGameStateBase\n{\npublic:\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    int32 CurrentLevel;\n    int32 MaxLevel;\n};\n\nvoid AMyGameState::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "#include \"MyPawn.h\"\n#include \"GameFramework/Pawn.h\"\n\nUCLASS()\nclass AMyPawn: public APawn\n{\npublic:\n\tAMyPawn(){}\n\n\tvoid BeginPlay() override{ Super::BeginPlay(); }\n\n\tfloat Speed, JumpHeight;\n};", "good_code": "#include \"GameFramework/Pawn.h\"\n\n#include \"MyPawn.h\"\n\nUCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    float Speed;\n    float JumpHeight;\n};\n\nAMyPawn::AMyPawn()\n{\n}\n\nvoid AMyPawn::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "#include \"MyWidget.h\"\n#include \"Blueprint/UserWidget.h\"\n\nUCLASS()\nclass UMyWidget: public UUserWidget\n{\npublic:\n\tvoid NativeConstruct() override{ Super::NativeConstruct(); }\n\n\tint32 Score, HighScore;\n};", "good_code": "#include \"Blueprint/UserWidget.h\"\n\n#include \"MyWidget.h\"\n\nUCLASS()\nclass UMyWidget : public UUserWidget\n{\npublic:\n    virtual void NativeConstruct() override;\n\nprivate:\n    int32 Score;\n    int32 HighScore;\n};\n\nvoid UMyWidget::NativeConstruct()\n{\n    Super::NativeConstruct();\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Components/ActorComponent.h\"\n\nUCLASS()\nclass UMyComponent: public UActorComponent\n{\npublic:\n\tUMyComponent(){}\n\n\tvoid InitializeComponent() override{ Super::InitializeComponent(); }\n\n\tint32 Ammo, MaxAmmo;\n};", "good_code": "#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    virtual void InitializeComponent() override;\n\nprivate:\n    int32 Ammo;\n    int32 MaxAmmo;\n};\n\nUMyComponent::UMyComponent()\n{\n}\n\nvoid UMyComponent::InitializeComponent()\n{\n    Super::InitializeComponent();\n}"}
{"bad_code": "#include \"MyAnimInstance.h\"\n#include \"Animation/AnimInstance.h\"\n\nUCLASS()\nclass UMyAnimInstance: public UAnimInstance\n{\npublic:\n\tvoid NativeUpdateAnimation(float DeltaSeconds) override{ Super::NativeUpdateAnimation(DeltaSeconds); }\n\n\tbool bIsJumping, bIsRunning;\n};", "good_code": "#include \"Animation/AnimInstance.h\"\n\n#include \"MyAnimInstance.h\"\n\nUCLASS()\nclass UMyAnimInstance : public UAnimInstance\n{\npublic:\n    virtual void NativeUpdateAnimation(float DeltaSeconds) override;\n\nprivate:\n    bool bIsJumping;\n    bool bIsRunning;\n};\n\nvoid UMyAnimInstance::NativeUpdateAnimation(float DeltaSeconds)\n{\n    Super::NativeUpdateAnimation(DeltaSeconds);\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyCustomClass.h\"\n#include \"Engine/World.h\"\n\nUCLASS() class AMyActor : public AActor\n{ \npublic: AMyActor() {}\nvoid BeginPlay() override {}\nprivate: float Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCustomClass.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    float Health;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Score, Level;\nif(Score>Level) { Score = Level; }", "good_code": "UPROPERTY(EditAnywhere)\nint32 Score;\n\nUPROPERTY(EditAnywhere)\nint32 Level;\n\nif (Score > Level)\n{\n    Score = Level;\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter\n{\npublic: AMyCharacter(){}\nprotected: void ResetCharacter() {}\nprivate: bool bIsJumping; float JumpHeight;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprotected:\n    void ResetCharacter();\n\nprivate:\n    bool bIsJumping;\n    float JumpHeight;\n};"}
{"bad_code": "#include \"MyPlayer.h\"\n#include \"GameFramework/PlayerController.h\"\n#include \"Engine/Engine.h\"\n\nvoid AMyPlayer::SetupInputComponent() { Super::SetupInputComponent(); }", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyPlayer.h\"\n\nvoid AMyPlayer::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite) float Speed;\nUPROPERTY(BlueprintReadOnly) bool bIsRunning;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nbool bIsRunning;"}
{"bad_code": "UFUNCTION() void OnOverlap() { }\nint32 Health = 100; int32 MaxHealth = 100;", "good_code": "UFUNCTION()\nvoid OnOverlap()\n{\n}\n\nint32 Health = 100;\nint32 MaxHealth = 100;"}
{"bad_code": "bool bIsVisible=false; if(bIsVisible==false){ SetActorHiddenInGame(true);}", "good_code": "bool bIsVisible = false;\n\nif (bIsVisible == false)\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats { int32 Health, Armor; };", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "int32 X=0; int32 Y=10; int32 Z=X+Y;", "good_code": "int32 X = 0;\nint32 Y = 10;\nint32 Z = X + Y;"}
{"bad_code": "void UpdatePosition() { if(bIsMoving) Position += Speed * DeltaTime; }", "good_code": "void UpdatePosition()\n{\n    if (bIsMoving)\n    {\n        Position += Speed * DeltaTime;\n    }\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyActor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void BeginPlay() override;\n\nprivate:\n    void DoSomething()\n    {\n        int x, y = 0; x = 10; y = 20;\n    }\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    void DoSomething();\n\n    int32 X;\n    int32 Y;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::DoSomething()\n{\n    X = 10;\n    Y = 20;\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter {\npublic:\n    AMyCharacter();\n\n    void MoveToTarget();\n\nprotected:\n    void ResetState();\n\n    int32 Health;    \n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void MoveToTarget();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Attributes\")\nfloat MaxHealth, CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Attributes\")\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Attributes\")\nfloat CurrentHealth;"}
{"bad_code": "if (bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "class AMyClass : public AActor\n{\n    public:\n    void Tick(float DeltaTime) override;\n};", "good_code": "class AMyClass : public AActor\n{\npublic:\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere)\nint32 ammo;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Ammo;"}
{"bad_code": "for (int i=0;i<10;i++) { DoSomething(); }", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "void MyFunction(){int result=A+B;}", "good_code": "void MyFunction()\n{\n    int Result = A + B;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable)\nvoid StartGame() {}", "good_code": "UFUNCTION(BlueprintCallable)\nvoid StartGame();"}
{"bad_code": "if (bIsRunning) { Stop(); } else { Start(); }", "good_code": "if (bIsRunning)\n{\n    Stop();\n}\nelse\n{\n    Start();\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic: AMyActor() {} void BeginPlay() override; void Activate(); protected: void ResetState(); private: int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "if(bIsVisible){SetActorHiddenInGame(false);}\nelse{SetActorHiddenInGame(true);}", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Health\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "#include \"GameFramework/Actor.h\"#include \"MyGame/MyCustomClass.h\"#include \"Engine/World.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyCustomClass.h\""}
{"bad_code": "int32 A = 5, B= 10; int32 Result = A+B;", "good_code": "int32 A = 5;\nint32 B = 10;\nint32 Result = A + B;"}
{"bad_code": "void Jump(){//do something}", "good_code": "void Jump()\n{\n    //do something\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Health;UPROPERTY(EditAnywhere) int32 Armor;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Health;\n\nUPROPERTY(EditAnywhere)\nint32 Armor;"}
{"bad_code": "void Update() { if (bShouldUpdate) { PerformUpdate(); } }", "good_code": "void Update()\n{\n    if (bShouldUpdate)\n    {\n        PerformUpdate();\n    }\n}"}
{"bad_code": "USTRUCT() struct FMyStruct {int32 Value1;float Value2;};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 Value1;\n    float Value2;\n};"}
{"bad_code": "int32 Calculate(int32 A,int32 B){return A+B;}", "good_code": "int32 Calculate(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "#include \"AI/NavigationSystemBase.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void Activate() {\n        // Activation code\n    }\n\nprotected:\n    void ResetState() {}\n\nprivate:\n    int32 Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"AI/NavigationSystemBase.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter {\n    GENERATED_BODY()\n    public:\n    UPROPERTY(BlueprintReadWrite)\n    float Health, Stamina;\n\n    UFUNCTION()\n    void MoveToTarget() { /* move logic */ }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadWrite)\n    float Health;\n\n    UPROPERTY(BlueprintReadWrite)\n    float Stamina;\n\n    UFUNCTION()\n    void MoveToTarget();\n};"}
{"bad_code": "UPROPERTY()\nint32 Lives; float Score;\n\nif(bIsActive) { DoSomething(); }", "good_code": "UPROPERTY()\nint32 Lives;\n\nUPROPERTY()\nfloat Score;\n\nif (bIsActive)\n{\n    DoSomething();\n}"}
{"bad_code": "UCLASS()\nclass AEnemy : public ACharacter {\npublic:\n    AEnemy() {}\n\n    void Attack() {\n        if(CanAttack) { PerformAttack(); }\n    }\nprivate:\n    bool CanAttack;\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    AEnemy();\n\n    void Attack();\n\nprivate:\n    bool bCanAttack;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\nclass AMyStaticActor : public AActor{\npublic:\nAMyStaticActor() {\n    MeshComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"MeshComponent\"));\n}\nprotected:\nUStaticMeshComponent* MeshComponent;\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Engine/World.h\"\n\nclass AMyStaticActor : public AActor\n{\npublic:\n    AMyStaticActor();\n\nprotected:\n    UStaticMeshComponent* MeshComponent;\n};"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\n    GENERATED_BODY()\n    public:\n    virtual void BeginPlay() override {\n        Super::BeginPlay();\n        Initialize();\n    }\n    void Initialize() {};\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void BeginPlay() override;\n\nprivate:\n    void Initialize();\n};"}
{"bad_code": "UCLASS()\nclass APlayerCharacter : public ACharacter {\npublic:\nAPlayerCharacter() : bIsAlive(true) {}\n\nbool bIsAlive;\n};", "good_code": "UCLASS()\nclass APlayerCharacter : public ACharacter\n{\npublic:\n    APlayerCharacter();\n\nprivate:\n    bool bIsAlive;\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nfloat Speed, Acceleration;", "good_code": "UPROPERTY(VisibleAnywhere)\nfloat Speed;\n\nUPROPERTY(VisibleAnywhere)\nfloat Acceleration;"}
{"bad_code": "UCLASS()\nclass AGun : public AWeapon {\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere)\n    int32 Damage; float Range;\n    void Fire() { /* fire logic */ }\n};", "good_code": "UCLASS()\nclass AGun : public AWeapon\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(EditAnywhere)\n    int32 Damage;\n\n    UPROPERTY(EditAnywhere)\n    float Range;\n\n    void Fire();\n};"}
{"bad_code": "UENUM()\nenum EWeaponType { Pistol, Rifle, Shotgun, Sniper };\n\nvoid Reload() { /* reload logic */ }", "good_code": "UENUM()\nenum EWeaponType\n{\n    Pistol,\n    Rifle,\n    Shotgun,\n    Sniper\n};\n\nvoid Reload();"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\npublic:\n    AMyActor() {}\n    void BeginPlay() override {}\nprotected:\n    void ResetState() {}\nprivate:\n    int32 Health, MaxHealth;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"Components/StaticMeshComponent.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n    int32 MaxHealth;\n};"}
{"bad_code": "UPROPERTY()\nint32 Health; int32 MaxHealth;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 MaxHealth;"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter\n{\npublic:\n    AMyCharacter() : Super() {}\n\n    virtual void Tick(float DeltaTime) override;\nprivate:\n    bool bIsAlive;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    bool bIsAlive;\n};"}
{"bad_code": "if(bCanJump) Jump();", "good_code": "if (bCanJump)\n{\n    Jump();\n}"}
{"bad_code": "void AMyActor::BeginPlay()\n{\n// Initialization code\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    // Initialization code\n}"}
{"bad_code": "int A = 10, B = 20;\nint Result = A+B;", "good_code": "int A = 10;\nint B = 20;\n\nint Result = A + B;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Activate();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Activate();"}
{"bad_code": "int32 Value=5;", "good_code": "int32 Value = 5;"}
{"bad_code": "for(int i=0;i<10;i++) DoSomething();", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "private:\n    void HiddenFunction();\npublic:\n    bool bIsRunning;\nprotected:\n    void Initialize();", "good_code": "public:\n    bool bIsRunning;\n\nprotected:\n    void Initialize();\n\nprivate:\n    void HiddenFunction();"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor() {\n        Health = 100;\n    }\nprotected:\n    void ResetState();\nprivate:\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n        Health = 100;\n    }\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\") float MovementSpeed;\nUPROPERTY(EditAnywhere, Category = \"Health\") int32 Health;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Movement\")\nfloat MovementSpeed;\n\nUPROPERTY(EditAnywhere, Category = \"Health\")\nint32 Health;"}
{"bad_code": "void AMyCharacter::MoveForward(float Value) {\n    if(Value!=0.f)\n        AddMovementInput(GetActorForwardVector(), Value);}", "good_code": "void AMyCharacter::MoveForward(float Value)\n{\n    if (Value != 0.f)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n}"}
{"bad_code": "int32 MyFunction(int32 A, int32 B) { int32 Result=A+B; return Result; }", "good_code": "int32 MyFunction(int32 A, int32 B)\n{\n    int32 Result = A + B;\n    return Result;\n}"}
{"bad_code": "UCLASS()\nclass ATestActor : public AActor {\npublic:\n    ATestActor();\n    int32 CalculateSomething(int32 A, int32 B);\nprivate:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass ATestActor : public AActor\n{\npublic:\n    ATestActor();\n\n    int32 CalculateSomething(int32 A, int32 B);\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "UCLASS() class ANewActor : public AActor {\npublic:\n    ANewActor();\nprivate:\nint32 Age; float Height;\n};", "good_code": "UCLASS()\nclass ANewActor : public AActor\n{\npublic:\n    ANewActor();\n\nprivate:\n    int32 Age;\n    float Height;\n};"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "if(bIsValid) DoTask(); else DoAlternative();", "good_code": "if (bIsValid)\n{\n    DoTask();\n}\nelse\n{\n    DoAlternative();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Game\") void StartGame();\nUFUNCTION() void EndGame();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Game\")\nvoid StartGame();\n\nUFUNCTION()\nvoid EndGame();"}
{"bad_code": "UPROPERTY(EditAnywhere) float MaxHealth, MinHealth;", "good_code": "UPROPERTY(EditAnywhere)\nfloat MaxHealth;\n\nUPROPERTY(EditAnywhere)\nfloat MinHealth;"}
{"bad_code": "UCLASS() class ASampleActor : public AActor {\npublic:\n    ASampleActor() {}\n    void BeginPlay() override {}\nprivate:\n    int32 Health, Stamina;\n};", "good_code": "UCLASS()\nclass ASampleActor : public AActor\n{\npublic:\n    ASampleActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "#include \"SampleActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyProject/MyComponent.h\"", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyComponent.h\"\n#include \"SampleActor.h\""}
{"bad_code": "if(bIsActive) { Deactivate(); }\nelse { Activate(); }", "good_code": "if (bIsActive)\n{\n    Deactivate();\n}\nelse\n{\n    Activate();\n}"}
{"bad_code": "USTRUCT() struct FMyStruct { float X, Y, Z; };", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    float X;\n    float Y;\n    float Z;\n};"}
{"bad_code": "UPROPERTY(Category = \"Gameplay\", BlueprintReadOnly) int32 Score;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Gameplay\")\nint32 Score;"}
{"bad_code": "void MoveTo(float X, float Y) { TargetX = X; TargetY = Y; }", "good_code": "void MoveTo(float X, float Y)\n{\n    TargetX = X;\n    TargetY = Y;\n}"}
{"bad_code": "float CalculateArea(float Width, float Height){return Width*Height;}", "good_code": "float CalculateArea(float Width, float Height)\n{\n    return Width * Height;\n}"}
{"bad_code": "void ToggleVisibility(bool bVisible) { if (bVisible) SetActorHiddenInGame(false); else SetActorHiddenInGame(true); }", "good_code": "void ToggleVisibility(bool bVisible)\n{\n    if (bVisible)\n    {\n        SetActorHiddenInGame(false);\n    }\n    else\n    {\n        SetActorHiddenInGame(true);\n    }\n}"}
{"bad_code": "for(int32 i=0;i<10;++i){ DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump(); void Run();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();\n\nvoid Run();"}
{"bad_code": "class MyActor : public AActor {\npublic:\n    MyActor() {};\n\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override {\n        PlayerInputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyActor::Jump); }\n    \n    void Jump() { /* Implementation */ }\n\nprotected:\n    void ResetState() { /* Implementation */ }\n\nprivate:\n    bool bIsActive;\n    int32 Health, Stamina;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\n\n    void Jump();\n\nprotected:\n    void ResetState();\n\nprivate:\n    bool bIsActive;\n    \n    int32 Health;\n\n    int32 Stamina;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyActor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    bool IsActive() const { return bActive; };\n    \n    void SetActive(bool NewActive) { bActive = NewActive; }\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    bool bActive;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    bool IsActive() const;\n\n    void SetActive(bool NewActive);\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    bool bActive;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n    void MoveForward(float Value);\n    void MoveRight(float Value) { AddMovementInput(GetActorRightVector(), Value); }\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void MoveForward(float Value);\n\n    void MoveRight(float Value);\n\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    float Speed;\n};"}
{"bad_code": "class AMyActor : public AActor {\npublic:\n    void Tick(float DeltaTime) override {\n        Super::Tick(DeltaTime); if (bShouldMove) { Move(); } }\nprivate:\n    bool bShouldMove;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    bool bShouldMove;\n};"}
{"bad_code": "USTRUCT()\nstruct FCharacterStats {\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere)\n    float Health, Stamina;\n};", "good_code": "USTRUCT()\nstruct FCharacterStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere)\n    float Health;\n    \n    UPROPERTY(EditAnywhere)\n    float Stamina;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/Character.h\"\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n    virtual void BeginPlay() override;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n};"}
{"bad_code": "class AMyActor : public AActor {\npublic:\n    void Start() { if (bIsActive) { Activate(); } }\nprivate:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Start();\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "UENUM()\nenum class EPlayerState : uint8 { Idle, Running, Jumping };\n\nclass AMyPlayer : public ACharacter {\npublic:\n    EPlayerState GetState() { return State; }\nprivate:\n    EPlayerState State;\n};", "good_code": "UENUM()\nenum class EPlayerState : uint8\n{\n    Idle,\n    Running,\n    Jumping\n};\n\nUCLASS()\nclass AMyPlayer : public ACharacter\n{\npublic:\n    EPlayerState GetState();\n\nprivate:\n    EPlayerState State;\n};"}
{"bad_code": "UCLASS()\nclass AMyComponent : public UActorComponent {\npublic:\n    void Initialize() { /* Implementation */ }\n};", "good_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\npublic:\n    void Initialize();\n};"}
{"bad_code": "class AMyActor : public AActor {\npublic:\n    bool bIsVisible; bool bIsMovable;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    bool bIsVisible;\n\n    bool bIsMovable;\n};"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Activate();protected:void ResetState();private:int32 Health;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "USTRUCT() struct FPlayerStats\n{\n    UPROPERTY(EditAnywhere) float Health, Stamina;\n    UPROPERTY(EditAnywhere) int32 Level;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    UPROPERTY(EditAnywhere)\n    float Health;\n\n    UPROPERTY(EditAnywhere)\n    float Stamina;\n\n    UPROPERTY(EditAnywhere)\n    int32 Level;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"CoreMinimal.h\"\n#include \"MyProject/MyCustomClass.h\"\n#include \"Components/StaticMeshComponent.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n\n#include \"MyProject/MyCustomClass.h\""}
{"bad_code": "void AMyActor::Tick(float DeltaTime){Super::Tick(DeltaTime); DoSomething();}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    DoSomething();\n}"}
{"bad_code": "void SomeFunction()\n{\n    if(bIsActive) { DoSomething(); }\n}", "good_code": "void SomeFunction()\n{\n    if (bIsActive)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) int32 Health, Stamina;", "good_code": "UPROPERTY(BlueprintReadOnly)\nint32 Health;\n\nUPROPERTY(BlueprintReadOnly)\nint32 Stamina;"}
{"bad_code": "public: UPROPERTY(BlueprintReadWrite) bool bIsActive;", "good_code": "public:\n    UPROPERTY(BlueprintReadWrite)\n    bool bIsActive;"}
{"bad_code": "int32 AMyClass::CalculateSum(int32 A,int32 B){return A+B;}", "good_code": "int32 AMyClass::CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UFUNCTION() void DoSomething(); UFUNCTION() void DoAnotherThing();", "good_code": "UFUNCTION()\nvoid DoSomething();\n\nUFUNCTION()\nvoid DoAnotherThing();"}
{"bad_code": "for (int i=0;i<10;i++) {DoTask();}", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoTask();\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n    \n    void Activate() {\n        // Implementation\n    }\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health, Stamina;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "#include \"MyGame.h\"\n#include \"CoreMinimal.h\"\n#include \"MyActor.h\"\n#include \"Engine/World.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n#include \"MyGame.h\""}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\nprivate:\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\")\n    float MaxHealth;\n\n    bool bIsAlive;\npublic:\n    AMyCharacter();\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprivate:\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\")\n    float MaxHealth;\n\n    bool bIsAlive;\n};"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) { Super::Tick(DeltaTime); ProcessInput(); }", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n    ProcessInput();\n}"}
{"bad_code": "if (bIsRunning) { Speed += 10; }", "good_code": "if (bIsRunning)\n{\n    Speed += 10;\n}"}
{"bad_code": "void MoveToTarget(FVector TargetPosition) \n{\n    if (TargetPosition != FVector::ZeroVector){\n        // Move logic\n    }\n}", "good_code": "void MoveToTarget(FVector TargetPosition)\n{\n    if (TargetPosition != FVector::ZeroVector)\n    {\n        // Move logic\n    }\n}"}
{"bad_code": "class UMyComponent : public UActorComponent {\nUPROPERTY(EditAnywhere, Category = \"Settings\") float Speed;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\n    UPROPERTY(EditAnywhere, Category = \"Settings\")\n    float Speed;\n};"}
{"bad_code": "for (int i=0; i < 10; ++i) { DoSomething(); }", "good_code": "for (int i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "bIsVisible = (CurrentTime> StartTime) ? true : false;", "good_code": "bIsVisible = (CurrentTime > StartTime) ? true : false;"}
{"bad_code": "UENUM()\nenum class EMovementType { Walk, Run, Sprint };", "good_code": "UENUM()\nenum class EMovementType\n{\n    Walk,\n    Run,\n    Sprint\n};"}
{"bad_code": "class AMyCharacter : public ACharacter {\n    virtual void BeginPlay() override;\n    int32 Health, Stamina;\npublic:\n    AMyCharacter();\n    void Jump();\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Jump();\n\nprivate:\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"Components/ActorComponent.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/ActorComponent.h\"\n#include \"MyActor.h\""}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\") int32 Health; int32 Armor;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 Health;\n\nint32 Armor;"}
{"bad_code": "if (Health>0) { Health -= Damage; }", "good_code": "if (Health > 0)\n{\n    Health -= Damage;\n}"}
{"bad_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime); if (bIsActive) Move();\n}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bIsActive)\n    {\n        Move();\n    }\n}"}
{"bad_code": "UCLASS() class AMyVehicle : public AActor { public: AMyVehicle(); void Drive(); private: int32 Fuel; };", "good_code": "UCLASS()\nclass AMyVehicle : public AActor\n{\npublic:\n    AMyVehicle();\n\n    void Drive();\n\nprivate:\n    int32 Fuel;\n};"}
{"bad_code": "float CalculateDamage(float BaseDamage,float Modifier){return BaseDamage*Modifier;}", "good_code": "float CalculateDamage(float BaseDamage, float Modifier)\n{\n    return BaseDamage * Modifier;\n}"}
{"bad_code": "protected: void Regenerate(); void Restore(); private: int32 Mana;", "good_code": "protected:\n    void Regenerate();\n\n    void Restore();\n\nprivate:\n    int32 Mana;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void PlaySound();void StopSound();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid PlaySound();\n\nvoid StopSound();"}
{"bad_code": "if(bCanJump) JumpHeight+=10; else JumpHeight=0;", "good_code": "if (bCanJump)\n{\n    JumpHeight += 10;\n}\nelse\n{\n    JumpHeight = 0;\n}"}
{"bad_code": "UCLASS()\nclass myactor : public AActor {\npublic:\n    myactor() {}\n\n    virtual void BeginPlay() override {}\n\n    void Activate() {}\n\nprotected:\n    void ResetState() {}\n\nprivate:\n    int32 health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyPlayerController.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameMode.h\"\n#include \"MyPlayerController.h\""}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category=\"Health\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "int32 a=5,b=10;int32 c=a+b;", "good_code": "int32 A = 5;\nint32 B = 10;\nint32 C = A + B;"}
{"bad_code": "UFUNCTION(BlueprintCallable) void MoveToLocation(FVector Location);", "good_code": "UFUNCTION(BlueprintCallable)\nvoid MoveToLocation(FVector Location);"}
{"bad_code": "public: void Jump() { /*...*/ }", "good_code": "public:\n    void Jump()\n    {\n        // Implementation\n    }"}
{"bad_code": "bool bCanJump; bool bIsRunning;", "good_code": "bool bCanJump;\nbool bIsRunning;"}
{"bad_code": "if(x==y){DoSomething();}", "good_code": "if (x == y)\n{\n    DoSomething();\n}"}
{"bad_code": "public:\n    void Start() {}\n    void Stop() {}\n\nprivate:\n    int32 Speed;\npublic:\n    void Reset() {}", "good_code": "public:\n    void Start();\n    void Stop();\n    void Reset();\n\nprivate:\n    int32 Speed;"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n\nUCLASS() class AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode() { DefaultPawnClass = AMyPawn::StaticClass(); }\n\n    void StartPlay() override;\n    int32 GetScore() const {return Score;}\n\nprotected:\n    void ResetGame() {}\n\nprivate:\n    int32 Score = 0;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode();\n\n    virtual void StartPlay() override;\n\n    int32 GetScore() const;\n\nprotected:\n    void ResetGame();\n\nprivate:\n    int32 Score;\n};\n\nAMyGameMode::AMyGameMode()\n{\n    DefaultPawnClass = AMyPawn::StaticClass();\n}\n\nvoid AMyGameMode::StartPlay()\n{\n    // Implementation\n}\n\nint32 AMyGameMode::GetScore() const\n{\n    return Score;\n}\n\nvoid AMyGameMode::ResetGame()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n\nUCLASS() class AMyActor : public AActor {\n    GENERATED_BODY()\n\npublic:\n    void BeginPlay() override {\n        Super::BeginPlay();\n        if (bIsActive) Activate(); }\n    void Activate() {}\n\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    bool bIsActive;\n};\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsActive)\n    {\n        Activate();\n    }\n}\n\nvoid AMyActor::Activate()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyComponent.h\"\n\nUCLASS() class UMyComponent : public UActorComponent {\n    GENERATED_BODY()\n\npublic:\n    void InitializeComponent() override;\n    void Deactivate() {}\n\nprivate:\n    bool bIsEnabled = true;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void InitializeComponent() override;\n\n    void Deactivate();\n\nprivate:\n    bool bIsEnabled;\n};\n\nvoid UMyComponent::InitializeComponent()\n{\n    // Implementation\n}\n\nvoid UMyComponent::Deactivate()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyCharacter.h\"\n\nUCLASS() class AMyCharacter : public ACharacter {\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter() { Health = 100; MovementSpeed = 600; }\n\n    void MoveForward(float Value) { if (Value != 0.0f) AddMovementInput(GetActorForwardVector(), Value); }\n\nprivate:\n    int32 Health;\n    float MovementSpeed;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter();\n\n    void MoveForward(float Value);\n\nprivate:\n    int32 Health;\n    float MovementSpeed;\n};\n\nAMyCharacter::AMyCharacter()\n{\n    Health = 100;\n    MovementSpeed = 600.0f;\n}\n\nvoid AMyCharacter::MoveForward(float Value)\n{\n    if (Value != 0.0f)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController {\n    GENERATED_BODY()\n\npublic:\n    void SetupInputComponent() override {\n        Super::SetupInputComponent(); InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump); }\n\nprivate:\n    void Jump() { }\n};", "good_code": "#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void SetupInputComponent() override;\n\nprivate:\n    void Jump();\n};\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n\n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);\n}\n\nvoid AMyPlayerController::Jump()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyHUD.h\"\n\nUCLASS() class AMyHUD : public AHUD {\n    GENERATED_BODY()\n\npublic:\n    void DrawHUD() override {\n        Super::DrawHUD(); if (bShowCrosshair) DrawCrosshair(); }\n\nprivate:\n    bool bShowCrosshair;\n    void DrawCrosshair() {}\n};", "good_code": "#include \"Engine/World.h\"\n#include \"MyHUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void DrawHUD() override;\n\nprivate:\n    bool bShowCrosshair;\n\n    void DrawCrosshair();\n};\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n\n    if (bShowCrosshair)\n    {\n        DrawCrosshair();\n    }\n}\n\nvoid AMyHUD::DrawCrosshair()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"MyGameInstance.h\"\n#include \"Engine/GameInstance.h\"\n\nUCLASS() class UMyGameInstance : public UGameInstance {\n    GENERATED_BODY()\n\npublic:\n    void Init() override { Super::Init(); LoadPlayerData(); }\n\nprivate:\n    void LoadPlayerData() {}\n};", "good_code": "#include \"Engine/GameInstance.h\"\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void Init() override;\n\nprivate:\n    void LoadPlayerData();\n};\n\nvoid UMyGameInstance::Init()\n{\n    Super::Init();\n\n    LoadPlayerData();\n}\n\nvoid UMyGameInstance::LoadPlayerData()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"MyAnimInstance.h\"\n#include \"Animation/AnimInstance.h\"\n\nUCLASS() class UMyAnimInstance : public UAnimInstance {\n    GENERATED_BODY()\n\npublic:\n    void NativeInitializeAnimation() override { Super::NativeInitializeAnimation(); Initialize(); }\n\nprivate:\n    void Initialize() {}\n};", "good_code": "#include \"Animation/AnimInstance.h\"\n#include \"MyAnimInstance.h\"\n\nUCLASS()\nclass UMyAnimInstance : public UAnimInstance\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void NativeInitializeAnimation() override;\n\nprivate:\n    void Initialize();\n};\n\nvoid UMyAnimInstance::NativeInitializeAnimation()\n{\n    Super::NativeInitializeAnimation();\n\n    Initialize();\n}\n\nvoid UMyAnimInstance::Initialize()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"MyWidget.h\"\n#include \"Blueprint/UserWidget.h\"\n\nUCLASS() class UMyWidget : public UUserWidget {\n    GENERATED_BODY()\n\npublic:\n    void NativeConstruct() override { Super::NativeConstruct(); SetupBindings(); }\n\nprivate:\n    void SetupBindings() {}\n};", "good_code": "#include \"Blueprint/UserWidget.h\"\n#include \"MyWidget.h\"\n\nUCLASS()\nclass UMyWidget : public UUserWidget\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void NativeConstruct() override;\n\nprivate:\n    void SetupBindings();\n};\n\nvoid UMyWidget::NativeConstruct()\n{\n    Super::NativeConstruct();\n\n    SetupBindings();\n}\n\nvoid UMyWidget::SetupBindings()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"MyPawn.h\"\n#include \"GameFramework/Pawn.h\"\n\nUCLASS() class AMyPawn : public APawn {\n    GENERATED_BODY()\n\npublic:\n    AMyPawn() { PrimaryActorTick.bCanEverTick = true; }\n\n    void Tick(float DeltaTime) override { Super::Tick(DeltaTime); }\n\nprivate:\n    void Move() {}\n};", "good_code": "#include \"GameFramework/Pawn.h\"\n#include \"MyPawn.h\"\n\nUCLASS()\nclass AMyPawn : public APawn\n{\n    GENERATED_BODY()\n\npublic:\n    AMyPawn();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    void Move();\n};\n\nAMyPawn::AMyPawn()\n{\n    PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyPawn::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    // Implementation\n}\n\nvoid AMyPawn::Move()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/InputComponent.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\n    public:\n    AMyCharacter() {}\n\n    virtual void BeginPlay() override {}\n\n    private:\n    float Health; int32 Score;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/InputComponent.h\"\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    AMyCharacter()\n    {\n    }\n\n    virtual void BeginPlay() override\n    {\n    }\n\nprivate:\n    float Health;\n\n    int32 Score;\n};"}
{"bad_code": "UCLASS()\nclass MYGAME_API AEnemy : public AActor\n{\n    GENERATED_BODY()\n    public:\n    AEnemy();\n    void SetHealth(float NewHealth);\n\n    private:\n    UPROPERTY(EditAnywhere)\n    float Health;\n};", "good_code": "UCLASS()\nclass MYGAME_API AEnemy : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AEnemy();\n\n    void SetHealth(float NewHealth);\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    float Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 AmmoCount; float MaxAmmo;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nint32 AmmoCount;\n\nUPROPERTY(EditAnywhere)\nfloat MaxAmmo;"}
{"bad_code": "UFUNCTION(BlueprintCallable)\nvoid FireWeapon(); void Reload();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid FireWeapon();\n\nvoid Reload();"}
{"bad_code": "if(bIsDead) Destroy();\nelse Respawn();", "good_code": "if (bIsDead)\n{\n    Destroy();\n}\nelse\n{\n    Respawn();\n}"}
{"bad_code": "for(int i=0;i<10;i++){DoSomething();}", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "void AMyClass::Move(float X, float Y)\n{\nif (X != 0) AddMovementInput(GetActorForwardVector(), X);\nif (Y != 0) AddMovementInput(GetActorRightVector(), Y);\n}", "good_code": "void AMyClass::Move(float X, float Y)\n{\n    if (X != 0)\n    {\n        AddMovementInput(GetActorForwardVector(), X);\n    }\n\n    if (Y != 0)\n    {\n        AddMovementInput(GetActorRightVector(), Y);\n    }\n}"}
{"bad_code": "while(true){Tick();}", "good_code": "while (true)\n{\n    Tick();\n}"}
{"bad_code": "class UMyComponent : public UActorComponent {\n    GENERATED_BODY()\n\npublic:\n    UMyComponent() {}\n\n    void InitializeComponent() override {}\n};", "good_code": "class UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent()\n    {\n    }\n\n    void InitializeComponent() override\n    {\n    }\n};"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nbool bIsActive, bIsVisible;", "good_code": "UPROPERTY(VisibleAnywhere)\nbool bIsActive;\n\nUPROPERTY(VisibleAnywhere)\nbool bIsVisible;"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void Tick(float DeltaTime) override {\n        Super::Tick(DeltaTime);\n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n\nvoid SomeFunction(){int32 x,y;x=5;y=10;}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n\nvoid SomeFunction()\n{\n    int32 x;\n    int32 y;\n    x = 5;\n    y = 10;\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) float Speed, Direction;", "good_code": "UPROPERTY(EditAnywhere)\nfloat Speed;\n\nUPROPERTY(EditAnywhere)\nfloat Direction;"}
{"bad_code": "void MoveToLocation() {\n    FVector Location = FVector(0,0,0);\n    SetActorLocation(Location);}", "good_code": "void MoveToLocation()\n{\n    FVector Location = FVector(0, 0, 0);\n    SetActorLocation(Location);\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\n    UPROPERTY(BlueprintReadWrite)\n    float Health;\npublic:\n    AMyCharacter(){}\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    UPROPERTY(BlueprintReadWrite)\n    float Health;\n};"}
{"bad_code": "void FunctionWithLogic() { if (bIsValid) DoSomething(); else DoSomethingElse(); }", "good_code": "void FunctionWithLogic()\n{\n    if (bIsValid)\n    {\n        DoSomething();\n    }\n    else\n    {\n        DoSomethingElse();\n    }\n}"}
{"bad_code": "UPROPERTY() int32 Score;\nUPROPERTY() bool bIsActive;", "good_code": "UPROPERTY()\nbool bIsActive;\n\nUPROPERTY()\nint32 Score;"}
{"bad_code": "for (int i=0;i<10;i++){DoSomething();}", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UFUNCTION() void OnBeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor);", "good_code": "UFUNCTION()\nvoid OnBeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor);"}
{"bad_code": "class UMyComponent : public UActorComponent {\nprivate:\n    int32 Width, Height;\nprotected:\n    void Initialize() {\n    Width = 10;\n    Height = 20;}\n};", "good_code": "class UMyComponent : public UActorComponent\n{\nprotected:\n    void Initialize();\n\nprivate:\n    int32 Width;\n    int32 Height;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor: public AActor {\n    public:\n    AMyActor() {}\n\n    virtual void BeginPlay() override {}\n\n    void Activate(){}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n};"}
{"bad_code": "#include \"MyActorComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"CoreMinimal.h\"", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActorComponent.h\""}
{"bad_code": "USTRUCT()\nstruct FMyStruct {\n    GENERATED_BODY()\n    \n    int32 Health, Armor;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "if(bIsAlive) DoSomething();\nelse DoSomethingElse();", "good_code": "if (bIsAlive)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "UPROPERTY(Category = \"Health\", BlueprintReadOnly)\nfloat CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat CurrentHealth;"}
{"bad_code": "class AMyCharacter : public ACharacter\n{\n    int32 Speed;\n    int32 Health;\n\n    void Jump() {}\n    void Run() {}\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    void Jump();\n    void Run();\n\nprivate:\n    int32 Speed;\n    int32 Health;\n};"}
{"bad_code": "bool bIsVisible, bCanMove;\nint32 Health = 100, Speed = 600;", "good_code": "bool bIsVisible;\nbool bCanMove;\n\nint32 Health = 100;\nint32 Speed = 600;"}
{"bad_code": "void SetSpeed(int32 Speed){m_Speed = Speed;}", "good_code": "void SetSpeed(int32 Speed)\n{\n    m_Speed = Speed;\n}"}
{"bad_code": "UENUM()\nenum class EPlayerState {Idle, Running, Jumping};", "good_code": "UENUM()\nenum class EPlayerState\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "void MoveForward(float Value) { if(Value != 0.0f) { AddMovementInput(GetActorForwardVector(), Value); } }", "good_code": "void MoveForward(float Value)\n{\n    if (Value != 0.0f)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic: AMyActor() {\n    }\n\nvirtual void Tick(float DeltaSeconds) override {\n        Super::Tick(DeltaSeconds); }\nprivate: int32 Health; };", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaSeconds) override;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY()\nint32 Health, Armor;", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Armor;"}
{"bad_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay(); int32 MaxValue = 100; float CurrentValue = 0.0f;\n    if(CurrentValue < MaxValue) { CurrentValue += 10.0f; }\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    int32 MaxValue = 100;\n    float CurrentValue = 0.0f;\n\n    if (CurrentValue < MaxValue)\n    {\n        CurrentValue += 10.0f;\n    }\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Actions\") void StartMove();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid StartMove();"}
{"bad_code": "if(bIsRunning) { Stop(); }\nelse { Start(); }", "good_code": "if (bIsRunning)\n{\n    Stop();\n}\nelse\n{\n    Start();\n}"}
{"bad_code": "int32 AMyActor::CalculateDamage(int32 BaseDamage, float Multiplier) { return BaseDamage * Multiplier; }", "good_code": "int32 AMyActor::CalculateDamage(int32 BaseDamage, float Multiplier)\n{\n    return BaseDamage * Multiplier;\n}"}
{"bad_code": "public: void Reset();\nprivate: bool bIsActive;", "good_code": "public:\n    void Reset();\n\nprivate:\n    bool bIsActive;"}
{"bad_code": "int32 A = 10,B = 20; int32 Result=A+B;", "good_code": "int32 A = 10;\nint32 B = 20;\nint32 Result = A + B;"}
{"bad_code": "UPROPERTY(EditAnywhere)\nfloat MovementSpeed;\nUPROPERTY(EditAnywhere)\nbool bIsVisible;", "good_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite)\nbool bIsVisible;\n\nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nfloat MovementSpeed;"}
{"bad_code": "for(int32 i=0;i<10;i++){ DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGameCharacter.h\"\n#include \"CoreMinimal.h\"\n\nclass AMyCharacter : public AActor {\npublic:\n    AMyCharacter() {}\n\n    void SetHealth(float NewHealth) { Health = NewHealth; }\n\n    float GetHealth() { return Health; }\n\nprivate:\n    float Health; };", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameCharacter.h\"\n\nclass AMyCharacter : public AActor\n{\npublic:\n    AMyCharacter();\n\n    void SetHealth(float NewHealth);\n\n    float GetHealth();\n\nprivate:\n    float Health;\n};\n\nAMyCharacter::AMyCharacter()\n{\n}\n\nvoid AMyCharacter::SetHealth(float NewHealth)\n{\n    Health = NewHealth;\n}\n\nfloat AMyCharacter::GetHealth()\n{\n    return Health;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void Jump() { /* jump logic */ }\n\n    void Run() { /* run logic */ }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void Jump();\n\n    void Run();\n};\n\nvoid AMyActor::Jump()\n{\n    // Jump logic\n}\n\nvoid AMyActor::Run()\n{\n    // Run logic\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite) int32 MaxSpeed;\nUPROPERTY(BlueprintReadWrite) bool isAlive;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Movement\")\nint32 MaxSpeed;\n\nUPROPERTY(BlueprintReadWrite, Category = \"State\")\nbool bIsAlive;"}
{"bad_code": "if (bIsVisible) SetActorHiddenInGame(false);\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "for (int32 i = 0; i < 10; i++) DoSomething();", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "int32 Health = 100, MaxHealth = 200;", "good_code": "int32 Health = 100;\n\nint32 MaxHealth = 200;"}
{"bad_code": "if (A+B>C-D) DoSomething();", "good_code": "if (A + B > C - D)\n{\n    DoSomething();\n}"}
{"bad_code": "private: int32 Health;\npublic: AMyActor();", "good_code": "public:\n    AMyActor();\n\nprivate:\n    int32 Health;"}
{"bad_code": "UFUNCTION() void OnOverlap(); UFUNCTION() void OnHit();", "good_code": "UFUNCTION()\nvoid OnOverlap();\n\nUFUNCTION()\nvoid OnHit();"}
{"bad_code": "AMyActor::AMyActor() \n{\n    // Constructor logic\n}", "good_code": "AMyActor::AMyActor()\n{\n    // Constructor logic\n}"}
{"bad_code": "class MyActor: public AActor\n{public:\nMyActor(){}\nvirtual void BeginPlay() override{}\nvoid Activate(){}\n\nprotected:\nvoid ResetState(){}\n\nprivate:\nint32 Health;\n};", "good_code": "UCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\nAMyActor(){}\n\nprotected:\nvirtual void BeginPlay() override {}\n};", "good_code": "#include \"Engine/World.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprotected:\n    virtual void BeginPlay() override;\n};"}
{"bad_code": "UPROPERTY()\nbool bIsVisible;\n\nvoid ToggleVisibility(){if(bIsVisible){bIsVisible = false;}else{bIsVisible = true;}}", "good_code": "UPROPERTY()\nbool bIsVisible;\n\nvoid ToggleVisibility()\n{\n    if (bIsVisible)\n    {\n        bIsVisible = false;\n    }\n    else\n    {\n        bIsVisible = true;\n    }\n}"}
{"bad_code": "int32 Health=100, MaxHealth=100;", "good_code": "int32 Health = 100;\nint32 MaxHealth = 100;"}
{"bad_code": "UFUNCTION()\nvoid StartGame();UFUNCTION() void EndGame();", "good_code": "UFUNCTION()\nvoid StartGame();\n\nUFUNCTION()\nvoid EndGame();"}
{"bad_code": "void AMyActor::BeginPlay()\n{\nSuper::BeginPlay();Health=100;\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    Health = 100;\n}"}
{"bad_code": "if(bIsReady)DoSomething();\nelse DoSomethingElse();", "good_code": "if (bIsReady)\n{\n    DoSomething();\n}\nelse\n{\n    DoSomethingElse();\n}"}
{"bad_code": "int32 CalculateSum(int32 A,int32 B){return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UPROPERTY(int32)\nint32 Health, Armor;\n\nvoid SetValues(int32 H,int32 A){Health=H;Armor=A;}", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 Armor;\n\nvoid SetValues(int32 H, int32 A)\n{\n    Health = H;\n    Armor = A;\n}"}
{"bad_code": "for(int32 i=0;i<10;++i) { DoWork(); }", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoWork();\n}"}
{"bad_code": "class MyActor : public AActor {\n    public:\n    MyActor(){}\nprotected:\nvoid BeginPlay()override{}\nprivate:\nint32 health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\nprotected:\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"CoreMinimal.h\"\n#include \"MyActor.h\"\nclass MyActor : public AActor {\npublic:\nMyActor(){}\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n};"}
{"bad_code": "UCLASS()\nclass MyPlayer : public ACharacter {\npublic:\nvoid Jump(){/* code */}\nprivate:\nbool isJumping;\n};", "good_code": "UCLASS()\nclass AMyPlayer : public ACharacter\n{\npublic:\n    void Jump();\n\nprivate:\n    bool bIsJumping;\n};"}
{"bad_code": "UPROPERTY(int32 Health)\nint32 Health;\nUPROPERTY(BlueprintReadOnly) bool IsAlive;", "good_code": "UPROPERTY(BlueprintReadOnly)\nbool bIsAlive;\n\nUPROPERTY()\nint32 Health;"}
{"bad_code": "UFUNCTION(BlueprintCallable)void MoveToLocation(FVector Location);\nvoid MoveToLocation(FVector Location){}", "good_code": "UFUNCTION(BlueprintCallable)\nvoid MoveToLocation(FVector Location);\n\nvoid AMyActor::MoveToLocation(FVector Location)\n{\n    // Implementation\n}"}
{"bad_code": "class MyComponent : public UActorComponent {\n    int32 x, y, z;\n    void CalculateSum(){int32 sum=x+y+z;}\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void CalculateSum();\n\nprivate:\n    int32 X;\n    int32 Y;\n    int32 Z;\n};\n\nvoid UMyComponent::CalculateSum()\n{\n    int32 Sum = X + Y + Z;\n}"}
{"bad_code": "UCLASS()\nclass MyWidget : public UUserWidget\n{\n    void InitWidget(){}\n    void ResetWidget(){}\n};", "good_code": "UCLASS()\nclass UMyWidget : public UUserWidget\n{\npublic:\n    void InitWidget();\n\n    void ResetWidget();\n};\n\nvoid UMyWidget::InitWidget()\n{\n    // Implementation\n}\n\nvoid UMyWidget::ResetWidget()\n{\n    // Implementation\n}"}
{"bad_code": "class MyGameMode : public AGameModeBase {\nvoid StartPlay()override{}\n};", "good_code": "UCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    virtual void StartPlay() override;\n};\n\nvoid AMyGameMode::StartPlay()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyStaticMeshActor.h\"\nclass MyStaticMeshActor : public AActor {\npublic:\nMyStaticMeshActor(){} UPROPERTY() UStaticMeshComponent* Mesh;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyStaticMeshActor.h\"\n\nUCLASS()\nclass AMyStaticMeshActor : public AActor\n{\npublic:\n    AMyStaticMeshActor();\n\nprivate:\n    UPROPERTY()\n    UStaticMeshComponent* Mesh;\n};"}
{"bad_code": "class MyCharacter : public ACharacter {\nprotected:\nvoid OnDeath(){}\nprivate:\nbool canRespawn;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\nprotected:\n    void OnDeath();\n\nprivate:\n    bool bCanRespawn;\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor(){}\n    void Activate(){}\nprivate:\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "void AMyActor::BeginPlay() {\n    Super::BeginPlay();\n    if (bIsActive) SetActive(true);\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsActive)\n    {\n        SetActive(true);\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Stats\") float Health, Stamina;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat Health;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat Stamina;"}
{"bad_code": "if(A > B){\n    return A-B;}", "good_code": "if (A > B)\n{\n    return A - B;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();"}
{"bad_code": "void UpdatePosition() {\n    float NewX=0; float NewY=0;\n}", "good_code": "void UpdatePosition()\n{\n    float NewX = 0;\n    float NewY = 0;\n}"}
{"bad_code": "class MyComponent: public UActorComponent{\npublic:\n    bool bIsEnabled; int32 Counter;\n    MyComponent(){}\n};", "good_code": "class MyComponent : public UActorComponent\n{\npublic:\n    MyComponent();\n\n    bool bIsEnabled;\n\n    int32 Counter;\n};"}
{"bad_code": "private:\n    UPROPERTY() int32 Score;\n    UPROPERTY(BlueprintReadOnly) int32 MaxScore;", "good_code": "private:\n    UPROPERTY(BlueprintReadOnly)\n    int32 MaxScore;\n\n    UPROPERTY()\n    int32 Score;"}
{"bad_code": "void DoSomething() {int32 Value=10; Value*=2;}", "good_code": "void DoSomething()\n{\n    int32 Value = 10;\n    Value *= 2;\n}"}
{"bad_code": "bool bIsReady=true; if(bIsReady) {StartProcess();}", "good_code": "bool bIsReady = true;\n\nif (bIsReady)\n{\n    StartProcess();\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {};\n\n    void BeginPlay() override;\n\nprotected:\n    void ResetState() {}\n\nprivate:\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor() {}\n    void BeginPlay() override {}\n    void Activate() {}\nprivate:\n    int32 Health, Armor;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 Health;\n    int32 Armor;\n};"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    UMyComponent() {}\n\n    void InitializeComponent() override {}\n\n    void Start() {}\nprotected:\n    void Stop() {}\nprivate:\n    int32 Speed;\n    bool IsActive;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    virtual void InitializeComponent() override;\n\n    void Start();\n\nprotected:\n    void Stop();\n\nprivate:\n    int32 Speed;\n    bool bIsActive;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\nUCLASS()\nclass UMyComponent : public UActorComponent {\n    GENERATED_BODY()\npublic:\n    void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override {}\nprivate:\n    int32 Counter;\n};", "good_code": "#include \"CoreMinimal.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;\n\nprivate:\n    int32 Counter;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    void SomeFunction() {\n        if(true) { DoSomething(); }\n    }\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void SomeFunction()\n    {\n        if (true)\n        {\n            DoSomething();\n        }\n    }\n};"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    void Start() { int32 X = 0; int32 Y = 0; }\nprivate:\n    int32 Count;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void Start()\n    {\n        int32 X = 0;\n        int32 Y = 0;\n    }\n\nprivate:\n    int32 Count;\n};"}
{"bad_code": "#include \"PlayerStats.h\"\n#include \"Engine/World.h\"\nclass FMyStruct {\n    GENERATED_BODY()\n    int32 Level;\n    float Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"PlayerStats.h\"\n\nUSTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    int32 Level;\n    float Health;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\nUCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    void DoSomething() { int32 A=0; }\nprivate:\n    int32 Value;\n};", "good_code": "#include \"CoreMinimal.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void DoSomething()\n    {\n        int32 A = 0;\n    }\n\nprivate:\n    int32 Value;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\nUCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    void Action() { if (true) { DoTask(); } }\nprivate:\n    int32 Number;\n};", "good_code": "#include \"CoreMinimal.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void Action()\n    {\n        if (true)\n        {\n            DoTask();\n        }\n    }\n\nprivate:\n    int32 Number;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\nUCLASS()\nclass UMyActor : public AActor {\npublic:\n    void Move() { float Speed=10.0f; int32 Distance=100; }\nprivate:\n    float Speed;\n    int32 Distance;\n};", "good_code": "#include \"CoreMinimal.h\"\n\nUCLASS()\nclass UMyActor : public AActor\n{\npublic:\n    void Move()\n    {\n        float Speed = 10.0f;\n        int32 Distance = 100;\n    }\n\nprivate:\n    float Speed;\n    int32 Distance;\n};"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyCharacter : public AActor {\npublic:\n    AMyCharacter() { }\n\n    void BeginPlay() override {\n        Super::BeginPlay();\n    }\n    void DoSomething() {\n        if(bIsActive) SetActive(false); MoveToTarget();\n    }\nprivate:\n    bool bIsActive;\n    void SetActive(bool bActive) { bIsActive = bActive; }\n    void MoveToTarget() { }\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public AActor\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void DoSomething();\n\nprivate:\n    bool bIsActive;\n\n    void SetActive(bool bActive);\n\n    void MoveToTarget();\n};\n\nAMyCharacter::AMyCharacter()\n{\n}\n\nvoid AMyCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyCharacter::DoSomething()\n{\n    if (bIsActive)\n    {\n        SetActive(false);\n    }\n\n    MoveToTarget();\n}\n\nvoid AMyCharacter::SetActive(bool bActive)\n{\n    bIsActive = bActive;\n}\n\nvoid AMyCharacter::MoveToTarget()\n{\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Components/ActorComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    UMyComponent() : Speed(600.f), Health(100) { }\n\n    void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override {\n        Super::TickComponent(DeltaTime, TickType, ThisTickFunction);\n    }\nprivate:\n    float Speed; int32 Health;\n};", "good_code": "#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;\n\nprivate:\n    float Speed;\n    int32 Health;\n};\n\nUMyComponent::UMyComponent()\n    : Speed(600.f)\n    , Health(100)\n{\n}\n\nvoid UMyComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)\n{\n    Super::TickComponent(DeltaTime, TickType, ThisTickFunction);\n}"}
{"bad_code": "#include \"MyAIController.h\"\n#include \"AIController.h\"\n\nUCLASS()\nclass AMyAIController : public AAIController\n{\n    GENERATED_BODY()\npublic:\n    void OnPossess(APawn* InPawn) override {\n        Super::OnPossess(InPawn);\n    }\n};", "good_code": "#include \"AIController.h\"\n\n#include \"MyAIController.h\"\n\nUCLASS()\nclass AMyAIController : public AAIController\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void OnPossess(APawn* InPawn) override;\n};\n\nvoid AMyAIController::OnPossess(APawn* InPawn)\n{\n    Super::OnPossess(InPawn);\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n#include \"GameFramework/PlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\npublic:\n    void SetupInputComponent() override {\n        Super::SetupInputComponent();\n        InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);\n    }\n    void Jump() { }\n};", "good_code": "#include \"GameFramework/PlayerController.h\"\n\n#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void SetupInputComponent() override;\n\nprivate:\n    void Jump();\n};\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n\n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);\n}\n\nvoid AMyPlayerController::Jump()\n{\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/GameModeBase.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\npublic:\n    AMyGameMode() : m_Score(0) {}\n    int32 GetScore() const { return m_Score; }\nprivate:\n    int32 m_Score;\n};", "good_code": "#include \"GameFramework/GameModeBase.h\"\n\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\npublic:\n    AMyGameMode();\n\n    int32 GetScore() const;\n\nprivate:\n    int32 m_Score;\n};\n\nAMyGameMode::AMyGameMode()\n    : m_Score(0)\n{\n}\n\nint32 AMyGameMode::GetScore() const\n{\n    return m_Score;\n}"}
{"bad_code": "#include \"MyHUD.h\"\n#include \"GameFramework/HUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD\n{\n    GENERATED_BODY()\npublic:\n    void DrawHUD() override {\n        Super::DrawHUD();\n    }\n};", "good_code": "#include \"GameFramework/HUD.h\"\n\n#include \"MyHUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void DrawHUD() override;\n};\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n}"}
{"bad_code": "#include \"MyPawn.h\"\n#include \"GameFramework/Pawn.h\"\n\nUCLASS()\nclass AMyPawn : public APawn\n{\n    GENERATED_BODY()\npublic:\n    AMyPawn() {}\n    void BeginPlay() override {\n        Super::BeginPlay();\n    }\nprivate:\n    void DoSomething() {}\n};", "good_code": "#include \"GameFramework/Pawn.h\"\n\n#include \"MyPawn.h\"\n\nUCLASS()\nclass AMyPawn : public APawn\n{\n    GENERATED_BODY()\n\npublic:\n    AMyPawn();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    void DoSomething();\n};\n\nAMyPawn::AMyPawn()\n{\n}\n\nvoid AMyPawn::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyPawn::DoSomething()\n{\n}"}
{"bad_code": "#include \"MyWeapon.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyWeapon : public AActor\n{\n    GENERATED_BODY()\npublic:\n    void Fire() {}\n    bool bIsLoaded;\nprivate:\n    int32 AmmoCount;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyWeapon.h\"\n\nUCLASS()\nclass AMyWeapon : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void Fire();\n\n    bool bIsLoaded;\n\nprivate:\n    int32 AmmoCount;\n};\n\nvoid AMyWeapon::Fire()\n{\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Components/ActorComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    void BeginPlay() override {\n        Super::BeginPlay();\n    }\nprivate:\n    float Speed;\n};", "good_code": "#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void BeginPlay() override;\n\nprivate:\n    float Speed;\n};\n\nvoid UMyComponent::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Character.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\npublic:\n    void MoveForward(float Value) { }\n    bool bCanMove;\n};", "good_code": "#include \"GameFramework/Character.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    void MoveForward(float Value);\n\n    bool bCanMove;\n};\n\nvoid AMyCharacter::MoveForward(float Value)\n{\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n\nvoid AMyActor::Tick(float DeltaTime){\n    Super::Tick(DeltaTime);\n    if(bShouldMove) Move();\n}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"GameFramework/PlayerController.h\"\n#include \"MyActor.h\"\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bShouldMove)\n    {\n        Move();\n    }\n}"}
{"bad_code": "USTRUCT() struct FPlayerInfo {\n    GENERATED_BODY()\n    int32 Health, Energy;\n    float Speed;\n};", "good_code": "USTRUCT()\nstruct FPlayerInfo\n{\n    GENERATED_BODY()\n\n    int32 Health;\n    int32 Energy;\n    float Speed;\n};"}
{"bad_code": "class AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter();\n\nvoid StartRun();\nprivate:\nfloat RunSpeed;\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void StartRun();\n\nprivate:\n    float RunSpeed;\n};"}
{"bad_code": "UPROPERTY(int32 Health;)\nUCLASS class AEnemy : public AActor {\npublic:\n    AEnemy();\nprotected:\nvoid Attack();\n};", "good_code": "UCLASS()\nclass AEnemy : public AActor\n{\npublic:\n    AEnemy();\n\nprotected:\n    void Attack();\n\nprivate:\n    UPROPERTY()\n    int32 Health;\n};"}
{"bad_code": "UENUM() enum class EWeaponType { Sword, Gun };\nclass AWeaponManager {\n    public: void EquipWeapon();\n};", "good_code": "UENUM()\nenum class EWeaponType\n{\n    Sword,\n    Gun\n};\n\nclass AWeaponManager\n{\npublic:\n    void EquipWeapon();\n};"}
{"bad_code": "void CalculateDamage(int32 BaseDamage, int32& OutDamage){OutDamage = BaseDamage * 2;}", "good_code": "void CalculateDamage(int32 BaseDamage, int32& OutDamage)\n{\n    OutDamage = BaseDamage * 2;\n}"}
{"bad_code": "int32 Add(int32 A, int32 B) {return A+B;}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "for(int32 i=0;i<10;i++){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category=\"Stats\") int32 MaxHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 MaxHealth;"}
{"bad_code": "if(bIsReady){Launch();} else {Wait();}", "good_code": "if (bIsReady)\n{\n    Launch();\n}\nelse\n{\n    Wait();\n}"}
{"bad_code": "class MyActor: public AActor {\npublic:\n    float CalculateValue() { return 42; }\n    MyActor() {}\n    int32 Health;\nprotected:\n    void ResetState() {}\nprivate:\n    void Activate() {}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    float CalculateValue();\n\nprotected:\n    void ResetState();\n\nprivate:\n    void Activate();\n\n    int32 Health;\n};"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Engine/World.h\"\nint32 Multiply(int32 a,int32 b){return a*b;}", "good_code": "#include \"Engine/World.h\"\n\n#include \"MyComponent.h\"\n\nint32 Multiply(int32 A, int32 B)\n{\n    return A * B;\n}"}
{"bad_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 X, Y;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 X;\n    int32 Y;\n};"}
{"bad_code": "void SomeFunction() {\n    if(bIsReady) DoSomething();\n}", "good_code": "void SomeFunction()\n{\n    if (bIsReady)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "UPROPERTY()\nint32 Score; UPROPERTY() int32 Lives;", "good_code": "UPROPERTY()\nint32 Score;\n\nUPROPERTY()\nint32 Lives;"}
{"bad_code": "void Update() {\n\n    int32 A=10, B=20;\n    int32 C=A+B;\n}", "good_code": "void Update()\n{\n    int32 A = 10;\n    int32 B = 20;\n    int32 C = A + B;\n}"}
{"bad_code": "bool bIsVisible;bool bIsActive;", "good_code": "bool bIsVisible;\n\nbool bIsActive;"}
{"bad_code": "for(int32 i=0;i<10;++i)\n    DoSomething();", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "UENUM()\nenum EMyEnum {ValueOne, ValueTwo};", "good_code": "UENUM()\nenum EMyEnum\n{\n    ValueOne,\n    ValueTwo\n};"}
{"bad_code": "void MoveToTarget() { \n}\nvoid Stop() { } void Start(){}", "good_code": "void MoveToTarget()\n{\n}\n\nvoid Stop()\n{\n}\n\nvoid Start()\n{\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor {\n    public: AMyActor() {}\n\n    void Jump(){}\n\n    private: int32 health; void Activate() {}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Jump();\n\nprivate:\n    int32 Health;\n    void Activate();\n};"}
{"bad_code": "UCLASS() class AEnemy : public ACharacter {\n    UFUNCTION(BlueprintCallable, Category=\"Enemy\") void AttackPlayer();\n    UPROPERTY(EditAnywhere) int32 damage;\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Enemy\")\n    void AttackPlayer();\n\n    UPROPERTY(EditAnywhere)\n    int32 Damage;\n};"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n#include \"MyCharacter.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameMode.h\""}
{"bad_code": "UCLASS()\nclass UMyWidget : public UUserWidget {\n    public: UMyWidget() {}\n    void Setup(){ bIsActive = true; }\n    private: bool bIsActive; \n};", "good_code": "UCLASS()\nclass UMyWidget : public UUserWidget\n{\npublic:\n    UMyWidget();\n\n    void Setup();\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "void APlayerController::BeginPlay() \n{\n    Super::BeginPlay();\n    int32 score = 0;\n    int32 level = 1;\n    if(score > 0) SetScore(score);\n}", "good_code": "void APlayerController::BeginPlay()\n{\n    Super::BeginPlay();\n\n    int32 Score = 0;\n    int32 Level = 1;\n\n    if (Score > 0)\n    {\n        SetScore(Score);\n    }\n}"}
{"bad_code": "UPROPERTY() bool bIsVisible; \nUPROPERTY(EditAnywhere) float speed;\nUPROPERTY(EditDefaultsOnly) int health;", "good_code": "UPROPERTY(EditAnywhere)\nfloat Speed;\n\nUPROPERTY(EditDefaultsOnly)\nint32 Health;\n\nUPROPERTY()\nbool bIsVisible;"}
{"bad_code": "void AMyClass::Start(){if(bCanStart){StartEngine();}}", "good_code": "void AMyClass::Start()\n{\n    if (bCanStart)\n    {\n        StartEngine();\n    }\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"EngineMinimal.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyActor.h\"", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "USTRUCT(BlueprintType) struct FPlayerStats { GENERATED_BODY() int32 score; float health; };", "good_code": "USTRUCT(BlueprintType)\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Score;\n    float Health;\n};"}
{"bad_code": "UCLASS() class AMyPawn : public APawn { public: AMyPawn() {} private: int32 MaxSpeed; void Move(); };", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\nprivate:\n    int32 MaxSpeed;\n    void Move();\n};"}
{"bad_code": "#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor : public AActor{\npublic:\n    AMyActor();\n\n    void BeginPlay() override;\n};\nvoid AMyActor::BeginPlay(){\n    Super::BeginPlay();}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n};\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Components/ActorComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent{\n    GENERATED_BODY()\npublic:\n    UMyComponent();\n};\nUMyComponent::UMyComponent() {\n    PrimaryComponentTick.bCanEverTick=true;}", "good_code": "#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n};\n\nUMyComponent::UMyComponent()\n{\n    PrimaryComponentTick.bCanEverTick = true;\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter{\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\") float Health, Armor;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\n    float Health;\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\n    float Armor;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor{\n    GENERATED_BODY()\npublic:\n    void MoveToTarget(FVector target){ SetActorLocation(target);}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void MoveToTarget(FVector Target)\n    {\n        SetActorLocation(Target);\n    }\n};"}
{"bad_code": "UPROPERTY() int32 Score, Level;", "good_code": "UPROPERTY()\nint32 Score;\n\nUPROPERTY()\nint32 Level;"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter{\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\") float Health;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\") float Stamina;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\n    float Health;\n\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\n    float Stamina;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor{\n    GENERATED_BODY()\npublic:\n    void Jump(); void Crouch();\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void Jump();\n\n    void Crouch();\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor{\n    GENERATED_BODY()\nprotected:\n    void ResetState(){}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\nprotected:\n    void ResetState()\n    {\n    }\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor{\n    GENERATED_BODY()\npublic:\n    bool bIsVisible;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    bool bIsVisible;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor{\n    GENERATED_BODY()\nprivate:\n    int32 Health, Speed;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\nprivate:\n    int32 Health;\n\n    int32 Speed;\n};"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"MyGameMode.h\"\n#include \"GameFramework/Actor.h\"\n\nAMyGameMode::AMyGameMode() : Super()\n{\n    bStartPlayersAsSpectators = false; OnActorSpawned.AddDynamic(this, &AMyGameMode::HandleActorSpawned);\n}", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameMode.h\"\n\nAMyGameMode::AMyGameMode() \n    : Super()\n{\n    bStartPlayersAsSpectators = false;\n\n    OnActorSpawned.AddDynamic(this, &AMyGameMode::HandleActorSpawned);\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n\n    AMyCharacter()\n    {\n        Health = 100; Speed = 600.0f;\n    }\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n\n    AMyCharacter()\n    {\n        Health = 100;\n\n        Speed = 600.0f;\n    }\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\") int32 Health, Speed;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 Speed;"}
{"bad_code": "void AMyCharacter::Tick(float DeltaTime) {\n    Super::Tick(DeltaTime); if (bIsAlive) { MoveForward(); }\n}", "good_code": "void AMyCharacter::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bIsAlive)\n    {\n        MoveForward();\n    }\n}"}
{"bad_code": "if (Health > 0) { bIsAlive = true; } else { bIsAlive = false; }", "good_code": "if (Health > 0)\n{\n    bIsAlive = true;\n}\nelse\n{\n    bIsAlive = false;\n}"}
{"bad_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n    if (bShouldLog) UE_LOG(LogTemp, Warning, TEXT(\"Begin Play\"));  \n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bShouldLog)\n    {\n        UE_LOG(LogTemp, Warning, TEXT(\"Begin Play\"));\n    }\n}"}
{"bad_code": "#include \"Kismet/GameplayStatics.h\"\n#include \"MyComponent.h\"\n#include \"Engine/World.h\"\n\nvoid AMyActor::DoSomething() {\n    // implementation\n}", "good_code": "#include \"Engine/World.h\"\n#include \"Kismet/GameplayStatics.h\"\n\n#include \"MyComponent.h\"\n\nvoid AMyActor::DoSomething()\n{\n    // implementation\n}"}
{"bad_code": "void AMyActor::HandleEvent(int32 EventID){\n    if(EventID == 1) Activate(); else Deactivate();\n}", "good_code": "void AMyActor::HandleEvent(int32 EventID)\n{\n    if (EventID == 1)\n    {\n        Activate();\n    }\n    else\n    {\n        Deactivate();\n    }\n}"}
{"bad_code": "UENUM(BlueprintType) enum class ECharacterState : uint8 { Idle, Running, Jumping };", "good_code": "UENUM(BlueprintType)\nenum class ECharacterState : uint8\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "for(int32 i=0;i<10;i++){Sum+=i;}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    Sum += i;\n}"}
{"bad_code": "UENUM(BlueprintType)enum class EMood:uint8{Happy, Sad, Angry};", "good_code": "UENUM(BlueprintType)\nenum class EMood : uint8\n{\n    Happy,\n    Sad,\n    Angry\n};"}
{"bad_code": "UCLASS()class MyActor : public AActor{public:MyActor();virtual void BeginPlay() override;};", "good_code": "UCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n\n    virtual void BeginPlay() override;\n};"}
{"bad_code": "#include \"Engine/World.h\"#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n\n#include \"GameFramework/Actor.h\""}
{"bad_code": "UPROPERTY(int32 Health;float Stamina;)", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nfloat Stamina;"}
{"bad_code": "if(bIsVisible)SetActorHiddenInGame(false);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "int32 CalculateScore(int32 A,int32 B){return A+B;}", "good_code": "int32 CalculateScore(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable)void Jump();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();"}
{"bad_code": "class AMyPawn : public APawn {protected:void Move();int32 Speed;};", "good_code": "class AMyPawn : public APawn\n{\nprotected:\n    void Move();\n\n    int32 Speed;\n};"}
{"bad_code": "bool bIsJumping;bool bIsRunning;", "good_code": "bool bIsJumping;\n\nbool bIsRunning;"}
{"bad_code": "void Tick(float DeltaSeconds){Super::Tick(DeltaSeconds);}", "good_code": "void Tick(float DeltaSeconds)\n{\n    Super::Tick(DeltaSeconds);\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame.h\"\n#include \"MyActor.h\"\n\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void Tick(float DeltaTime) override {}\n\nprivate:\n    UPROPERTY(BlueprintReadWrite)\n    int32 Health;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyGame.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    UPROPERTY(BlueprintReadWrite)\n    int32 Health;\n};"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\nvoid AMyGameMode::StartPlay() {\n    Super::StartPlay();\n    if (GEngine)\n    { GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Hello World\")); }\n}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyGameMode.h\"\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n\n    if (GEngine)\n    {\n        GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Hello World\"));\n    }\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats {\n    GENERATED_BODY()\n    UPROPERTY()\n    int32 Health, Stamina;\n};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    UPROPERTY()\n    int32 Health;\n\n    UPROPERTY()\n    int32 Stamina;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    UFUNCTION(BlueprintCallable)\n    void MoveForward(float Value) {}\n\n    void BeginPlay() override {}\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    UFUNCTION(BlueprintCallable)\n    void MoveForward(float Value);\n\n    virtual void BeginPlay() override;\n};"}
{"bad_code": "if(bIsActive){\n    ActivateFeature();}", "good_code": "if (bIsActive)\n{\n    ActivateFeature();\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadOnly)\nint32 Ammo; int32 MaxAmmo;", "good_code": "UPROPERTY(EditAnywhere, BlueprintReadOnly)\nint32 Ammo;\n\nUPROPERTY(EditAnywhere, BlueprintReadOnly)\nint32 MaxAmmo;"}
{"bad_code": "void AMyPawn::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) {\n    PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyPawn::MoveForward); PlayerInputComponent->BindAxis(\"MoveRight\", this, &AMyPawn::MoveRight);\n}", "good_code": "void AMyPawn::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n{\n    PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyPawn::MoveForward);\n    PlayerInputComponent->BindAxis(\"MoveRight\", this, &AMyPawn::MoveRight);\n}"}
{"bad_code": "class AEnemy : public AActor {\n    void Attack() {}\nprotected:\n    bool bIsAggressive;\n    void Retreat() {}\n};", "good_code": "class AEnemy : public AActor\n{\npublic:\n    void Attack();\n\nprotected:\n    void Retreat();\n\n    bool bIsAggressive;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")\nfloat MovementSpeed;\nUPROPERTY(EditAnywhere, Category = \"Stats\")\nfloat JumpHeight;", "good_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")\nfloat MovementSpeed;\n\nUPROPERTY(EditAnywhere, Category = \"Stats\")\nfloat JumpHeight;"}
{"bad_code": "for (int32 i=0;i<10;++i) {DoSomething();}", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "#include \"MyGameCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nUCLASS()\nclass AMyGameCharacter : public ACharacter {\npublic:\n    AMyGameCharacter() {}\n\n    void CustomTick(float DeltaTime) override { Super::Tick(DeltaTime); }\n    \nprotected:\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\")\n    int32 MaxHealth;\n    UFUNCTION(BlueprintCallable, Category = \"Health\")\n    void Heal() { Health = MaxHealth; }\n\nprivate:\n    int32 Health; };", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyGameCharacter.h\"\n\nUCLASS()\nclass AMyGameCharacter : public ACharacter\n{\npublic:\n    AMyGameCharacter();\n\n    virtual void CustomTick(float DeltaTime) override;\n\nprotected:\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\")\n    int32 MaxHealth;\n\n    UFUNCTION(BlueprintCallable, Category = \"Health\")\n    void Heal();\n\nprivate:\n    int32 Health;\n};\n\nAMyGameCharacter::AMyGameCharacter()\n{\n}\n\nvoid AMyGameCharacter::CustomTick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}\n\nvoid AMyGameCharacter::Heal()\n{\n    Health = MaxHealth;\n}"}
{"bad_code": "#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\n    GENERATED_BODY()\n\npublic:\n    void BeginPlay() override { Super::BeginPlay(); }\n\n    void Tick(float DeltaTime) override { Super::Tick(DeltaTime); }\n\n    UPROPERTY(EditAnywhere)\n    float MovementSpeed;\n};", "good_code": "#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void BeginPlay() override;\n\n    virtual void Tick(float DeltaTime) override;\n\n    UPROPERTY(EditAnywhere)\n    float MovementSpeed;\n};\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Components/ActorComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent {\n    GENERATED_BODY()\n\npublic:\n    UMyComponent() { PrimaryComponentTick.bCanEverTick = true; }\n\n    void BeginPlay() override { Super::BeginPlay(); }\n};", "good_code": "#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n\n    virtual void BeginPlay() override;\n};\n\nUMyComponent::UMyComponent()\n{\n    PrimaryComponentTick.bCanEverTick = true;\n}\n\nvoid UMyComponent::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "#include \"MyHUD.h\"\n#include \"GameFramework/HUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD {\n    GENERATED_BODY()\n\npublic:\n    void DrawHUD() override { Super::DrawHUD(); }\n\nprotected:\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"UI\")\n    bool bShowHealthBar;\n};", "good_code": "#include \"GameFramework/HUD.h\"\n\n#include \"MyHUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void DrawHUD() override;\n\nprotected:\n    UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"UI\")\n    bool bShowHealthBar;\n};\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n#include \"GameFramework/PlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController {\n    GENERATED_BODY()\n\npublic:\n    void SetupInputComponent() override {\n        Super::SetupInputComponent();\n        InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump); }\n\n    void Jump() { /* Implementation */ }\n};", "good_code": "#include \"GameFramework/PlayerController.h\"\n\n#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void SetupInputComponent() override;\n\n    void Jump();\n};\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n    Super::SetupInputComponent();\n    \n    InputComponent->BindAction(\"Jump\", IE_Pressed, this, &AMyPlayerController::Jump);\n}\n\nvoid AMyPlayerController::Jump()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"MyGameInstance.h\"\n#include \"Engine/GameInstance.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance {\n    GENERATED_BODY()\n\npublic:\n    void Init() override { Super::Init(); }\n\n    void Shutdown() override { Super::Shutdown(); }\n\n    void StartGame() { /* Implementation */ }\n};", "good_code": "#include \"Engine/GameInstance.h\"\n\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void Init() override;\n\n    virtual void Shutdown() override;\n\n    void StartGame();\n};\n\nvoid UMyGameInstance::Init()\n{\n    Super::Init();\n}\n\nvoid UMyGameInstance::Shutdown()\n{\n    Super::Shutdown();\n}\n\nvoid UMyGameInstance::StartGame()\n{\n    // Implementation\n}"}
{"bad_code": "#include \"MyWeapon.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyWeapon : public AActor {\n    GENERATED_BODY()\n\npublic:\n    AMyWeapon() { /* Constructor Implementation */ }\n\n    void Fire() { /* Fire Implementation */ }\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    float Damage;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyWeapon.h\"\n\nUCLASS()\nclass AMyWeapon : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    AMyWeapon();\n\n    void Fire();\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    float Damage;\n};\n\nAMyWeapon::AMyWeapon()\n{\n    // Constructor Implementation\n}\n\nvoid AMyWeapon::Fire()\n{\n    // Fire Implementation\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"GameFramework/GameModeBase.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase {\n    GENERATED_BODY()\n\npublic:\n    void StartPlay() override { Super::StartPlay(); }\n\n    void EndGame() { /* EndGame Implementation */ }\n};", "good_code": "#include \"GameFramework/GameModeBase.h\"\n\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void StartPlay() override;\n\n    void EndGame();\n};\n\nvoid AMyGameMode::StartPlay()\n{\n    Super::StartPlay();\n}\n\nvoid AMyGameMode::EndGame()\n{\n    // EndGame Implementation\n}"}
{"bad_code": "#include \"MyAnimInstance.h\"\n#include \"Animation/AnimInstance.h\"\n\nUCLASS()\nclass UMyAnimInstance : public UAnimInstance {\n    GENERATED_BODY()\n\npublic:\n    void NativeInitializeAnimation() override { Super::NativeInitializeAnimation(); }\n\n    void UpdateAnimationProperties() { /* UpdateAnimation Implementation */ }\n};", "good_code": "#include \"Animation/AnimInstance.h\"\n\n#include \"MyAnimInstance.h\"\n\nUCLASS()\nclass UMyAnimInstance : public UAnimInstance\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void NativeInitializeAnimation() override;\n\n    void UpdateAnimationProperties();\n};\n\nvoid UMyAnimInstance::NativeInitializeAnimation()\n{\n    Super::NativeInitializeAnimation();\n}\n\nvoid UMyAnimInstance::UpdateAnimationProperties()\n{\n    // UpdateAnimation Implementation\n}"}
{"bad_code": "#include \"MyInterface.h\"\n#include \"UObject/Interface.h\"\n\nUINTERFACE(MinimalAPI)\nclass UMyInterface : public UInterface {\n    GENERATED_BODY()\n};\n\nclass IMyInterface {\n    GENERATED_BODY()\n\npublic:\n    void PerformAction() { /* PerformAction Implementation */ }\n};", "good_code": "#include \"UObject/Interface.h\"\n\n#include \"MyInterface.h\"\n\nUINTERFACE(MinimalAPI)\nclass UMyInterface : public UInterface\n{\n    GENERATED_BODY()\n};\n\nclass IMyInterface\n{\n    GENERATED_BODY()\n\npublic:\n    void PerformAction();\n};\n\nvoid IMyInterface::PerformAction()\n{\n    // PerformAction Implementation\n}"}
{"bad_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyCustomHeader.h\"\n\nUCLASS() class AMyActor : public AActor\n{\npublic:\n    AMyActor() { PrimaryActorTick.bCanEverTick = true; }\n    virtual void Tick(float DeltaTime) override { Super::Tick(DeltaTime); }\n    UPROPERTY(BlueprintReadOnly, Category=\"Setup\") UStaticMeshComponent* MeshComponent;\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n\n#include \"MyProject/MyCustomHeader.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void Tick(float DeltaTime) override;\n\n    UPROPERTY(BlueprintReadOnly, Category = \"Setup\")\n    UStaticMeshComponent* MeshComponent;\n};\n\nAMyActor::AMyActor()\n{\n    PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "int32 Add(int32 A, int32 B) {return A+B;}\n\nvoid SomeFunction() {\n    int32 Result=Add(3,4); if (Result>5) { DoSomething(); } else { DoSomethingElse(); }\n}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}\n\nvoid SomeFunction()\n{\n    int32 Result = Add(3, 4);\n\n    if (Result > 5)\n    {\n        DoSomething();\n    }\n    else\n    {\n        DoSomethingElse();\n    }\n}"}
{"bad_code": "UPROPERTY() int32 Health, MaxHealth;\n\nvoid AMyCharacter::SetHealth(int32 NewHealth) {Health=NewHealth; if(Health>MaxHealth) Health=MaxHealth;}", "good_code": "UPROPERTY()\nint32 Health;\n\nUPROPERTY()\nint32 MaxHealth;\n\nvoid AMyCharacter::SetHealth(int32 NewHealth)\n{\n    Health = NewHealth;\n\n    if (Health > MaxHealth)\n    {\n        Health = MaxHealth;\n    }\n}"}
{"bad_code": "class UMyComponent : public UActorComponent\n{\n    UPROPERTY() float Speed, MaxSpeed;\n    void SetSpeed(float NewSpeed) { Speed=NewSpeed; if (Speed>MaxSpeed) Speed=MaxSpeed; }\n};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    void SetSpeed(float NewSpeed)\n    {\n        Speed = NewSpeed;\n\n        if (Speed > MaxSpeed)\n        {\n            Speed = MaxSpeed;\n        }\n    }\n\nprivate:\n    UPROPERTY()\n    float Speed;\n\n    UPROPERTY()\n    float MaxSpeed;\n};"}
{"bad_code": "void Start()\n{if (bIsReady) Execute();}\nbool bIsReady; ", "good_code": "void Start()\n{\n    if (bIsReady)\n    {\n        Execute();\n    }\n}\n\nbool bIsReady;"}
{"bad_code": "#include \"GameFramework/Character.h\"\n#include \"MyProject/MyCharacter.h\"\n#include \"Components/InputComponent.h\"\n\nvoid AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n{PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward);}", "good_code": "#include \"GameFramework/Character.h\"\n\n#include \"Components/InputComponent.h\"\n#include \"MyProject/MyCharacter.h\"\n\nvoid AMyCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n{\n    PlayerInputComponent->BindAxis(\"MoveForward\", this, &AMyCharacter::MoveForward);\n}"}
{"bad_code": "float CalculateDamage(float BaseDamage, float Multiplier) { return BaseDamage*Multiplier; }\n\nvoid ApplyDamage(float Damage) { Health -= Damage; if (Health < 0) Health = 0; }", "good_code": "float CalculateDamage(float BaseDamage, float Multiplier)\n{\n    return BaseDamage * Multiplier;\n}\n\nvoid ApplyDamage(float Damage)\n{\n    Health -= Damage;\n\n    if (Health < 0)\n    {\n        Health = 0;\n    }\n}"}
{"bad_code": "for(int32 i=0;i<10;++i){ DoSomething(i); DoSomethingElse(i); }", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething(i);\n    DoSomethingElse(i);\n}"}
{"bad_code": "AMyActor::AMyActor() : Super(), Health(100), MaxHealth(100) {}\n\nvoid AMyActor::BeginPlay()\n{Super::BeginPlay(); Initialize();}", "good_code": "AMyActor::AMyActor()\n    : Super()\n    , Health(100)\n    , MaxHealth(100)\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n    Initialize();\n}"}
{"bad_code": "bool bIsActive; void ToggleActive() { bIsActive = !bIsActive; }", "good_code": "bool bIsActive;\n\nvoid ToggleActive()\n{\n    bIsActive = !bIsActive;\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor() {}\n    void Activate() {}\nprivate:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Activate();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n#include \"MyProject/MyComponent.h\"\n#include \"CoreMinimal.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n#include \"MyProject/MyComponent.h\""}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category=\"Health\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;"}
{"bad_code": "int32 CalculateDamage(int32 BaseDamage, int32 DamageModifier){ return BaseDamage * DamageModifier; }", "good_code": "int32 CalculateDamage(int32 BaseDamage, int32 DamageModifier)\n{\n    return BaseDamage * DamageModifier;\n}"}
{"bad_code": "UFUNCTION() void TakeDamage(int32 DamageAmount); UFUNCTION() void Heal(int32 HealAmount);", "good_code": "UFUNCTION()\nvoid TakeDamage(int32 DamageAmount);\n\nUFUNCTION()\nvoid Heal(int32 HealAmount);"}
{"bad_code": "for (int32 i=0;i<10;++i) { DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "bool bIsVisible=false;if(bIsVisible){SetActorHiddenInGame(false);}", "good_code": "bool bIsVisible = false;\n\nif (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "int32 X=10, Y=20;\nint32 Result=X*Y;", "good_code": "int32 X = 10;\nint32 Y = 20;\n\nint32 Result = X * Y;"}
{"bad_code": "class UMyComponent : public UActorComponent\n{\nprotected:\n    void BeginPlay() override;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\nprotected:\n    void BeginPlay() override;\n};"}
{"bad_code": "void PerformAction() \n{\n\n}", "good_code": "void PerformAction()\n{\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic: AMyActor() { }\n};\n\nvoid AMyActor::BeginPlay() {\n// Initialization logic\n}", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    // Initialization logic\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"Components/StaticMeshComponent.h\"\n\nif(bIsVisible) { Hide(); Show(); }", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyActor.h\"\n\nif (bIsVisible)\n{\n    Hide();\n}\n\nShow();"}
{"bad_code": "UENUM() enum class EMovementType { Walk, Run, Sprint };\n\nUCLASS() class UMyComponent : public UActorComponent { public: void DoSomething() {} };", "good_code": "UENUM()\nenum class EMovementType\n{\n    Walk,\n    Run,\n    Sprint\n};\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void DoSomething();\n};\n\nvoid UMyComponent::DoSomething()\n{\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, Category = \"Stats\") int32 Health, MaxHealth;", "good_code": "UPROPERTY(EditAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(EditAnywhere, Category = \"Stats\")\nint32 MaxHealth;"}
{"bad_code": "void MoveTo() { if(IsValid()) { SetPosition(); } }", "good_code": "void MoveTo()\n{\n    if (IsValid())\n    {\n        SetPosition();\n    }\n}"}
{"bad_code": "#include \"GameModeBase.h\"\n#include \"MyGameMode.h\"\n#include \"Engine/Engine.h\"\n#include \"Engine/World.h\"\n\nint32 Sum(int32 a,int32 b){return a+b;}", "good_code": "#include \"Engine/Engine.h\"\n#include \"Engine/World.h\"\n#include \"GameModeBase.h\"\n\n#include \"MyGameMode.h\"\n\nint32 Sum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter { public: AMyCharacter(); };\n\nAMyCharacter::AMyCharacter(){}", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n};\n\nAMyCharacter::AMyCharacter()\n{\n}"}
{"bad_code": "void Calculate() { float result=A*B+C; }", "good_code": "void Calculate()\n{\n    float Result = A * B + C;\n}"}
{"bad_code": "public: void Function() { DoSomething(); } private: int32 Counter;", "good_code": "public:\n    void Function();\n\nprivate:\n    int32 Counter;\n\nvoid Function()\n{\n    DoSomething();\n}"}
{"bad_code": "UPROPERTY() TArray<int32> Values; UFUNCTION(BlueprintCallable) void Execute();", "good_code": "UPROPERTY()\nTArray<int32> Values;\n\nUFUNCTION(BlueprintCallable)\nvoid Execute();"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/Engine.h\"\n#include \"MyGameInstance.h\"\n#include \"CoreMinimal.h\"", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n#include \"MyGameInstance.h\""}
{"bad_code": "UCLASS()\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    UMyComponent()\n    {\n    }\n\n    void DoSomething() { int32 Counter=0;Counter++; }\n};", "good_code": "UCLASS()\nclass MYGAME_API UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent()\n    {\n    }\n\n    void DoSomething()\n    {\n        int32 Counter = 0;\n        Counter++;\n    }\n};"}
{"bad_code": "USTRUCT(BlueprintType)\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\") int32 Health;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\") int32 Speed;\n};", "good_code": "USTRUCT(BlueprintType)\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")\n    int32 Health;\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")\n    int32 Speed;\n};"}
{"bad_code": "class AMyCharacter : public ACharacter\n{\n    public:\n        AMyCharacter() { }\n\n        void BeginPlay() override { Super::BeginPlay(); }\n\n    private:\n        int32 Health, Speed;\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n    {\n    }\n\n    virtual void BeginPlay() override\n    {\n        Super::BeginPlay();\n    }\n\nprivate:\n    int32 Health;\n    int32 Speed;\n};"}
{"bad_code": "void AMyActor::Tick(float DeltaTime)\n{\n     Super::Tick(DeltaTime);\n     if(bShouldMove) Move();\n}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bShouldMove)\n    {\n        Move();\n    }\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyClass : public AActor\n{\n    GENERATED_BODY()\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Stats\") float MaxHealth;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyClass : public AActor\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Stats\")\n    float MaxHealth;\n};"}
{"bad_code": "for(int i=0;i<10;i++)\n{\n    DoSomething();\n}", "good_code": "for (int i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "bool AMyActor::IsAlive(){return Health>0;}", "good_code": "bool AMyActor::IsAlive()\n{\n    return Health > 0;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Actions\") void Jump();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Actions\")\nvoid Jump();"}
{"bad_code": "class AMyActor : public AActor\n{\n    int32 Speed;\n    bool bIsRunning;\npublic:\n    AMyActor() {}\n};", "good_code": "class AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n    }\n\nprivate:\n    int32 Speed;\n    bool bIsRunning;\n};"}
{"bad_code": "class MyActor: public AActor\n{\n    public:\n    MyActor(){}\n    void BeginPlay() override {}\n    void Activate() {}\n\n    private:\n    int32 Health, Mana;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    int32 Health;\n    int32 Mana;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyActor.h\"\n#include \"Engine/World.h\"\n\nclass AMyActor : public AActor\n{\n    public:\n    void Tick(float DeltaTime) override {}\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    virtual void Tick(float DeltaTime) override;\n};"}
{"bad_code": "public:\nUPROPERTY(BlueprintReadWrite) int32 Health;\nUPROPERTY(BlueprintReadOnly) int32 MaxHealth;", "good_code": "public:\nUPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nint32 MaxHealth;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime){\n    Super::Tick(DeltaTime);}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "int32 AMyActor::CalculateScore(int32 points, int32 multiplier){return points*multiplier;}", "good_code": "int32 AMyActor::CalculateScore(int32 Points, int32 Multiplier)\n{\n    return Points * Multiplier;\n}"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "void DoSomething()\n{\n    if(bDone) return;\n    Process();\n    bDone=true;}", "good_code": "void DoSomething()\n{\n    if (bDone)\n    {\n        return;\n    }\n\n    Process();\n    bDone = true;\n}"}
{"bad_code": "void Calculate(int32 a,int32 b){int32 sum=a+b;int32 product=a*b;}", "good_code": "void Calculate(int32 A, int32 B)\n{\n    int32 Sum = A + B;\n    int32 Product = A * B;\n}"}
{"bad_code": "void Process() { for(int32 i=0;i<10;i++){ DoSomething();} }", "good_code": "void Process()\n{\n    for (int32 i = 0; i < 10; i++)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "class MyComponent\n{\n    bool bIsActive;\n    float Speed;\n};", "good_code": "class UMyComponent\n{\npublic:\n    bool bIsActive;\n\n    float Speed;\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() {}\n\n    void Attack()\n    {\n        if(bIsAttacking) AttackEnemy();\n    }\n    void Defend() { bIsDefending=true; }\nprivate:\n    bool bIsAttacking; bool bIsDefending;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Attack();\n\n    void Defend();\n\nprivate:\n    bool bIsAttacking;\n    bool bIsDefending;\n};\n\nAMyCharacter::AMyCharacter()\n{\n}\n\nvoid AMyCharacter::Attack()\n{\n    if (bIsAttacking)\n    {\n        AttackEnemy();\n    }\n}\n\nvoid AMyCharacter::Defend()\n{\n    bIsDefending = true;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"MyGameMode.h\"\n#include \"GameFramework/Actor.h\"\n\nclass MyActor : public AActor {\nvoid MyFunction(){ return 3*4;}\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameMode.h\"\n\nclass MyActor : public AActor\n{\n    void MyFunction()\n    {\n        return 3 * 4;\n    }\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 HealthPoints, DamagePoints;", "good_code": "UPROPERTY(EditAnywhere)\nint32 HealthPoints;\n\nUPROPERTY(EditAnywhere)\nint32 DamagePoints;"}
{"bad_code": "if(Health<50) { Health++; } else { Health--; }", "good_code": "if (Health < 50)\n{\n    Health++;\n}\nelse\n{\n    Health--;\n}"}
{"bad_code": "void MoveForward() {\n    if (bCanMove) { Position += Speed; }\n}", "good_code": "void MoveForward()\n{\n    if (bCanMove)\n    {\n        Position += Speed;\n    }\n}"}
{"bad_code": "UCLASS()\nclass MyPawn : public APawn{\nprotected:\n    void BeginPlay() override {}\npublic:\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override{}\n};", "good_code": "UCLASS()\nclass MyPawn : public APawn\n{\npublic:\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\n\nprotected:\n    void BeginPlay() override;\n};\n\nvoid MyPawn::BeginPlay()\n{\n}\n\nvoid MyPawn::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)\n{\n}"}
{"bad_code": "#include \"MyPlayer.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\nvoid AMyPlayer::Tick(float DeltaTime) { Super::Tick(DeltaTime); }", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyPlayer.h\"\n\nvoid AMyPlayer::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n}"}
{"bad_code": "UENUM()\nenum class EWeaponType { Melee, Ranged, Magic };", "good_code": "UENUM()\nenum class EWeaponType\n{\n    Melee,\n    Ranged,\n    Magic\n};"}
{"bad_code": "void CalculateDamage(int32 BaseDamage, float Multiplier){return BaseDamage*Multiplier;}", "good_code": "void CalculateDamage(int32 BaseDamage, float Multiplier)\n{\n    return BaseDamage * Multiplier;\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere, Category=Mesh) UStaticMeshComponent* PlayerMesh;", "good_code": "UPROPERTY(VisibleAnywhere, Category = Mesh)\nUStaticMeshComponent* PlayerMesh;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyGameCharacter.h\"\n#include \"CoreMinimal.h\"\n#include \"MyGame/MyGameComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void DoSomething()\n    {\n        int32 a,b;\n        a=10;b=20;\n        int32 Result = a+b;\n    }\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyGameCharacter.h\"\n#include \"MyGame/MyGameComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void DoSomething();\n\nprivate:\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::DoSomething()\n{\n    int32 A = 10;\n    int32 B = 20;\n    int32 Result = A + B;\n}"}
{"bad_code": "UCLASS()\nclass AMainCharacter : public ACharacter {\npublic:\n    void BeginPlay() override {\n        Super::BeginPlay();\n        InitCharacter();\n    }\n    void InitCharacter() { Health = 100; }\nprotected:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMainCharacter : public ACharacter\n{\npublic:\n    virtual void BeginPlay() override;\n\nprotected:\n    void InitCharacter();\n\nprivate:\n    int32 Health;\n};\n\nvoid AMainCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n    InitCharacter();\n}\n\nvoid AMainCharacter::InitCharacter()\n{\n    Health = 100;\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    UFUNCTION(BlueprintCallable)\n    void EnableComponent(bool enable) {\n        bIsEnabled = enable;\n        if (bIsEnabled) Activate(); else Deactivate();\n    }\n\nprivate:\n    void Activate() { /* Activation Logic */ }\n    void Deactivate() { /* Deactivation Logic */ }\n\n    UPROPERTY()\n    bool bIsEnabled;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UFUNCTION(BlueprintCallable)\n    void EnableComponent(bool bEnable);\n\nprivate:\n    void Activate();\n\n    void Deactivate();\n\n    UPROPERTY()\n    bool bIsEnabled;\n};\n\nvoid UMyComponent::EnableComponent(bool bEnable)\n{\n    bIsEnabled = bEnable;\n    \n    if (bIsEnabled)\n    {\n        Activate();\n    }\n    else\n    {\n        Deactivate();\n    }\n}\n\nvoid UMyComponent::Activate()\n{\n    // Activation Logic\n}\n\nvoid UMyComponent::Deactivate()\n{\n    // Deactivation Logic\n}"}
{"bad_code": "#include \"MyGame/MyGameComponent.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AEnemy : public AActor {\npublic:\n    void Attack(int32 damage) { Health -= damage; }\nprivate:\n    int32 Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyGameComponent.h\"\n\nUCLASS()\nclass AEnemy : public AActor\n{\npublic:\n    void Attack(int32 Damage);\n\nprivate:\n    int32 Health;\n};\n\nvoid AEnemy::Attack(int32 Damage)\n{\n    Health -= Damage;\n}"}
{"bad_code": "UCLASS()\nclass UMyGameInstance : public UGameInstance {\npublic:\n    void Init() override {\n        Super::Init();\n        LoadGameSettings();\n    }\n\nprivate:\n    void LoadGameSettings() {}\n};", "good_code": "UCLASS()\nclass UMyGameInstance : public UGameInstance\n{\npublic:\n    virtual void Init() override;\n\nprivate:\n    void LoadGameSettings();\n};\n\nvoid UMyGameInstance::Init()\n{\n    Super::Init();\n    LoadGameSettings();\n}\n\nvoid UMyGameInstance::LoadGameSettings()\n{\n}"}
{"bad_code": "UCLASS()\nclass UPlayerInventory : public UObject {\npublic:\n    void AddItem(FString itemName) { Items.Add(itemName); }\n    TArray<FString> GetItems() { return Items; }\nprivate:\n    TArray<FString> Items;\n};", "good_code": "UCLASS()\nclass UPlayerInventory : public UObject\n{\npublic:\n    void AddItem(FString ItemName);\n\n    TArray<FString> GetItems();\n\nprivate:\n    TArray<FString> Items;\n};\n\nvoid UPlayerInventory::AddItem(FString ItemName)\n{\n    Items.Add(ItemName);\n}\n\nTArray<FString> UPlayerInventory::GetItems()\n{\n    return Items;\n}"}
{"bad_code": "UCLASS()\nclass ACollectible : public AActor {\npublic:\n    ACollectible() : Value(0) {}\n    int32 GetValue() { return Value; }\nprivate:\n    int32 Value;\n};", "good_code": "UCLASS()\nclass ACollectible : public AActor\n{\npublic:\n    ACollectible();\n\n    int32 GetValue();\n\nprivate:\n    int32 Value;\n};\n\nACollectible::ACollectible()\n    : Value(0)\n{\n}\n\nint32 ACollectible::GetValue()\n{\n    return Value;\n}"}
{"bad_code": "UCLASS()\nclass AMyVehicle : public APawn {\npublic:\n    void Drive(float speed) { CurrentSpeed = speed; }\n    float GetCurrentSpeed() { return CurrentSpeed; }\nprivate:\n    float CurrentSpeed;\n};", "good_code": "UCLASS()\nclass AMyVehicle : public APawn\n{\npublic:\n    void Drive(float Speed);\n\n    float GetCurrentSpeed();\n\nprivate:\n    float CurrentSpeed;\n};\n\nvoid AMyVehicle::Drive(float Speed)\n{\n    CurrentSpeed = Speed;\n}\n\nfloat AMyVehicle::GetCurrentSpeed()\n{\n    return CurrentSpeed;\n}"}
{"bad_code": "UCLASS()\nclass AWeapon : public AActor {\npublic:\n    void Fire() { if (bIsLoaded) { Ammo--; } }\nprivate:\n    bool bIsLoaded;\n    int32 Ammo;\n};", "good_code": "UCLASS()\nclass AWeapon : public AActor\n{\npublic:\n    void Fire();\n\nprivate:\n    bool bIsLoaded;\n\n    int32 Ammo;\n};\n\nvoid AWeapon::Fire()\n{\n    if (bIsLoaded)\n    {\n        Ammo--;\n    }\n}"}
{"bad_code": "UCLASS()\nclass UMyHUD : public UUserWidget {\npublic:\n    void Show() { SetVisibility(ESlateVisibility::Visible); }\n    void Hide() { SetVisibility(ESlateVisibility::Hidden); }\n};", "good_code": "UCLASS()\nclass UMyHUD : public UUserWidget\n{\npublic:\n    void Show();\n\n    void Hide();\n};\n\nvoid UMyHUD::Show()\n{\n    SetVisibility(ESlateVisibility::Visible);\n}\n\nvoid UMyHUD::Hide()\n{\n    SetVisibility(ESlateVisibility::Hidden);\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGame/MyActor.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor {\npublic:\n    AMyActor() {}\n\n    void BeginPlay() override {\n        Super::BeginPlay();\n    }\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGame/MyActor.h\"\n\nUCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter {\n    GENERATED_BODY()\npublic:\n    UPROPERTY()\n    bool bIsRunning; float Health; UPROPERTY()\n    float MaxHealth; UFUNCTION()\n    void Run() { bIsRunning = true; }\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadOnly)\n    float MaxHealth;\n\n    UPROPERTY()\n    bool bIsRunning;\n\n    UFUNCTION()\n    void Run();\n\nprivate:\n    float Health;\n};\n\nvoid AMyCharacter::Run()\n{\n    bIsRunning = true;\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyComponent : public UActorComponent {\n    GENERATED_BODY()\nprotected:\n    void InitializeComponent() override {\n    }\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\nprotected:\n    virtual void InitializeComponent() override;\n};\n\nvoid AMyComponent::InitializeComponent()\n{\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"CoreMinimal.h\"\n\nclass MYGAME_API AMyActor : public AActor {\npublic:\n    AMyActor() {}\n    void Start() {}\nprivate:\n    int32 x, y;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Start();\n\nprivate:\n    int32 x;\n    int32 y;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Start()\n{\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyPawn : public APawn {\n    GENERATED_BODY()\npublic:\n    void Rotate(float DeltaTime) {}\n    bool CanJump() { return JumpCount > 0; }\nprivate:\n    int32 JumpCount;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyPawn : public APawn\n{\n    GENERATED_BODY()\n\npublic:\n    void Rotate(float DeltaTime);\n\n    bool CanJump();\n\nprivate:\n    int32 JumpCount;\n};\n\nvoid AMyPawn::Rotate(float DeltaTime)\n{\n}\n\nbool AMyPawn::CanJump()\n{\n    return JumpCount > 0;\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor {\npublic:\n    void UpdatePosition();\n    void SetHealth(float NewHealth) { Health = NewHealth; }\nprotected:\n    float Health;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyActor : public AActor\n{\npublic:\n    void UpdatePosition();\n\n    void SetHealth(float NewHealth);\n\nprotected:\n    float Health;\n};\n\nvoid AMyActor::SetHealth(float NewHealth)\n{\n    Health = NewHealth;\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n\nclass MYGAME_API AMyCharacter : public ACharacter {\npublic:\n    void Jump() { Super::Jump(); } void StopJump() { }\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n\nclass MYGAME_API AMyCharacter : public ACharacter\n{\npublic:\n    void Jump();\n\n    void StopJump();\n};\n\nvoid AMyCharacter::Jump()\n{\n    Super::Jump();\n}\n\nvoid AMyCharacter::StopJump()\n{\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyPlayerController : public APlayerController {\n    GENERATED_BODY()\npublic:\n    AMyPlayerController() { }\n    bool IsInputEnabled() { return bInputEnabled; }\nprivate:\n    bool bInputEnabled;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyPlayerController : public APlayerController\n{\n    GENERATED_BODY()\n\npublic:\n    AMyPlayerController();\n\n    bool IsInputEnabled();\n\nprivate:\n    bool bInputEnabled;\n};\n\nAMyPlayerController::AMyPlayerController()\n{\n}\n\nbool AMyPlayerController::IsInputEnabled()\n{\n    return bInputEnabled;\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyVehicle : public APawn {\n    GENERATED_BODY()\nprotected:\n    void Accelerate() { Speed += 10; }\nprivate:\n    float Speed;\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyVehicle : public APawn\n{\n    GENERATED_BODY()\n\nprotected:\n    void Accelerate();\n\nprivate:\n    float Speed;\n};\n\nvoid AMyVehicle::Accelerate()\n{\n    Speed += 10;\n}"}
{"bad_code": "UCLASS()\nclass MYGAME_API AMyHUD : public AHUD {\n    GENERATED_BODY()\npublic:\n    void DrawHUD() override {\n        Super::DrawHUD();\n    }\n};", "good_code": "UCLASS()\nclass MYGAME_API AMyHUD : public AHUD\n{\n    GENERATED_BODY()\n\npublic:\n    virtual void DrawHUD() override;\n};\n\nvoid AMyHUD::DrawHUD()\n{\n    Super::DrawHUD();\n}"}
{"bad_code": "#include \"MyGameMode.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode(){}\n    void StartPlay() override;\n\nprivate:\n    void SpawnPlayer();\n    int32 PlayerCount;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyGameMode : public AGameModeBase\n{\npublic:\n    AMyGameMode()\n    {\n    }\n\n    virtual void StartPlay() override;\n\nprivate:\n    void SpawnPlayer();\n\n    int32 PlayerCount;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadOnly, Category=\"Movement\") float Speed, Acceleration;", "good_code": "UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Movement\")\nfloat Acceleration;"}
{"bad_code": "UCLASS() class AEnemy : public ACharacter\n{\npublic: \n    AEnemy();\n\n    void Attack(); void Defend();\n\nprotected:\n    void MoveToTarget();\n\nprivate:\n    bool bIsAggressive; int32 Health;\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    AEnemy();\n\n    void Attack();\n\n    void Defend();\n\nprotected:\n    void MoveToTarget();\n\nprivate:\n    bool bIsAggressive;\n\n    int32 Health;\n};"}
{"bad_code": "void SetHealth(int32 NewHealth){Health = NewHealth;}", "good_code": "void SetHealth(int32 NewHealth)\n{\n    Health = NewHealth;\n}"}
{"bad_code": "USTRUCT() struct FPlayerStats\n{int32 Kills; int32 Deaths; float Accuracy;};", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Kills;\n\n    int32 Deaths;\n\n    float Accuracy;\n};"}
{"bad_code": "if(bIsActive){DoSomething();}", "good_code": "if (bIsActive)\n{\n    DoSomething();\n}"}
{"bad_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);DoSomething();MoveActor();}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    DoSomething();\n\n    MoveActor();\n}"}
{"bad_code": "UPROPERTY() int32 Score;\nUPROPERTY() bool bIsGameOver;", "good_code": "UPROPERTY()\nbool bIsGameOver;\n\nUPROPERTY()\nint32 Score;"}
{"bad_code": "for(int32 i=0;i<10;i++){Values[i]=i;}", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    Values[i] = i;\n}"}
{"bad_code": "UENUM() enum class EGameState : uint8 {Playing,Paused,GameOver};", "good_code": "UENUM()\nenum class EGameState : uint8\n{\n    Playing,\n    Paused,\n    GameOver\n};"}
{"bad_code": "#include \"MyProjectCharacter.h\"\n#include \"MyGameInstance.h\"\n#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyHelperLibrary.h\"", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"Components/StaticMeshComponent.h\"\n\n#include \"MyGameInstance.h\"\n#include \"MyHelperLibrary.h\"\n#include \"MyProjectCharacter.h\""}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter{\npublic:\n    AMyCharacter(){}\n    void Move() { Speed += 10; Health -= 5; }\n    bool IsDead(){return Health<=0;}\n    int Speed, Health;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Move();\n\n    bool IsDead();\n\nprivate:\n    int Speed;\n    int Health;\n};\n\nAMyCharacter::AMyCharacter()\n{\n}\n\nvoid AMyCharacter::Move()\n{\n    Speed += 10;\n    Health -= 5;\n}\n\nbool AMyCharacter::IsDead()\n{\n    return Health <= 0;\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Score, HighScore;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Score;\n\nUPROPERTY(EditAnywhere)\nint32 HighScore;"}
{"bad_code": "void DoSomething()\n{\n    if(bIsTrue) { DoTask(); }\n}", "good_code": "void DoSomething()\n{\n    if (bIsTrue)\n    {\n        DoTask();\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    void DoAction();\npublic:\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void DoAction();\n\n    float Speed;\n};"}
{"bad_code": "public:\n    int32 A, B, C;", "good_code": "public:\n    int32 A;\n    int32 B;\n    int32 C;"}
{"bad_code": "void Calculate()\n{\n    int32 Total=0;\n    Total=Value1+Value2*Value3;\n}", "good_code": "void Calculate()\n{\n    int32 Total = 0;\n    Total = Value1 + Value2 * Value3;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) int32 ComputeValue();", "good_code": "UFUNCTION(BlueprintCallable)\nint32 ComputeValue();"}
{"bad_code": "class MyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n    bool bIsActive;\npublic:\n    void Activate();\n};", "good_code": "UCLASS()\nclass MyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    void Activate();\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "void ProcessData()\n{\n    for(int i=0;i<10;i++) { Process(i); }\n}", "good_code": "void ProcessData()\n{\n    for (int i = 0; i < 10; i++)\n    {\n        Process(i);\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() {}\n\n    void MoveToLocation(FVector Location); void Attack();\n\n    int32 Health, Stamina;\n\n    private:\n    void Reset();\n\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void MoveToLocation(FVector Location);\n    void Attack();\n\nprivate:\n    void Reset();\n\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyCustomComponent.h\"\n#include \"Engine/World.h\"\n#include \"MyProjectComponent.h\"\n\nclass AExample : public AActor {\n    public:\n    void DoSomething() { int32 Result=5+3; }\n\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCustomComponent.h\"\n#include \"MyProjectComponent.h\"\n\nclass AExample : public AActor\n{\npublic:\n    void DoSomething()\n    {\n        int32 Result = 5 + 3;\n    }\n};"}
{"bad_code": "UPROPERTY() int32 Score;\nUFUNCTION() void CalculateScore();\n\nclass AGameMode : public AGameModeBase {\nvoid StartPlay() {};\n};", "good_code": "UCLASS()\nclass AGameMode : public AGameModeBase\n{\npublic:\n    virtual void StartPlay() override;\n\nprivate:\n    UPROPERTY()\n    int32 Score;\n\n    UFUNCTION()\n    void CalculateScore();\n};"}
{"bad_code": "class ANPC {\nbool bIsFriendly;\npublic:\nANPC()=default;\nvoid Interact() {};\n};", "good_code": "class ANPC\n{\npublic:\n    ANPC();\n\n    void Interact();\n\nprivate:\n    bool bIsFriendly;\n};"}
{"bad_code": "USTRUCT() struct FPlayerStats { int32 Health; float Stamina; };\n\nvoid ACharacter::Jump(){}", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Health;\n    float Stamina;\n};\n\nvoid ACharacter::Jump()\n{\n}"}
{"bad_code": "UENUM() enum class EGameState { Playing, Paused, GameOver };\n\nclass AGameInstance : public UGameInstance {\nvoid Init() {};\n};", "good_code": "UENUM()\nenum class EGameState\n{\n    Playing,\n    Paused,\n    GameOver\n};\n\nUCLASS()\nclass AGameInstance : public UGameInstance\n{\npublic:\n    virtual void Init() override;\n};"}
{"bad_code": "#include \"Components/ActorComponent.h\"\n#include \"MyProject/MyComponent.h\"\n\nvoid MyFunc() { int32 A=10; int32 B=20; int32 Result=A+B; }", "good_code": "#include \"Components/ActorComponent.h\"\n\n#include \"MyProject/MyComponent.h\"\n\nvoid MyFunc()\n{\n    int32 A = 10;\n    int32 B = 20;\n    int32 Result = A + B;\n}"}
{"bad_code": "void UpdateState(bool bIsActive){if(bIsActive){Activate();}else{Deactivate();}}", "good_code": "void UpdateState(bool bIsActive)\n{\n    if (bIsActive)\n    {\n        Activate();\n    }\n    else\n    {\n        Deactivate();\n    }\n}"}
{"bad_code": "#include \"GameFramework/Character.h\"\n#include \"Engine/Engine.h\"\n\nclass AMyCharacter : public ACharacter {\npublic:\nAMyCharacter(){}\nvoid Attack(){}\n\nprivate:\nint32 AttackPower;\n};", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Character.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void Attack();\n\nprivate:\n    int32 AttackPower;\n};"}
{"bad_code": "void Calculate() { int32 A=10,B=20;int32 Result=A+B; }", "good_code": "void Calculate()\n{\n    int32 A = 10;\n    int32 B = 20;\n    int32 Result = A + B;\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category=\"Health\") int32 Health;\n\nAMyCharacter::AMyCharacter()\n{\n    Health = 100;\n}", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Health\")\nint32 Health;\n\nAMyCharacter::AMyCharacter()\n{\n    Health = 100;\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyGameMode.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyGameMode.h\""}
{"bad_code": "if(bIsActive) SetActive(true);", "good_code": "if (bIsActive)\n{\n    SetActive(true);\n}"}
{"bad_code": "int32 A=5,B=10,Result=A+B;", "good_code": "int32 A = 5;\nint32 B = 10;\nint32 Result = A + B;"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    void DoSomething();\n    int32 Value;\npublic:\n    AMyActor();\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void DoSomething();\n\nprivate:\n    int32 Value;\n};"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();"}
{"bad_code": "void UpdateScore(){ Score += 10; }", "good_code": "void UpdateScore()\n{\n    Score += 10;\n}"}
{"bad_code": "void Calculate()\n{\n    int32 X=10;int32 Y=20;int32 Z=X+Y;\n}", "good_code": "void Calculate()\n{\n    int32 X = 10;\n    int32 Y = 20;\n    int32 Z = X + Y;\n}"}
{"bad_code": "UENUM() enum class EStatus { Walking, Running, Jumping };", "good_code": "UENUM()\nenum class EStatus\n{\n    Walking,\n    Running,\n    Jumping\n};"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false); else SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGameMode.h\"\n#include \"MyCharacter.h\"\n\nUCLASS() class UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\n    UMyComponent()\n    {\n        PrimaryComponentTick.bCanEverTick = true;\n    }\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyCharacter.h\"\n#include \"MyComponent.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent()\n    {\n        PrimaryComponentTick.bCanEverTick = true;\n    }\n};"}
{"bad_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Movement\") float MaxSpeed, MinSpeed;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Movement\")\nfloat MaxSpeed;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Movement\")\nfloat MinSpeed;"}
{"bad_code": "if (Health>0) { Health--; }\nelse { bIsAlive = false; }", "good_code": "if (Health > 0)\n{\n    Health--;\n}\nelse\n{\n    bIsAlive = false;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void SetHealth(float NewHealth);", "good_code": "UFUNCTION(BlueprintCallable)\nvoid SetHealth(float NewHealth);"}
{"bad_code": "class AMyActor : public AActor\n{\n    GENERATED_BODY()\n    public:\n    void Jump()\n    {\n        // Jump logic\n    }\n};", "good_code": "class AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    void Jump()\n    {\n        // Jump logic\n    }\n};"}
{"bad_code": "int32 CalculateSum(int32 A, int32 B){return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "for (int32 i = 0; i < 10; i++) { DoSomething(); }", "good_code": "for (int32 i = 0; i < 10; i++)\n{\n    DoSomething();\n}"}
{"bad_code": "bool bIsRunning, bIsFlying;", "good_code": "bool bIsRunning;\nbool bIsFlying;"}
{"bad_code": "if(bIsVisible) { SetActorHiddenInGame(false);; }", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "float x = 0, y = 0, z = 0;", "good_code": "float x = 0;\nfloat y = 0;\nfloat z = 0;"}
{"bad_code": "UCLASS() class AMyActor : public AActor\n{\npublic:\n    AMyActor() {}\n\n    virtual void BeginPlay() override {}\n    void Activate() { ResetState(); }\nprotected:\n    void ResetState() { int32 Health = 100; }\nprivate:\n    bool bIsActive; bool bIsVisible;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    bool bIsActive;\n    bool bIsVisible;\n\n    int32 Health = 100;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n\nUSTRUCT() struct FMyStruct {\n    GENERATED_BODY()\n    UPROPERTY() int32 Count;\n    float Value; \n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n\nUSTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    UPROPERTY()\n    int32 Count;\n\n    float Value;\n};"}
{"bad_code": "UCLASS() class UMyComponent : public UActorComponent {\n    GENERATED_BODY()\npublic:\n    UMyComponent();\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UMyComponent();\n};"}
{"bad_code": "class AMyCharacter : public ACharacter {\n    void MoveForward(float Value) { AddMovementInput(GetActorForwardVector(), Value); }\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    void MoveForward(float Value)\n    {\n        AddMovementInput(GetActorForwardVector(), Value);\n    }\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 MaxHealth, CurrentHealth;", "good_code": "UPROPERTY(EditAnywhere)\nint32 MaxHealth;\n\nUPROPERTY(EditAnywhere)\nint32 CurrentHealth;"}
{"bad_code": "public: void Jump() { Super::Jump(); }", "good_code": "public:\n    void Jump()\n    {\n        Super::Jump();\n    }"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere) bool bIsVisible;\nUPROPERTY(EditAnywhere, BlueprintReadWrite) float Speed;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere)\nbool bIsVisible;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere)\nfloat Speed;"}
{"bad_code": "int32 Add(int32 A,int32 B){return A+B;}", "good_code": "int32 Add(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "void DoSomething(){for(int32 i=0;i<10;++i){if(i%2==0){}else{}}}", "good_code": "void DoSomething()\n{\n    for (int32 i = 0; i < 10; ++i)\n    {\n        if (i % 2 == 0)\n        {\n        }\n        else\n        {\n        }\n    }\n}"}
{"bad_code": "UENUM() enum EMyEnum { Option1, Option2, Option3 };", "good_code": "UENUM()\nenum EMyEnum\n{\n    Option1,\n    Option2,\n    Option3\n};"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"Engine/World.h\"\n\nvoid AMyActor::Tick(float DeltaTime) {\n    Super::Tick(DeltaTime); DoSomething();\n}", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    DoSomething();\n}"}
{"bad_code": "UCLASS() class AMyCharacter : public AActor {\npublic:\n    AMyCharacter(); virtual void BeginPlay() override;\n    void DoAction();\nprotected:\n    void ResetState(); private:\n    int32 Health;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public AActor\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void DoAction();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Health, Stamina;\nbool bIsAlive;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Health;\n\nUPROPERTY(EditAnywhere)\nint32 Stamina;\n\nUPROPERTY(EditAnywhere)\nbool bIsAlive;"}
{"bad_code": "void AMyActor::BeginPlay()\n{\n    if (bIsVisible) SetActorHiddenInGame(false);\n    else SetActorHiddenInGame(true);\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    if (bIsVisible)\n    {\n        SetActorHiddenInGame(false);\n    }\n    else\n    {\n        SetActorHiddenInGame(true);\n    }\n}"}
{"bad_code": "USTRUCT() struct FMyStats { float Strength; float Agility; int32 Intelligence; };", "good_code": "USTRUCT()\nstruct FMyStats\n{\n    float Strength;\n    float Agility;\n    int32 Intelligence;\n};"}
{"bad_code": "UFUNCTION(BlueprintCallable) void Jump(); UFUNCTION(BlueprintCallable) void Crouch();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid Jump();\n\nUFUNCTION(BlueprintCallable)\nvoid Crouch();"}
{"bad_code": "int32 CalculateDamage(int32 BaseDamage,int32 Modifier){ return BaseDamage*Modifier; }", "good_code": "int32 CalculateDamage(int32 BaseDamage, int32 Modifier)\n{\n    return BaseDamage * Modifier;\n}"}
{"bad_code": "bool AMyCharacter::CanJump(){ return bIsOnGround; }", "good_code": "bool AMyCharacter::CanJump()\n{\n    return bIsOnGround;\n}"}
{"bad_code": "private: int32 Health; float Speed; bool bIsJumping;", "good_code": "private:\n    int32 Health;\n    float Speed;\n    bool bIsJumping;"}
{"bad_code": "void Move(){ Position += Speed*Direction; }", "good_code": "void Move()\n{\n    Position += Speed * Direction;\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyGameInstance.h\"\n#include \"Engine/World.h\"\n\nUCLASS()\nclass AMyActor: public AActor {\npublic:\n    AMyActor();\n    void Tick(float DeltaTime) override;\n    void DoSomething() { int32 Count=0; Count++; }\n\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Tick(float DeltaTime) override;\n\n    void DoSomething();\n\nprivate:\n    bool bIsActive;\n};\n\nvoid AMyActor::DoSomething()\n{\n    int32 Count = 0;\n    Count++;\n}"}
{"bad_code": "UCLASS()\nclass AMyCharacter: public ACharacter{\npublic:\n    AMyCharacter();\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\n    void Jump() { if(!bIsJumping) bIsJumping=true; }\nprivate:\n    bool bIsJumping;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\n\n    void Jump();\n\nprivate:\n    bool bIsJumping;\n};\n\nvoid AMyCharacter::Jump()\n{\n    if (!bIsJumping)\n    {\n        bIsJumping = true;\n    }\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category=\"Stats\")\nint32 Health, Stamina;", "good_code": "UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"Stats\")\nint32 Stamina;"}
{"bad_code": "UENUM()\nenum class ECharacterState : uint8 { Idle, Running, Jumping, };", "good_code": "UENUM()\nenum class ECharacterState : uint8\n{\n    Idle,\n    Running,\n    Jumping,\n};"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"GameFramework/Actor.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS()\nclass UMyComponent: public UActorComponent{\nUPROPERTY(EditAnywhere)\nfloat Speed;};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n    UPROPERTY(EditAnywhere)\n    float Speed;\n};"}
{"bad_code": "void AMyActor::OnOverlapBegin(AActor* OtherActor, int32 OverlapIndex){\n    if(OtherActor){\n        if(OverlapIndex > 0) DoSomething();}\n}", "good_code": "void AMyActor::OnOverlapBegin(AActor* OtherActor, int32 OverlapIndex)\n{\n    if (OtherActor)\n    {\n        if (OverlapIndex > 0)\n        {\n            DoSomething();\n        }\n    }\n}"}
{"bad_code": "UPROPERTY(Category=\"Settings\", EditDefaultsOnly)\nbool bIsEnabled;", "good_code": "UPROPERTY(EditDefaultsOnly, Category = \"Settings\")\nbool bIsEnabled;"}
{"bad_code": "UCLASS()\nclass AMyPawn: public APawn{\nprotected:\n    virtual void BeginPlay() override;\npublic:\n    AMyPawn();\n    void Move();\n    void Jump(){m_JumpHeight+=10;}\nprivate:\n    int32 m_JumpHeight;\n};", "good_code": "UCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\n    void Move();\n\nprotected:\n    virtual void BeginPlay() override;\n\n    void Jump();\n\nprivate:\n    int32 m_JumpHeight;\n};\n\nvoid AMyPawn::Jump()\n{\n    m_JumpHeight += 10;\n}"}
{"bad_code": "UCLASS()\nclass APlayerController : public AController {\n    GENERATED_BODY()\n    void SetupInputComponent() override;\n};", "good_code": "UCLASS()\nclass APlayerController : public AController\n{\n    GENERATED_BODY()\n\n    void SetupInputComponent() override;\n};"}
{"bad_code": "#include \"MyPlayerState.h\"\n#include \"GameFramework/PlayerState.h\"\n\nUCLASS()\nclass UMyPlayerState: public APlayerState{\npublic:\n    UFUNCTION(BlueprintCallable)\n    void ResetScore();\n};", "good_code": "#include \"GameFramework/PlayerState.h\"\n\n#include \"MyPlayerState.h\"\n\nUCLASS()\nclass UMyPlayerState : public APlayerState\n{\npublic:\n    UFUNCTION(BlueprintCallable)\n    void ResetScore();\n};"}
{"bad_code": "UCLASS() class AMyCharacter : public ACharacter {\npublic: AMyCharacter() {}\nint32 Health;\nprotected: void ResetHealth(){}\nprivate: void PrivateFunction(){} float Speed; };", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\nprotected:\n    void ResetHealth();\n\nprivate:\n    void PrivateFunction();\n\n    int32 Health;\n    float Speed;\n};"}
{"bad_code": "#include \"Engine/World.h\"\n#include \"MyActor.h\"\n#include \"GameFramework/Actor.h\"", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "UPROPERTY(float MaxHealth; int32 CurrentHealth;)", "good_code": "UPROPERTY()\nfloat MaxHealth;\n\nUPROPERTY()\nint32 CurrentHealth;"}
{"bad_code": "void AMyCharacter::MoveToLocation(FVector Location){\n    FVector Direction=Location-GetActorLocation();SetActorLocation(Location);\n}", "good_code": "void AMyCharacter::MoveToLocation(FVector Location)\n{\n    FVector Direction = Location - GetActorLocation();\n    SetActorLocation(Location);\n}"}
{"bad_code": "if(bIsAlive) SetActorHiddenInGame(false);", "good_code": "if (bIsAlive)\n{\n    SetActorHiddenInGame(false);\n}"}
{"bad_code": "bool bCanJump, bIsRunning;", "good_code": "bool bCanJump;\nbool bIsRunning;"}
{"bad_code": "#define my_macro 1", "good_code": "#define MY_MACRO 1"}
{"bad_code": "int32 Result=A+B;", "good_code": "int32 Result = A + B;"}
{"bad_code": "UFUNCTION(BlueprintCallable, Category=\"Gameplay\") void ExecuteAction();", "good_code": "UFUNCTION(BlueprintCallable, Category = \"Gameplay\")\nvoid ExecuteAction();"}
{"bad_code": "public: void Initialize();\nprivate: FVector m_Location;\nprotected: virtual void Destroy() override;", "good_code": "public:\n    void Initialize();\n\nprotected:\n    virtual void Destroy() override;\n\nprivate:\n    FVector m_Location;"}
{"bad_code": "class AMyCharacter : public ACharacter\n{\n    int32 Health; virtual void BeginPlay() override;\npublic:\n    void Initialize(); AMyCharacter(){}\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Initialize();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS() class UMyComponent : public UActorComponent\n{\n    UFUNCTION(BlueprintCallable, Category=\"Action\") void DoAction();\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Action\")\n    void DoAction();\n};"}
{"bad_code": "UPROPERTY() int32 Score; int32 Lives;\nif(bIsGameOver) { RestartGame(); }", "good_code": "UPROPERTY()\nint32 Score;\n\nint32 Lives;\n\nif (bIsGameOver)\n{\n    RestartGame();\n}"}
{"bad_code": "#include \"MyGameInstance.h\"\n#include \"CoreMinimal.h\"\nUCLASS()\nclass UMyGameInstance : public UGameInstance\n{\n    GENERATED_BODY()\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance\n{\n    GENERATED_BODY()\n};"}
{"bad_code": "float CalculateDamage(float baseDamage,float multiplier) {\n    return baseDamage*multiplier;\n}", "good_code": "float CalculateDamage(float BaseDamage, float Multiplier)\n{\n    return BaseDamage * Multiplier;\n}"}
{"bad_code": "class AMyActor : public AActor\n{\n    public: void BeginDestroy()override; bool bIsActive;\n};", "good_code": "class AMyActor : public AActor\n{\npublic:\n    void BeginDestroy() override;\n\n    bool bIsActive;\n};"}
{"bad_code": "UPROPERTY(Category=\"Stats\", BlueprintReadWrite) float Health;\nUPROPERTY(BlueprintReadOnly, Category=\"Stats\") float MaxHealth;", "good_code": "UPROPERTY(BlueprintReadWrite, Category = \"Stats\")\nfloat Health;\n\nUPROPERTY(BlueprintReadOnly, Category = \"Stats\")\nfloat MaxHealth;"}
{"bad_code": "while(Condition) DoSomething();", "good_code": "while (Condition)\n{\n    DoSomething();\n}"}
{"bad_code": "int32 a=5,b=10,c=15; int32 result=a+b+c;", "good_code": "int32 A = 5;\nint32 B = 10;\nint32 C = 15;\n\nint32 Result = A + B + C;"}
{"bad_code": "if(Condition) { Execute(); } else { Terminate(); }", "good_code": "if (Condition)\n{\n    Execute();\n}\nelse\n{\n    Terminate();\n}"}
{"bad_code": "#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {};\n\n    void Begin() { if (bIsActive) Activate(); };\n\nprotected:\n    int32 Health, Stamina;\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void Begin();\n\nprotected:\n    int32 Health;\n    int32 Stamina;\n\nprivate:\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::Begin()\n{\n    if (bIsActive)\n    {\n        Activate();\n    }\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nint32 Score, Level;\n\nUFUNCTION(BlueprintCallable)\nvoid UpdateScore(int value) { Score += value; }", "good_code": "UPROPERTY(VisibleAnywhere)\nint32 Score;\n\nUPROPERTY(VisibleAnywhere)\nint32 Level;\n\nUFUNCTION(BlueprintCallable)\nvoid UpdateScore(int32 Value)\n{\n    Score += Value;\n}"}
{"bad_code": "UENUM()\nenum class EWeaponType\n{ Sword, Bow, Axe };\n\nUCLASS()\nclass AWeapon : public AActor\n{\npublic:\n    AWeapon() { Initialize(); }\nprivate:\n    void Initialize() {}\n};", "good_code": "UENUM()\nenum class EWeaponType\n{\n    Sword,\n    Bow,\n    Axe\n};\n\nUCLASS()\nclass AWeapon : public AActor\n{\npublic:\n    AWeapon();\n\nprivate:\n    void Initialize();\n};\n\nAWeapon::AWeapon()\n{\n    Initialize();\n}\n\nvoid AWeapon::Initialize()\n{\n}"}
{"bad_code": "UPROPERTY(BlueprintReadWrite)\nfloat MaxHealth, CurrentHealth;\n\nbool IsAlive() { return CurrentHealth > 0; }", "good_code": "UPROPERTY(BlueprintReadWrite)\nfloat MaxHealth;\n\nUPROPERTY(BlueprintReadWrite)\nfloat CurrentHealth;\n\nbool IsAlive()\n{\n    return CurrentHealth > 0;\n}"}
{"bad_code": "UCLASS()\nclass AEnemy : public ACharacter {\npublic:\n    AEnemy() {}\n\nprivate:\n    void Attack() { /* Implementation */ }\n};", "good_code": "UCLASS()\nclass AEnemy : public ACharacter\n{\npublic:\n    AEnemy();\n\nprivate:\n    void Attack();\n};\n\nAEnemy::AEnemy()\n{\n}\n\nvoid AEnemy::Attack()\n{\n    // Implementation\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) bool bIsVisible;\n\nvoid SetVisibility(bool Visible) { bIsVisible = Visible; }", "good_code": "UPROPERTY(EditAnywhere)\nbool bIsVisible;\n\nvoid SetVisibility(bool bVisible)\n{\n    bIsVisible = bVisible;\n}"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    UMyComponent() {}\n\n    void Initialize() { isInitialized = true; }\nprivate:\n    bool isInitialized;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    void Initialize();\n\nprivate:\n    bool bIsInitialized;\n};\n\nUMyComponent::UMyComponent()\n{\n}\n\nvoid UMyComponent::Initialize()\n{\n    bIsInitialized = true;\n}"}
{"bad_code": "void Calculate(int a, int b){int result=a+b;result*=2;}", "good_code": "void Calculate(int32 A, int32 B)\n{\n    int32 Result = A + B;\n    Result *= 2;\n}"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats { int32 Health, Mana; };\n\nvoid ResetStats() { Health = 100; Mana = 50; }", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    int32 Health;\n    int32 Mana;\n};\n\nvoid ResetStats()\n{\n    Health = 100;\n    Mana = 50;\n}"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nint32 Speed, Power;\n\nvoid IncreaseSpeed(int increment) { Speed += increment; };", "good_code": "UPROPERTY(VisibleAnywhere)\nint32 Speed;\n\nUPROPERTY(VisibleAnywhere)\nint32 Power;\n\nvoid IncreaseSpeed(int32 Increment)\n{\n    Speed += Increment;\n}"}
{"bad_code": "class MyActor : public AActor {\npublic:\n    MyActor() {}\n    void BeginPlay() override {}\nprivate:\n    int32 health;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "#include \"MyProject.h\"#include \"MyComponent.h\"\n#include \"GameFramework/Actor.h\"\n\nclass UMyComponent : public UActorComponent {\n};", "good_code": "#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n#include \"MyProject.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\n};"}
{"bad_code": "public: UFUNCTION(BlueprintCallable)void FireWeapon();", "good_code": "public:\n    UFUNCTION(BlueprintCallable)\n    void FireWeapon();"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Movement\") float speed;\nUPROPERTY(EditAnywhere, Category=\"Movement\") bool canJump;", "good_code": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Movement\")\nfloat Speed;\n\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Movement\")\nbool bCanJump;"}
{"bad_code": "void Initialize() {int x=10;int y=20;x = x + y;}", "good_code": "void Initialize()\n{\n    int32 X = 10;\n    int32 Y = 20;\n    X = X + Y;\n}"}
{"bad_code": "protected:\nvoid ResetState() { /* implementation */ }", "good_code": "protected:\n    void ResetState()\n    {\n        // implementation\n    }"}
{"bad_code": "bool isVisible = true;int result=A+B;", "good_code": "bool bIsVisible = true;\nint32 Result = A + B;"}
{"bad_code": "if(bIsActive) DoSomething();", "good_code": "if (bIsActive)\n{\n    DoSomething();\n}"}
{"bad_code": "int32 a=5,b=10;", "good_code": "int32 A = 5;\nint32 B = 10;"}
{"bad_code": "protected:UPROPERTY(VisibleAnywhere)int32 score;", "good_code": "protected:\n    UPROPERTY(VisibleAnywhere)\n    int32 Score;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"MyProject/MyActor.h\"\n\nUCLASS()\nclass MyActor : public AActor\n{public:MyActor() {}\n\nvoid Activate() {}\n\nint32 Health;\n};", "good_code": "#include \"Components/StaticMeshComponent.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n\nUCLASS()\nclass MyActor : public AActor\n{\npublic:\n    MyActor();\n\n    void Activate();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UCLASS()\nclass AnotherActor : public AActor {\npublic:\nAnotherActor() {\nbIsActive = true;}\n\nvoid SetActive(bool bActive){bIsActive = bActive;}\n\nbool bIsActive;\n};", "good_code": "UCLASS()\nclass AnotherActor : public AActor\n{\npublic:\n    AnotherActor();\n\n    void SetActive(bool bActive);\n\nprivate:\n    bool bIsActive;\n};\n\nAnotherActor::AnotherActor()\n{\n    bIsActive = true;\n}\n\nvoid AnotherActor::SetActive(bool bActive)\n{\n    bIsActive = bActive;\n}"}
{"bad_code": "UCLASS()\nclass SimpleCharacter : public ACharacter {\n    GENERATED_BODY()\npublic:\nSimpleCharacter() {}\n\nvirtual void BeginPlay() override {\nSuper::BeginPlay();}\n\nvoid Jump(){}\n};", "good_code": "UCLASS()\nclass SimpleCharacter : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    SimpleCharacter();\n\n    virtual void BeginPlay() override;\n\n    void Jump();\n};\n\nSimpleCharacter::SimpleCharacter()\n{\n}\n\nvoid SimpleCharacter::BeginPlay()\n{\n    Super::BeginPlay();\n}\n\nvoid SimpleCharacter::Jump()\n{\n}"}
{"bad_code": "UPROPERTY(EditAnywhere)\nint32 MaxHealth, CurrentHealth;\n\nvoid TakeDamage(int32 Damage){CurrentHealth -= Damage;}", "good_code": "UPROPERTY(EditAnywhere)\nint32 MaxHealth;\n\nUPROPERTY(EditAnywhere)\nint32 CurrentHealth;\n\nvoid TakeDamage(int32 Damage)\n{\n    CurrentHealth -= Damage;\n}"}
{"bad_code": "if(bIsVisible) SetActorHiddenInGame(false);\nelse SetActorHiddenInGame(true);", "good_code": "if (bIsVisible)\n{\n    SetActorHiddenInGame(false);\n}\nelse\n{\n    SetActorHiddenInGame(true);\n}"}
{"bad_code": "int32 A=5, B=10; \nint32 Result=A+B;", "good_code": "int32 A = 5;\nint32 B = 10;\n\nint32 Result = A + B;"}
{"bad_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\nvoid InitializeComponent(){}\n\nint32 Speed, Strength;\n};", "good_code": "UCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    void InitializeComponent();\n\nprivate:\n    int32 Speed;\n    int32 Strength;\n};\n\nvoid UMyComponent::InitializeComponent()\n{\n}"}
{"bad_code": "UENUM()\nenum EPlayerState\n{ Idle, Running, Jumping };", "good_code": "UENUM()\nenum EPlayerState\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "USTRUCT()\nstruct FPlayerStats\n{ GENERATED_BODY() int32 Health; int32 Stamina; };", "good_code": "USTRUCT()\nstruct FPlayerStats\n{\n    GENERATED_BODY()\n\n    int32 Health;\n    int32 Stamina;\n};"}
{"bad_code": "UCLASS()\nclass MyGameMode : public AGameModeBase {\npublic:\nMyGameMode() {}\n\nvoid StartPlay() override{\nSuper::StartPlay();}\n};", "good_code": "UCLASS()\nclass MyGameMode : public AGameModeBase\n{\npublic:\n    MyGameMode();\n\n    virtual void StartPlay() override;\n};\n\nMyGameMode::MyGameMode()\n{\n}\n\nvoid MyGameMode::StartPlay()\n{\n    Super::StartPlay();\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject/MyActor.h\"\n#include \"Engine/Engine.h\"\n\nUCLASS()\nclass MYPROJECT_API AMyActor : public AActor\n{\npublic:\n    AMyActor() { bIsActive = true; }\n    bool IsActive() const { return bIsActive; }\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n\nUCLASS()\nclass MYPROJECT_API AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    bool IsActive() const;\n\nprivate:\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n    bIsActive = true;\n}\n\nbool AMyActor::IsActive() const\n{\n    return bIsActive;\n}"}
{"bad_code": "UENUM()\nenum class ECharacterState\n{\n    Idle, Running, Jumping\n};", "good_code": "UENUM()\nenum class ECharacterState\n{\n    Idle,\n    Running,\n    Jumping\n};"}
{"bad_code": "UCLASS()\nclass MYPROJECT_API AMyCharacter : public ACharacter\n{\npublic:\n    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"Movement\") float Speed, JumpHeight;\n\n    void Run(); void Jump();\n};", "good_code": "UCLASS()\nclass MYPROJECT_API AMyCharacter : public ACharacter\n{\npublic:\n    UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Movement\")\n    float Speed;\n    \n    UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"Movement\")\n    float JumpHeight;\n\n    void Run();\n\n    void Jump();\n};"}
{"bad_code": "void AMyActor::BeginPlay() {\n    Super::BeginPlay();\n    if(bIsActive) Activate();\n}", "good_code": "void AMyActor::BeginPlay()\n{\n    Super::BeginPlay();\n\n    if (bIsActive)\n    {\n        Activate();\n    }\n}"}
{"bad_code": "UPROPERTY(EditAnywhere, Category=\"Health\") int32 Health = 100;\nUPROPERTY(EditAnywhere, Category=\"Stamina\") int32 Stamina = 100;", "good_code": "UPROPERTY(EditAnywhere, Category = \"Health\")\nint32 Health = 100;\n\nUPROPERTY(EditAnywhere, Category = \"Stamina\")\nint32 Stamina = 100;"}
{"bad_code": "int32 CalculateDamage(int32 BaseDamage, int32 Armor) { return BaseDamage - Armor; }", "good_code": "int32 CalculateDamage(int32 BaseDamage, int32 Armor)\n{\n    return BaseDamage - Armor;\n}"}
{"bad_code": "bool bCanShoot, bIsReloading;\nbCanShoot = true; bIsReloading = false;", "good_code": "bool bCanShoot;\nbool bIsReloading;\n\nbCanShoot = true;\nbIsReloading = false;"}
{"bad_code": "public:\n    void Move(); void Stop();", "good_code": "public:\n    void Move();\n\n    void Stop();"}
{"bad_code": "UPROPERTY(VisibleAnywhere)\nint32 Score;\nUPROPERTY(EditDefaultsOnly)\nfloat MaxSpeed;", "good_code": "UPROPERTY(VisibleAnywhere)\nint32 Score;\n\nUPROPERTY(EditDefaultsOnly)\nfloat MaxSpeed;"}
{"bad_code": "void UpdatePosition(float DeltaTime) { Position += Velocity * DeltaTime; }", "good_code": "void UpdatePosition(float DeltaTime)\n{\n    Position += Velocity * DeltaTime;\n}"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n#include \"Engine/World.h\"\n#include \"GameFramework/PlayerController.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor();\n    void BeginPlay() override;\nprivate:\n    float Health, MaxHealth;\n    void DoSomething(); void AnotherFunction();\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n#include \"GameFramework/PlayerController.h\"\n\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\nprivate:\n    void DoSomething();\n\n    void AnotherFunction();\n\n    float Health;\n\n    float MaxHealth;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n        Health = 100.0f;\n    }\n\n    void BeginPlay() override\n    {\n        Super::BeginPlay();\n    }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n        Health = 100.0f;\n    }\n\n    virtual void BeginPlay() override\n    {\n        Super::BeginPlay();\n    }\n};"}
{"bad_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    UPROPERTY(BlueprintReadOnly)\n    float Speed;\n\n    UPROPERTY(BlueprintReadOnly)\n    float Health;\n};", "good_code": "UCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\n    float Health;\n\n    UPROPERTY(BlueprintReadOnly, Category = \"Stats\")\n    float Speed;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly) int32 Score;\nUPROPERTY(VisibleAnywhere) bool bIsAlive;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Game\")\nint32 Score;\n\nUPROPERTY(VisibleAnywhere, Category = \"State\")\nbool bIsAlive;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime) {\n    Super::Tick(DeltaTime); if (bIsActive) DoSomething();\n}", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bIsActive)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\npublic:\n    AMyComponent(); void InitializeComponent() override;\n};", "good_code": "UCLASS()\nclass AMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    AMyComponent();\n\n    virtual void InitializeComponent() override;\n};"}
{"bad_code": "if (Health>0) { bIsAlive = true; } else { bIsAlive = false; }", "good_code": "if (Health > 0)\n{\n    bIsAlive = true;\n}\nelse\n{\n    bIsAlive = false;\n}"}
{"bad_code": "class AMyPawn : public APawn\n{\n    GENERATED_BODY()\nprotected:\n    void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\n    bool bIsJumping;\n    void Jump();\n};", "good_code": "class AMyPawn : public APawn\n{\n    GENERATED_BODY()\n\nprotected:\n    virtual void SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) override;\n\n    void Jump();\n\n    bool bIsJumping;\n};"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Health, Armor;", "good_code": "UPROPERTY(EditAnywhere, Category = \"Stats\")\nint32 Health;\n\nUPROPERTY(EditAnywhere, Category = \"Stats\")\nint32 Armor;"}
{"bad_code": "void AMyActor::DoSomething() { int32 Sum = 0; for (int32 i=0; i<10; i++) { Sum += i; } }", "good_code": "void AMyActor::DoSomething()\n{\n    int32 Sum = 0;\n\n    for (int32 i = 0; i < 10; i++)\n    {\n        Sum += i;\n    }\n}"}
{"bad_code": "#include \"MyProject.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor {\npublic:\n    AMyActor() {\n        Health = 100;\n    }\n};", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"MyProject.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor()\n    {\n        Health = 100;\n    }\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "void SomeFunction() { int32 A = 10; int32 B = 20; int32 Result = A+B;}", "good_code": "void SomeFunction()\n{\n    int32 A = 10;\n    int32 B = 20;\n    int32 Result = A + B;\n}"}
{"bad_code": "UPROPERTY(EditAnywhere) int32 Health, Stamina;", "good_code": "UPROPERTY(EditAnywhere)\nint32 Health;\n\nUPROPERTY(EditAnywhere)\nint32 Stamina;"}
{"bad_code": "USTRUCT()\nstruct FMyStruct {\n    GENERATED_BODY()\n    int32 Value;\n    bool bIsEnabled;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    int32 Value;\n    bool bIsEnabled;\n};"}
{"bad_code": "class UMyComponent : public UActorComponent {\npublic:\n    void SetActive(bool bActive) { bIsActive = bActive; }\nprivate:\n    bool bIsActive;\n};", "good_code": "class UMyComponent : public UActorComponent\n{\npublic:\n    void SetActive(bool bActive)\n    {\n        bIsActive = bActive;\n    }\n\nprivate:\n    bool bIsActive;\n};"}
{"bad_code": "int32 CalculateSum(int32 A, int32 B) {return A+B;}", "good_code": "int32 CalculateSum(int32 A, int32 B)\n{\n    return A + B;\n}"}
{"bad_code": "UFUNCTION(BlueprintCallable) void ExecuteAction();", "good_code": "UFUNCTION(BlueprintCallable)\nvoid ExecuteAction();"}
{"bad_code": "void CheckValue() { if(Value>10) { DoSomething(); } }", "good_code": "void CheckValue()\n{\n    if (Value > 10)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "class AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() : Speed(600.f), Health(100) {}\n};", "good_code": "class AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter()\n        : Speed(600.f)\n        , Health(100)\n    {\n    }\n\nprivate:\n    float Speed;\n    int32 Health;\n};"}
{"bad_code": "bool IsValid() const { return bIsInitialized && !bIsDestroyed; }", "good_code": "bool IsValid() const\n{\n    return bIsInitialized && !bIsDestroyed;\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\nclass AMyActor: public AActor {\npublic:\n    AMyActor() {}\n\n    void DoSomething() { int32 A = 0; A++; }\n\nprivate:\n    int32 Health;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyComponent.h\"\n\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    void DoSomething();\n\nprivate:\n    int32 Health;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::DoSomething()\n{\n    int32 A = 0;\n    A++;\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\") float MaxHealth;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadOnly, Category = \"Health\")\n    float MaxHealth;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Actions\") void Jump(); \n\nprotected: void Land();\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    UFUNCTION(BlueprintCallable, Category = \"Actions\")\n    void Jump();\n\nprotected:\n    void Land();\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Initialize() {}\n\n    virtual void BeginPlay() override {}\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Initialize();\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n}\n\nvoid AMyActor::Initialize()\n{\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Activate() { int32 Value=42; if(Value > 0){Value++;} }\n\nprivate:\n    bool bIsActive;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Activate();\n\nprivate:\n    bool bIsActive;\n};\n\nvoid AMyActor::Activate()\n{\n    int32 Value = 42;\n\n    if (Value > 0)\n    {\n        Value++;\n    }\n}"}
{"bad_code": "#include \"CoreMinimal.h\"\n#include \"Components/ActorComponent.h\"\n#include \"MyComponent.generated.h\"\n\nUCLASS(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\n    UPROPERTY(BlueprintReadWrite, Category=\"Settings\") int32 Health, Armor;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.generated.h\"\n\nUCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))\nclass UMyComponent : public UActorComponent\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(BlueprintReadWrite, Category = \"Settings\")\n    int32 Health;\n\n    UPROPERTY(BlueprintReadWrite, Category = \"Settings\")\n    int32 Armor;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void SetVisibility(bool bVisible) { SetActorHiddenInGame(!bVisible); }\n\nprivate:\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void SetVisibility(bool bVisible);\n\nprivate:\n    float Speed;\n};\n\nvoid AMyActor::SetVisibility(bool bVisible)\n{\n    SetActorHiddenInGame(!bVisible);\n}"}
{"bad_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Data\") int32 Value;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Data\") float Speed;\n};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    GENERATED_BODY()\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Data\")\n    int32 Value;\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Data\")\n    float Speed;\n};"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Calculate() { int32 Sum=0; for(int32 i=0;i<10;i++){ Sum+=i; } }\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Calculate();\n};\n\nvoid AMyActor::Calculate()\n{\n    int32 Sum = 0;\n\n    for (int32 i = 0; i < 10; i++)\n    {\n        Sum += i;\n    }\n}"}
{"bad_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Move(float DeltaTime) { float Distance = Speed*DeltaTime; SetActorLocation(GetActorLocation() + FVector(Distance, 0, 0)); }\n\nprivate:\n    float Speed;\n};", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    void Move(float DeltaTime);\n\nprivate:\n    float Speed;\n};\n\nvoid AMyActor::Move(float DeltaTime)\n{\n    float Distance = Speed * DeltaTime;\n\n    SetActorLocation(GetActorLocation() + FVector(Distance, 0, 0));\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"CoreMinimal.h\"\n#include \"Engine/Engine.h\"\n#include \"GameFramework/Actor.h\"\n#include \"MyGameMode.h\"\n\nUCLASS() class AMyActor : public AActor {\npublic:\n    AMyActor(){}\n\n    void BeginPlay() override;\n\n    void Activate() { if (bIsActive) { bIsActive = false; } else { bIsActive = true; } }\n\nprivate:\n    bool bIsActive;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Engine.h\"\n\n#include \"GameFramework/Actor.h\"\n#include \"MyComponent.h\"\n#include \"MyGameMode.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprivate:\n    bool bIsActive;\n};\n\nAMyActor::AMyActor()\n{\n}\n\nvoid AMyActor::BeginPlay()\n{\n}\n\nvoid AMyActor::Activate()\n{\n    if (bIsActive)\n    {\n        bIsActive = false;\n    }\n    else\n    {\n        bIsActive = true;\n    }\n}"}
{"bad_code": "#include \"MyCharacter.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter {\npublic:\n    AMyCharacter() : Health(100), Armor(50) {}\n\n    void TakeDamage(int Damage);\n\nprivate:\n    UPROPERTY(BlueprintReadOnly)\n    int Health, Armor;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Character.h\"\n\n#include \"MyCharacter.h\"\n\nUCLASS()\nclass AMyCharacter : public ACharacter\n{\npublic:\n    AMyCharacter();\n\n    void TakeDamage(int32 Damage);\n\nprivate:\n    UPROPERTY(BlueprintReadOnly)\n    int32 Health;\n\n    UPROPERTY(BlueprintReadOnly)\n    int32 Armor;\n};\n\nAMyCharacter::AMyCharacter()\n    : Health(100)\n    , Armor(50)\n{\n}\n\nvoid AMyCharacter::TakeDamage(int32 Damage)\n{\n}"}
{"bad_code": "#include \"MyPlayerController.h\"\n#include \"CoreMinimal.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController {\npublic:\n    AMyPlayerController() {}\n\n    void SetupInputComponent();\n\nprotected:\n    void MoveForward(float Value);\n\n    void MoveRight(float Value);\n};", "good_code": "#include \"CoreMinimal.h\"\n\n#include \"MyPlayerController.h\"\n\nUCLASS()\nclass AMyPlayerController : public APlayerController\n{\npublic:\n    AMyPlayerController();\n\n    virtual void SetupInputComponent() override;\n\nprotected:\n    void MoveForward(float Value);\n\n    void MoveRight(float Value);\n};\n\nAMyPlayerController::AMyPlayerController()\n{\n}\n\nvoid AMyPlayerController::SetupInputComponent()\n{\n}\n\nvoid AMyPlayerController::MoveForward(float Value)\n{\n}\n\nvoid AMyPlayerController::MoveRight(float Value)\n{\n}"}
{"bad_code": "#include \"MyComponent.h\"\n#include \"CoreMinimal.h\"\n#include \"Components/ActorComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent {\npublic:\n    UMyComponent() {}\n\n    void InitializeComponent() override;\n    \n    void TickComponent(float DeltaTime);\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    int32 Speed, Strength;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Components/ActorComponent.h\"\n\n#include \"MyComponent.h\"\n\nUCLASS()\nclass UMyComponent : public UActorComponent\n{\npublic:\n    UMyComponent();\n\n    virtual void InitializeComponent() override;\n\n    void TickComponent(float DeltaTime);\n\nprivate:\n    UPROPERTY(EditAnywhere)\n    int32 Speed;\n\n    UPROPERTY(EditAnywhere)\n    int32 Strength;\n};\n\nUMyComponent::UMyComponent()\n{\n}\n\nvoid UMyComponent::InitializeComponent()\n{\n}\n\nvoid UMyComponent::TickComponent(float DeltaTime)\n{\n}"}
{"bad_code": "#include \"MyHUD.h\"\n#include \"CoreMinimal.h\"\n#include \"Engine/Canvas.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD {\npublic:\n    AMyHUD() {}\n\n    void DrawHUD() override;\n\nprivate:\n    void DrawHealthBar();\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/Canvas.h\"\n\n#include \"MyHUD.h\"\n\nUCLASS()\nclass AMyHUD : public AHUD\n{\npublic:\n    AMyHUD();\n\n    virtual void DrawHUD() override;\n\nprivate:\n    void DrawHealthBar();\n};\n\nAMyHUD::AMyHUD()\n{\n}\n\nvoid AMyHUD::DrawHUD()\n{\n}\n\nvoid AMyHUD::DrawHealthBar()\n{\n}"}
{"bad_code": "#include \"MyGameState.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/GameStateBase.h\"\n\nUCLASS()\nclass AMyGameState : public AGameStateBase {\npublic:\n    AMyGameState() {}\n\n    void HandleMatchHasStarted() override;\n\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    bool bIsGameOver;\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/GameStateBase.h\"\n\n#include \"MyGameState.h\"\n\nUCLASS()\nclass AMyGameState : public AGameStateBase\n{\npublic:\n    AMyGameState();\n\n    virtual void HandleMatchHasStarted() override;\n\nprivate:\n    UPROPERTY(VisibleAnywhere)\n    bool bIsGameOver;\n};\n\nAMyGameState::AMyGameState()\n{\n}\n\nvoid AMyGameState::HandleMatchHasStarted()\n{\n}"}
{"bad_code": "#include \"MyAIController.h\"\n#include \"CoreMinimal.h\"\n#include \"AIController.h\"\n\nUCLASS()\nclass AMyAIController : public AAIController {\npublic:\n    AMyAIController() {}\n\n    void OnPossess(APawn* InPawn) override;\n\nprivate:\n    void Patrol();\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"AIController.h\"\n\n#include \"MyAIController.h\"\n\nUCLASS()\nclass AMyAIController : public AAIController\n{\npublic:\n    AMyAIController();\n\n    virtual void OnPossess(APawn* InPawn) override;\n\nprivate:\n    void Patrol();\n};\n\nAMyAIController::AMyAIController()\n{\n}\n\nvoid AMyAIController::OnPossess(APawn* InPawn)\n{\n}\n\nvoid AMyAIController::Patrol()\n{\n}"}
{"bad_code": "#include \"MyWidget.h\"\n#include \"CoreMinimal.h\"\n#include \"Blueprint/UserWidget.h\"\n\nUCLASS()\nclass UMyWidget : public UUserWidget {\npublic:\n    UMyWidget() {}\n\n    void NativeConstruct() override;\n\nprivate:\n    void UpdateUI();\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Blueprint/UserWidget.h\"\n\n#include \"MyWidget.h\"\n\nUCLASS()\nclass UMyWidget : public UUserWidget\n{\npublic:\n    UMyWidget();\n\n    virtual void NativeConstruct() override;\n\nprivate:\n    void UpdateUI();\n};\n\nUMyWidget::UMyWidget()\n{\n}\n\nvoid UMyWidget::NativeConstruct()\n{\n}\n\nvoid UMyWidget::UpdateUI()\n{\n}"}
{"bad_code": "#include \"MyGameInstance.h\"\n#include \"CoreMinimal.h\"\n#include \"Engine/GameInstance.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance {\npublic:\n    UMyGameInstance() {}\n\n    void Init() override;\n\nprivate:\n    void LoadGameData();\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"Engine/GameInstance.h\"\n\n#include \"MyGameInstance.h\"\n\nUCLASS()\nclass UMyGameInstance : public UGameInstance\n{\npublic:\n    UMyGameInstance();\n\n    virtual void Init() override;\n\nprivate:\n    void LoadGameData();\n};\n\nUMyGameInstance::UMyGameInstance()\n{\n}\n\nvoid UMyGameInstance::Init()\n{\n}\n\nvoid UMyGameInstance::LoadGameData()\n{\n}"}
{"bad_code": "#include \"MyPawn.h\"\n#include \"CoreMinimal.h\"\n#include \"GameFramework/Pawn.h\"\n\nUCLASS()\nclass AMyPawn : public APawn {\npublic:\n    AMyPawn() {}\n\n    void Tick(float DeltaTime) override;\n\nprivate:\n    void Move();\n\n    void Rotate();\n};", "good_code": "#include \"CoreMinimal.h\"\n#include \"GameFramework/Pawn.h\"\n\n#include \"MyPawn.h\"\n\nUCLASS()\nclass AMyPawn : public APawn\n{\npublic:\n    AMyPawn();\n\n    virtual void Tick(float DeltaTime) override;\n\nprivate:\n    void Move();\n\n    void Rotate();\n};\n\nAMyPawn::AMyPawn()\n{\n}\n\nvoid AMyPawn::Tick(float DeltaTime)\n{\n}\n\nvoid AMyPawn::Move()\n{\n}\n\nvoid AMyPawn::Rotate()\n{\n}"}
{"bad_code": "UCLASS() class AMyActor : public AActor {\npublic: AMyActor() { }\nvirtual void BeginPlay() override { }\nvoid Activate() { }\nprotected: void ResetState() { }\nprivate: int32 Health; };", "good_code": "UCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\") float MaxHealth; UPROPERTY(EditAnywhere, Category = \"Health\") float CurrentHealth;", "good_code": "UPROPERTY(BlueprintReadOnly, Category = \"Health\")\nfloat MaxHealth;\n\nUPROPERTY(EditAnywhere, Category = \"Health\")\nfloat CurrentHealth;"}
{"bad_code": "void AMyActor::Tick(float DeltaTime){ Super::Tick(DeltaTime); if(bIsActive){ DoSomething(); } }", "good_code": "void AMyActor::Tick(float DeltaTime)\n{\n    Super::Tick(DeltaTime);\n\n    if (bIsActive)\n    {\n        DoSomething();\n    }\n}"}
{"bad_code": "#include \"MyActor.h\" #include \"GameFramework/Actor.h\" #include \"Engine/World.h\"", "good_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n\n#include \"MyActor.h\""}
{"bad_code": "int32 AMyActor::CalculateScore(int32 Points,int32 Bonus){return Points+Bonus;}", "good_code": "int32 AMyActor::CalculateScore(int32 Points, int32 Bonus)\n{\n    return Points + Bonus;\n}"}
{"bad_code": "bool bIsVisible=true; bool bIsActive=false;", "good_code": "bool bIsVisible = true;\n\nbool bIsActive = false;"}
{"bad_code": "for(int32 i=0;i<10;++i){DoSomething();}", "good_code": "for (int32 i = 0; i < 10; ++i)\n{\n    DoSomething();\n}"}
{"bad_code": "void AMyActor::Initialize() {SetActorHiddenInGame(false); ResetState();}", "good_code": "void AMyActor::Initialize()\n{\n    SetActorHiddenInGame(false);\n\n    ResetState();\n}"}
{"bad_code": "if(bCanJump) Jump(); else Crouch();", "good_code": "if (bCanJump)\n{\n    Jump();\n}\nelse\n{\n    Crouch();\n}"}
{"bad_code": "float Health, Stamina, Energy;", "good_code": "float Health;\nfloat Stamina;\nfloat Energy;"}
{"bad_code": "#include \"GameFramework/Actor.h\"\n#include \"Engine/World.h\"\n#include \"MyProject/MyComponent.h\"\n#include \"MyProject/MyActor.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\n    AMyActor()\n    {\n    }\n    virtual void BeginPlay() override\n    {\n    }\n    void Activate(){}\n\nprotected:\n    void ResetState()\n    {\n    }\n\nprivate:\n    int32 Health;\n};", "good_code": "#include \"Engine/World.h\"\n#include \"GameFramework/Actor.h\"\n\n#include \"MyProject/MyActor.h\"\n#include \"MyProject/MyComponent.h\"\n\nUCLASS()\nclass AMyActor : public AActor\n{\npublic:\n    AMyActor();\n\n    virtual void BeginPlay() override;\n\n    void Activate();\n\nprotected:\n    void ResetState();\n\nprivate:\n    int32 Health;\n};"}
{"bad_code": "USTRUCT()\nstruct FMyStruct\n{int32 Value;};", "good_code": "USTRUCT()\nstruct FMyStruct\n{\n    int32 Value;\n};"}
